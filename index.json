{
  "api/Syn.Bot.Siml.Collections.ExampleItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.ExampleItem.html",
    "title": "Class ExampleItem - Syn Developer Network",
    "keywords": "Class ExampleItem Inheritance System.Object SearchItem ExampleItem Inherited Members SearchItem.Pattern SearchItem.Tokens SearchItem.IsAtomic System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class ExampleItem : SearchItem Constructors ExampleItem(SimlBot, String) Declaration public ExampleItem(SimlBot bot, string pattern) Parameters Type Name Description SimlBot bot System.String pattern Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.Collections.FilterCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.FilterCollection.html",
    "title": "Class FilterCollection - Syn Developer Network",
    "keywords": "Class FilterCollection Inheritance System.Object FilterCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class FilterCollection Constructors FilterCollection(SimlBot) Initializes a new instance of the FilterCollection class. Declaration public FilterCollection(SimlBot mainBot) Parameters Type Name Description SimlBot mainBot The main bot. Properties Count Gets the total number of filter items added to this filter collection. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods AddFilter(XElement) Adds a filter. Declaration public void AddFilter(XElement filterElement) Parameters Type Name Description System.Xml.Linq.XElement filterElement The filter element. Clear() Clears this filter collection. Declaration public void Clear() FilterInput(ChatRequest) Declaration public string FilterInput(ChatRequest request) Parameters Type Name Description ChatRequest request Returns Type Description System.String FilterOutput(String) Declaration public string FilterOutput(string message) Parameters Type Name Description System.String message Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Collections.VocabularyCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.VocabularyCollection.html",
    "title": "Class VocabularyCollection - Syn Developer Network",
    "keywords": "Class VocabularyCollection A Collection of all the known tokens. Inheritance System.Object VocabularyCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class VocabularyCollection : ICollection<VocabularyItem>, IEnumerable<VocabularyItem>, IEnumerable Constructors VocabularyCollection(SimlBot) Initializes a new instance of the VocabularyCollection class. Declaration public VocabularyCollection(SimlBot bot) Parameters Type Name Description SimlBot bot Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public VocabularyItem this[string token] { get; } Parameters Type Name Description System.String token Property Value Type Description VocabularyItem Methods Add(VocabularyItem) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(VocabularyItem item) Parameters Type Name Description VocabularyItem item The object to add to the System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String) Adds a new VocabularyItem with the specified token. Declaration public void Add(string token) Parameters Type Name Description System.String token The token. Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(VocabularyItem) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(VocabularyItem item) Parameters Type Name Description VocabularyItem item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(VocabularyItem[], Int32) Copies to. Declaration public void CopyTo(VocabularyItem[] array, int arrayIndex) Parameters Type Name Description VocabularyItem [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<VocabularyItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < VocabularyItem > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(VocabularyItem) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(VocabularyItem item) Parameters Type Name Description VocabularyItem item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.VocabularyItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.VocabularyItem.html",
    "title": "Class VocabularyItem - Syn Developer Network",
    "keywords": "Class VocabularyItem Inheritance System.Object VocabularyItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class VocabularyItem Constructors VocabularyItem(String) Initializes a new instance of the VocabularyItem class. Declaration public VocabularyItem(string token) Parameters Type Name Description System.String token The token. Properties Frequency Gets or sets the frequency. Declaration public int Frequency { get; } Property Value Type Description System.Int32 The frequency. Token Gets the token. Declaration public string Token { get; } Property Value Type Description System.String The token."
  },
  "api/Syn.Bot.Siml.Collections.html": {
    "href": "api/Syn.Bot.Siml.Collections.html",
    "title": "Namespace Syn.Bot.Siml.Collections - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Collections Classes AdapterCollection Represents a collection of IAdapter . DataCollection ExampleCollection ExampleItem FilterCollection InteractionCollection InteractionItem Map Default implementation of IMap interface. MapCollection Represents a collection of SIML Maps. MapItem Default implementation of IMapItem interface. ParserCollection Represents a collection of IParser . RandomCollection RegexCollection Class that contains all Regular Expressions created by the Developer. RegexItem SetCollection Represents a collection of SIML SetItem . SetItem Suggestion Tokenizer Represents an SIML splitter element. TokenizerCollection UsersCollection VocabularyCollection A Collection of all the known tokens. VocabularyItem Enums TokenizerType Provides enumerated values that determine the behavior of a Tokenizer"
  },
  "api/Syn.Bot.Siml.CommonSettings.html": {
    "href": "api/Syn.Bot.Siml.CommonSettings.html",
    "title": "Class CommonSettings - Syn Developer Network",
    "keywords": "Class CommonSettings Inheritance System.Object Settings CommonSettings BotSettings UserSettings VarSettings Inherited Members Settings.Bind(Settings) Settings.Load(Settings) Settings.Add(String, Func<String>) Settings.Add(IVariable) Settings.Remove(String) Settings.Clear() Settings.Contains(IVariable) Settings.CopyTo(IVariable[], Int32) Settings.Remove(IVariable) Settings.GetEnumerator() Settings.IEnumerable.GetEnumerator() Settings.TryGetValue(String, String) Settings.Contains(String) Settings.Variables Settings.Count Settings.IsReadOnly Settings.Name Settings.Location Settings.Item[String] Settings.SettingsChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class CommonSettings : Settings, ICollection<IVariable>, IEnumerable<IVariable>, IEnumerable Properties DefaultValue Gets or Sets the Default Value to return when a Settings Item is not found. Declaration public string DefaultValue { get; } Property Value Type Description System.String UndefinedValue Gets the value that is used to render a Variable as undefined. Declaration public string UndefinedValue { get; } Property Value Type Description System.String Methods GetDocument() Gets this Settings instance as an SIML System.Xml.Linq.XDocument . Declaration public XDocument GetDocument() Returns Type Description System.Xml.Linq.XDocument GetValue(String) Gets the main value of the specified variable. Declaration public override string GetValue(string variableName) Parameters Type Name Description System.String variableName Name of the variable. Returns Type Description System.String Value of the variable if it exists otherwise returns the default value. Overrides Settings.GetValue(String) Load(XDocument) Loads the specified settings from an SIML Document. Declaration public void Load(XDocument simlDocument) Parameters Type Name Description System.Xml.Linq.XDocument simlDocument The SIML Document. Load(XElement) Loads the specified settings element. Declaration public void Load(XElement settingsElement) Parameters Type Name Description System.Xml.Linq.XElement settingsElement The settings element. Extension Methods SettingsExtensions.ApplyToProperties(Settings, Object, String[]) SettingsExtensions.GetDocument(Settings)"
  },
  "api/Syn.Bot.Siml.ConceptType.html": {
    "href": "api/Syn.Bot.Siml.ConceptType.html",
    "title": "Enum ConceptType - Syn Developer Network",
    "keywords": "Enum ConceptType Provides enumerated values used to determine the type of Concept. Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum ConceptType Fields Name Description Private Concept Concept. Public Public Concept."
  },
  "api/Syn.Bot.Siml.Context.html": {
    "href": "api/Syn.Bot.Siml.Context.html",
    "title": "Class Context - Syn Developer Network",
    "keywords": "Class Context A Contextual collection of all the items that represent the current SIML node being processed. Inheritance System.Object Context Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class Context Properties Bot Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot ContextProcessor Declaration public IContextProcessor ContextProcessor { get; } Property Value Type Description IContextProcessor Data Declaration public DataCollection Data { get; } Property Value Type Description DataCollection Element Declaration public XElement Element { get; } Property Value Type Description System.Xml.Linq.XElement QueryTree Declaration public QueryTree QueryTree { get; } Property Value Type Description QueryTree RepeatedResponses Declaration public List<BotResponse> RepeatedResponses { get; set; } Property Value Type Description System.Collections.Generic.List < BotResponse > Request Declaration public ChatRequest Request { get; } Property Value Type Description ChatRequest Response Declaration public BotResponse Response { get; } Property Value Type Description BotResponse Result Declaration public ChatResult Result { get; } Property Value Type Description ChatResult User Declaration public BotUser User { get; } Property Value Type Description BotUser"
  },
  "api/Syn.Bot.Siml.ContextProcessor.html": {
    "href": "api/Syn.Bot.Siml.ContextProcessor.html",
    "title": "Class ContextProcessor - Syn Developer Network",
    "keywords": "Class ContextProcessor A Processor class that processes all the adapters found in the Context . Inheritance System.Object ContextProcessor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class ContextProcessor : IContextProcessor Methods Process(Context) Processes the given Context . Declaration public string Process(Context context) Parameters Type Name Description Context context Returns Type Description System.String Implements IContextProcessor.Process(Context) ProcessAndReplaceAll(XElement, String, Context) Processes the inner elements and replaces them with their values. Declaration public void ProcessAndReplaceAll(XElement elementNode, string tagName, Context parameter) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node. System.String tagName Name of the tag. Context parameter The context. Implements IContextProcessor.ProcessAndReplaceAll(XElement, String, Context) ProcessInnerElements(XElement, Context) Processes the inner elements of the specified System.Xml.Linq.XElement . Declaration public string ProcessInnerElements(XElement elementNode, Context parameter) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node. Context parameter The context. Returns Type Description System.String Implements IContextProcessor.ProcessInnerElements(XElement, Context) SaveToGraph(XElement, Context, GraphNode) Saves content to GraphNode Declaration public XDocument SaveToGraph(XElement elementNode, Context parameter, GraphNode graphNode) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node containing the content to save. Usually the Model element. Context parameter Parameter. GraphNode graphNode GraphNode. Returns Type Description System.Xml.Linq.XDocument Implements IContextProcessor.SaveToGraph(XElement, Context, GraphNode)"
  },
  "api/Syn.Bot.Siml.DelayBase.html": {
    "href": "api/Syn.Bot.Siml.DelayBase.html",
    "title": "Class DelayBase - Syn Developer Network",
    "keywords": "Class DelayBase Inheritance System.Object DelayBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public abstract class DelayBase Constructors DelayBase(Context) Declaration protected DelayBase(Context context) Parameters Type Name Description Context context Properties Bot Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot Element Declaration public XElement Element { get; set; } Property Value Type Description System.Xml.Linq.XElement ID Declaration public string ID { get; } Property Value Type Description System.String Interval Declaration public TimeSpan Interval { get; set; } Property Value Type Description System.TimeSpan Status Declaration public DelayStatus Status { get; set; } Property Value Type Description DelayStatus Stopwatch Gets the Stopwatch used to check if the service can be executed. Declaration public Stopwatch Stopwatch { get; } Property Value Type Description System.Diagnostics.Stopwatch User Declaration public BotUser User { get; } Property Value Type Description BotUser Methods Execute() Declaration public abstract void Execute()"
  },
  "api/Syn.Bot.Siml.Functional.html": {
    "href": "api/Syn.Bot.Siml.Functional.html",
    "title": "Namespace Syn.Bot.Siml.Functional - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Functional Classes FunctionalMapItem Default implementation of Syn.Bot.Siml.Interfaces.IFunctionalMapItem interface."
  },
  "api/Syn.Bot.Siml.Graph.GraphNode.html": {
    "href": "api/Syn.Bot.Siml.Graph.GraphNode.html",
    "title": "Class GraphNode - Syn Developer Network",
    "keywords": "Class GraphNode Represents an SIML Hybrid-Graph System. Inheritance System.Object GraphNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public sealed class GraphNode Properties Children GraphNode children. Declaration public Dictionary<string, GraphNode> Children { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , GraphNode > HasChildren Indicates whether this Graph Node has Children Nodes. Declaration public bool HasChildren { get; } Property Value Type Description System.Boolean Keyword Key associated with this GraphNode. Declaration public string Keyword { get; set; } Property Value Type Description System.String Response Gets the response associated with this GraphNode. Declaration public BotResponse Response { get; } Property Value Type Description BotResponse Methods Delete() Safely removes this Node from its Parent. Declaration public void Delete() Evaluate(ChatRequest, QueryTree, Wildcard) Evaluates the specified request and tries to find the best Response. Declaration public BotResponse Evaluate(ChatRequest request, QueryTree pathTree, Wildcard wildCard) Parameters Type Name Description ChatRequest request The ChatRequest. QueryTree pathTree The current path tree Wildcard wildCard The wild card. Returns Type Description BotResponse ToString() Returns a System.String that represents this GraphNode's Keyword Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.Graph.MatchState.html": {
    "href": "api/Syn.Bot.Siml.Graph.MatchState.html",
    "title": "Enum MatchState - Syn Developer Network",
    "keywords": "Enum MatchState Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public enum MatchState Fields Name Description Bot Concept None Previous UserInput"
  },
  "api/Syn.Bot.Siml.Graph.QueryTree.html": {
    "href": "api/Syn.Bot.Siml.Graph.QueryTree.html",
    "title": "Class QueryTree - Syn Developer Network",
    "keywords": "Class QueryTree Inheritance System.Object System.Collections.Generic.Queue < Token > Tree QueryTree Inherited Members Tree.State Tree.Token Tree.IsParsed Tree.Add(Token) Tree.AddRange(IEnumerable<Token>) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Clear() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Contains(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.CopyTo(Syn.Bot.Siml.Graph.Token[], System.Int32) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Dequeue() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Enqueue(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Peek() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.ToArray() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.TrimExcess() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Count System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.SyncRoot System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public sealed class QueryTree : Tree, IEnumerable<Token>, ICollection, IEnumerable Constructors QueryTree(BotUser) Declaration public QueryTree(BotUser mainUser) Parameters Type Name Description BotUser mainUser Properties AfterPattern Declaration public int AfterPattern { get; set; } Property Value Type Description System.Int32 AfterPrevious Declaration public int AfterPrevious { get; set; } Property Value Type Description System.Int32 ConceptMatchList Declaration public List<string> ConceptMatchList { get; } Property Value Type Description System.Collections.Generic.List < System.String > CurrentInputSentence Input Sentence based on Token List. Declaration public string CurrentInputSentence { get; } Property Value Type Description System.String InputMatchList Declaration public List<string> InputMatchList { get; } Property Value Type Description System.Collections.Generic.List < System.String > InputSentence Actual sentence that made up this Token Tree. This property's value is created by splitting sentences using the Splitter. Declaration public string InputSentence { get; set; } Property Value Type Description System.String OutputResponse Used to store Output Response. Declaration public BotResponse OutputResponse { get; set; } Property Value Type Description BotResponse Previous Declaration public string Previous { get; } Property Value Type Description System.String PreviousMatchList Declaration public List<string> PreviousMatchList { get; } Property Value Type Description System.Collections.Generic.List < System.String > SearchSequence Declaration public SearchSequence SearchSequence { get; set; } Property Value Type Description SearchSequence User Declaration public BotUser User { get; } Property Value Type Description BotUser Methods Regenerate(String) Declaration public QueryTree Regenerate(string sentence) Parameters Type Name Description System.String sentence Returns Type Description QueryTree RemoveLastToken() Removes the Last token from this QueryTree . Declaration public QueryTree RemoveLastToken() Returns Type Description QueryTree"
  },
  "api/Syn.Bot.Siml.Graph.ResponseTree.html": {
    "href": "api/Syn.Bot.Siml.Graph.ResponseTree.html",
    "title": "Class ResponseTree - Syn Developer Network",
    "keywords": "Class ResponseTree Inheritance System.Object System.Collections.Generic.List < Token > ResponseTree Inherited Members System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Add(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.AddRange(System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.BinarySearch(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.BinarySearch(Syn.Bot.Siml.Graph.Token, System.Collections.Generic.IComparer<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.BinarySearch(System.Int32, System.Int32, Syn.Bot.Siml.Graph.Token, System.Collections.Generic.IComparer<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Clear() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Contains(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.CopyTo(Syn.Bot.Siml.Graph.Token[]) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.CopyTo(Syn.Bot.Siml.Graph.Token[], System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.CopyTo(System.Int32, Syn.Bot.Siml.Graph.Token[], System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Exists(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Find(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindAll(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindIndex(System.Int32, System.Int32, System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindIndex(System.Int32, System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindIndex(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindLast(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindLastIndex(System.Int32, System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.FindLastIndex(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.IndexOf(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.IndexOf(Syn.Bot.Siml.Graph.Token, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.IndexOf(Syn.Bot.Siml.Graph.Token, System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Insert(System.Int32, Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.LastIndexOf(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.LastIndexOf(Syn.Bot.Siml.Graph.Token, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.LastIndexOf(Syn.Bot.Siml.Graph.Token, System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Remove(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.RemoveAll(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.RemoveAt(System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Reverse() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Sort() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Sort(System.Collections.Generic.IComparer<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Sort(System.Comparison<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.ToArray() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.TrimExcess() System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.TrueForAll(System.Predicate<Syn.Bot.Siml.Graph.Token>) System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Capacity System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Count System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.Item[System.Int32] System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.Generic.ICollection<Syn.Bot.Siml.Graph.Token>.IsReadOnly System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Syn.Bot.Siml.Graph.Token>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class ResponseTree : List<Token>, IList<Token>, ICollection<Token>, IReadOnlyList<Token>, IReadOnlyCollection<Token>, IEnumerable<Token>, IList, ICollection, IEnumerable Constructors ResponseTree() Declaration public ResponseTree() ResponseTree(IEnumerable<Token>) Declaration public ResponseTree(IEnumerable<Token> tokens) Parameters Type Name Description System.Collections.Generic.IEnumerable < Token > tokens Properties EventElement Declaration public XElement EventElement { get; set; } Property Value Type Description System.Xml.Linq.XElement IsParsed Declaration public bool IsParsed { get; } Property Value Type Description System.Boolean ModelResponse Declaration public BotResponse ModelResponse { get; set; } Property Value Type Description BotResponse PatternElement Declaration public XElement PatternElement { get; set; } Property Value Type Description System.Xml.Linq.XElement Token Declaration public Token Token { get; } Property Value Type Description Token Methods ContainsTokenOfType(TokenType) Declaration public bool ContainsTokenOfType(TokenType tokenType) Parameters Type Name Description TokenType tokenType Returns Type Description System.Boolean RemoveLastToken() Declaration public ResponseTree RemoveLastToken() Returns Type Description ResponseTree"
  },
  "api/Syn.Bot.Siml.Graph.SearchSequence.html": {
    "href": "api/Syn.Bot.Siml.Graph.SearchSequence.html",
    "title": "Class SearchSequence - Syn Developer Network",
    "keywords": "Class SearchSequence Inheritance System.Object SearchSequence Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class SearchSequence Properties EventSequence Declaration public List<string> EventSequence { get; } Property Value Type Description System.Collections.Generic.List < System.String > PatternSequence Declaration public List<string> PatternSequence { get; } Property Value Type Description System.Collections.Generic.List < System.String > PreviousSequence Declaration public List<string> PreviousSequence { get; } Property Value Type Description System.Collections.Generic.List < System.String > SearchList Declaration public List<string> SearchList { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods Add(String) Declaration public void Add(string keyword) Parameters Type Name Description System.String keyword Generate() Declaration public void Generate()"
  },
  "api/Syn.Bot.Oscova.ContextParameter.html": {
    "href": "api/Syn.Bot.Oscova.ContextParameter.html",
    "title": "Class ContextParameter - Syn Developer Network",
    "keywords": "Class ContextParameter Represents a ContextItem parameter. Inheritance System.Object ContextParameter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class ContextParameter Properties Name Gets the parameter name. Declaration public string Name { get; } Property Value Type Description System.String The name. Value Gets the parameter value. Declaration public string Value { get; } Property Value Type Description System.String The value."
  },
  "api/Syn.Bot.Oscova.Delegates.EntityExtractor.html": {
    "href": "api/Syn.Bot.Oscova.Delegates.EntityExtractor.html",
    "title": "Delegate EntityExtractor - Syn Developer Network",
    "keywords": "Delegate EntityExtractor A custom method that evaluates the Request and returns extracted entities. Namespace :Syn.Bot.Oscova.Delegates Assembly :Syn.Bot.dll Syntax public delegate EntityCollection EntityExtractor(Request request); Parameters Type Name Description Request request The request. Returns Type Description EntityCollection"
  },
  "api/Syn.Bot.Oscova.Entities.UnitWeightNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitWeightNameEntity.html",
    "title": "Class UnitWeightNameEntity - Syn Developer Network",
    "keywords": "Class UnitWeightNameEntity Inheritance System.Object UnitEntity UnitWeightNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitWeightNameEntity : UnitEntity, IEntity Constructors UnitWeightNameEntity(String, String) Declaration public UnitWeightNameEntity(string value, string resolution) Parameters Type Name Description System.String value System.String resolution Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UrlEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UrlEntity.html",
    "title": "Class UrlEntity - Syn Developer Network",
    "keywords": "Class UrlEntity Inheritance System.Object Entity UrlEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UrlEntity : Entity, IEntity Constructors UrlEntity(String) Declaration public UrlEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Events.TrainingFinishedEventArgs.html": {
    "href": "api/Syn.Bot.Oscova.Events.TrainingFinishedEventArgs.html",
    "title": "Class TrainingFinishedEventArgs - Syn Developer Network",
    "keywords": "Class TrainingFinishedEventArgs Inheritance System.Object System.EventArgs TrainingFinishedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Events Assembly :Syn.Bot.dll Syntax public class TrainingFinishedEventArgs : EventArgs Properties TrainedModel Gets the trained model document. Declaration public XDocument TrainedModel { get; } Property Value Type Description System.Xml.Linq.XDocument The trained model."
  },
  "api/Syn.Bot.Oscova.Events.html": {
    "href": "api/Syn.Bot.Oscova.Events.html",
    "title": "Namespace Syn.Bot.Oscova.Events - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Events Classes CompositeEntityCreatedEventArgs EntityCreatedEventArgs InvokingIntentEventArgs ResponseReceivedEventArgs TrainingFinishedEventArgs"
  },
  "api/Syn.Bot.Oscova.FileFormat.html": {
    "href": "api/Syn.Bot.Oscova.FileFormat.html",
    "title": "Enum FileFormat - Syn Developer Network",
    "keywords": "Enum FileFormat Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public enum FileFormat Fields Name Description Binary Text"
  },
  "api/Syn.Bot.Oscova.FilterItem.html": {
    "href": "api/Syn.Bot.Oscova.FilterItem.html",
    "title": "Class FilterItem - Syn Developer Network",
    "keywords": "Class FilterItem Inheritance System.Object FilterItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class FilterItem Properties Input Declaration public string Input { get; set; } Property Value Type Description System.String Output Declaration public string Output { get; set; } Property Value Type Description System.String Type Declaration public FilterType Type { get; set; } Property Value Type Description FilterType"
  },
  "api/Syn.Bot.Oscova.Interfaces.IDetokenizer.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IDetokenizer.html",
    "title": "Interface IDetokenizer - Syn Developer Network",
    "keywords": "Interface IDetokenizer Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IDetokenizer Methods Detokenize(IEnumerable<String>) Declaration string Detokenize(IEnumerable<string> words) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > words Returns Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Interfaces.IEntity.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IEntity.html",
    "title": "Interface IEntity - Syn Developer Network",
    "keywords": "Interface IEntity Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IEntity Properties Index Declaration int Index { get; } Property Value Type Description System.Int32 Type Declaration string Type { get; set; } Property Value Type Description System.String Value Declaration string Value { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Interfaces.IStringEntity.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IStringEntity.html",
    "title": "Interface IStringEntity - Syn Developer Network",
    "keywords": "Interface IStringEntity Inherited Members IEntity.Type IEntity.Index Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IStringEntity : IEntity Properties Value Declaration string Value { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Interfaces.ITokenizer.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.ITokenizer.html",
    "title": "Interface ITokenizer - Syn Developer Network",
    "keywords": "Interface ITokenizer Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface ITokenizer Methods Tokenize(String) Declaration List<string> Tokenize(string text) Parameters Type Name Description System.String text Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/Syn.Bot.Oscova.Interfaces.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.html",
    "title": "Namespace Syn.Bot.Oscova.Interfaces - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Interfaces Interfaces IBakableRecognizer ICompositeEntity IDetokenizer IEntity IEntityRecognizer Interface for Oscova Entity Recognizers. ILexicalDatabase INumberUnitEntity IStemmer IStringEntity ITokenizer"
  },
  "api/Syn.Bot.Oscova.Internal.ResolutionItem.html": {
    "href": "api/Syn.Bot.Oscova.Internal.ResolutionItem.html",
    "title": "Class ResolutionItem - Syn Developer Network",
    "keywords": "Class ResolutionItem Inheritance System.Object ResolutionItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Internal Assembly :Syn.Bot.dll Syntax public class ResolutionItem Constructors ResolutionItem(String, Object) Declaration public ResolutionItem(string name, object value) Parameters Type Name Description System.String name System.Object value Properties Name Declaration public string Name { get; } Property Value Type Description System.String Value Declaration public object Value { get; } Property Value Type Description System.Object"
  },
  "api/Syn.Bot.Oscova.Languages.English.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.html",
    "title": "Namespace Syn.Bot.Oscova.Languages.English - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Languages.English Classes EnglishDetokenizer EnglishLanguage EnglishTokenizer Represents default English Tokenizer."
  },
  "api/Syn.Bot.Oscova.MatchItem.html": {
    "href": "api/Syn.Bot.Oscova.MatchItem.html",
    "title": "Class MatchItem - Syn Developer Network",
    "keywords": "Class MatchItem Inheritance System.Object MatchItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class MatchItem Constructors MatchItem(String, Int32) Declaration public MatchItem(string value, int index) Parameters Type Name Description System.String value System.Int32 index MatchItem(Capture) Declaration public MatchItem(Capture match) Parameters Type Name Description System.Text.RegularExpressions.Capture match Properties Index Declaration public int Index { get; } Property Value Type Description System.Int32 Length Declaration public int Length { get; } Property Value Type Description System.Int32 Reference Declaration public string Reference { get; set; } Property Value Type Description System.String Value Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.OscovaBot.html": {
    "href": "api/Syn.Bot.Oscova.OscovaBot.html",
    "title": "Class OscovaBot - Syn Developer Network",
    "keywords": "Class OscovaBot Represents the Oscova Bot system. Inheritance System.Object OscovaBot Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class OscovaBot Constructors OscovaBot() Initializes a new instance of the OscovaBot class. Declaration public OscovaBot() Remarks Uses default Bot configuration. OscovaBot(BotConfiguration) Initializes a new instance of the OscovaBot class. Declaration public OscovaBot(BotConfiguration configuration) Parameters Type Name Description BotConfiguration configuration The configuration. Properties Configuration Gets the bot configuration. Declaration public BotConfiguration Configuration { get; } Property Value Type Description BotConfiguration The bot configuration. Dialogs Gets the dialogs. Declaration public DialogCollection Dialogs { get; } Property Value Type Description DialogCollection The dialogs. Instance Gets the shared main OscovaBot instance. A new OscovaBot object is initialized on 'Get' call. Declaration public static OscovaBot Instance { get; } Property Value Type Description OscovaBot The main bot. Language Gets or sets the language model Declaration public Language Language { get; set; } Property Value Type Description Language The Language model. Logger Gets the global bot logger. Declaration public static SynLogger Logger { get; } Property Value Type Description SynLogger The logger. MainUser Gets the main bot user. Declaration public BotUser MainUser { get; } Property Value Type Description BotUser The main user. Remarks When no user detail is provided. A Request is processed under this user's context. Recognizers Gets the recognizers. Declaration public RecognizerCollection Recognizers { get; } Property Value Type Description RecognizerCollection The recognizers. Trainer Gets the bot trainer. Declaration public Trainer Trainer { get; } Property Value Type Description Trainer The trainer. Users Gets the users collection. Declaration public BotUserCollection Users { get; } Property Value Type Description BotUserCollection The users collection. Version Gets the version of the Bot Library. Declaration public static string Version { get; } Property Value Type Description System.String The Bot Library version. Methods Activate(String, String, String) Activates the specified license type. Declaration public static void Activate(string licenseType, string licensee, string licenseKey) Parameters Type Name Description System.String licenseType Type of the license. System.String licensee The licensee. System.String licenseKey The license key. CreateCompositeType(String, String[]) Creates a composite entity type. Declaration public void CreateCompositeType(string compositeTypeName, string[] childrenTypes) Parameters Type Name Description System.String compositeTypeName Name of the type. System.String [] childrenTypes The children entity types. CreateRecognizer(String) Creates a basic entry based EntityRecognizer . Declaration public EntityRecognizer CreateRecognizer(string entityType) Parameters Type Name Description System.String entityType Type of the entity. Returns Type Description EntityRecognizer Remarks Developer must fill in the Entries values manually. CreateRecognizer(String, EntityExtractor) Creates a FunctionalRecognizer . Declaration public FunctionalRecognizer CreateRecognizer(string entityType, EntityExtractor extractor) Parameters Type Name Description System.String entityType Type of the entity. EntityExtractor extractor The extractor method. Returns Type Description FunctionalRecognizer FunctionalRecognizer CreateRecognizer(String, IEnumerable<String>) Creates an EntityRecognizer for list of terms. Declaration public EntityRecognizer CreateRecognizer(string entityType, IEnumerable<string> valueList) Parameters Type Name Description System.String entityType Type of the entity. System.Collections.Generic.IEnumerable < System.String > valueList The term list. Returns Type Description EntityRecognizer CreateRecognizer(String, Regex) Creates a RegexRecognizer recognizer. Declaration public RegexRecognizer CreateRecognizer(string entityType, Regex regex) Parameters Type Name Description System.String entityType Type of the entity. System.Text.RegularExpressions.Regex regex The regex. Returns Type Description RegexRecognizer CreateRecognizer<T>(String) Creates an EntityRecognizer for enum values. Declaration public EntityRecognizer CreateRecognizer<T>(string entityType)where T : struct Parameters Type Name Description System.String entityType Type of the entity. Returns Type Description EntityRecognizer Type Parameters Name Description T Enum Type. Exceptions Type Condition System.InvalidCastException Raised if given type is not enum. CreateUser() Creates a new BotUser with a unique id. Declaration public BotUser CreateUser() Returns Type Description BotUser CreateUser(String) Creates a new BotUser with the specified id. Declaration public BotUser CreateUser(string userId) Parameters Type Name Description System.String userId The user identifier. Returns Type Description BotUser Remarks If a user with the specified ID already exists then returns the existing user. Evaluate(Request) Evaluates the specified request. Declaration public EvaluationResult Evaluate(Request request) Parameters Type Name Description Request request The request. Returns Type Description EvaluationResult Exceptions Type Condition System.InvalidOperationException Raised if this method is called before the bot is trained. Evaluate(String) Evaluates the specified message as a MainUser request. Declaration public EvaluationResult Evaluate(string message) Parameters Type Name Description System.String message The message. Returns Type Description EvaluationResult Exceptions Type Condition System.InvalidOperationException Raised if this method is called before the bot is trained. Events InvokingIntent Occurs when an IntentResult is invoked. Declaration public event EventHandler<InvokingIntentEventArgs> InvokingIntent Event Type Type Description System.EventHandler < InvokingIntentEventArgs > TrainingFinished Occurs when bot training has completed. Declaration public event EventHandler<TrainingFinishedEventArgs> TrainingFinished Event Type Type Description System.EventHandler < TrainingFinishedEventArgs > TrainingStarted Occurs when bot training is started. Declaration public event EventHandler TrainingStarted Event Type Type Description System.EventHandler"
  },
  "api/Syn.Bot.Oscova.ProcessingMode.html": {
    "href": "api/Syn.Bot.Oscova.ProcessingMode.html",
    "title": "Enum ProcessingMode - Syn Developer Network",
    "keywords": "Enum ProcessingMode Expression processing modes. Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public enum ProcessingMode Fields Name Description Rule (Default) Use in-built NLP engine. RuleAndML Use in-built NLP engine and Machine Learning algorithm."
  },
  "api/Syn.Bot.Oscova.Recognizers.EntityRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.EntityRecognizer.html",
    "title": "Class EntityRecognizer - Syn Developer Network",
    "keywords": "Class EntityRecognizer Inheritance System.Object EntryRecognizer EntityRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class EntityRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors EntityRecognizer(String) Declaration public EntityRecognizer(string type) Parameters Type Name Description System.String type Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.EntryRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.EntryRecognizer.html",
    "title": "Class EntryRecognizer - Syn Developer Network",
    "keywords": "Class EntryRecognizer Abstract Entries Recognizer. Inheritance System.Object EntryRecognizer CountryRecognizer CurrencyNameRecognizer DayRecognizer EntityRecognizer IndianStateRecognizer MonthRecognizer TemperatureNameRecognizer UnitAreaNameRecognizer UnitLengthNameRecognizer UnitSpeedNameRecognizer UnitVolumeNameRecognizer UnitWeightNameRecognizer UsStateRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public abstract class EntryRecognizer : IBakableRecognizer, IEntityRecognizer Constructors EntryRecognizer(String) Initializes a new instance of the EntryRecognizer class. Declaration protected EntryRecognizer(string type) Parameters Type Name Description System.String type The entity type parsed by the recognizer. Properties Entries Gets or sets the entries. Declaration public EntryCollection Entries { get; set; } Property Value Type Description EntryCollection The entries. EntriesRegex Gets or sets the entries regex. Declaration public Regex EntriesRegex { get; set; } Property Value Type Description System.Text.RegularExpressions.Regex The entries regex. Implements IBakableRecognizer.EntriesRegex IsBaked Gets or sets a value indicating whether the entries are baked. Declaration public bool IsBaked { get; set; } Property Value Type Description System.Boolean true if entries are baked; otherwise, false . Implements IBakableRecognizer.IsBaked Type Gets the Type parsed by this parser. Declaration public string Type { get; } Property Value Type Description System.String The Type . Implements IEntityRecognizer.Type Methods Bake() Bakes Entries and creates required regular expression. Declaration public void Bake() Implements IBakableRecognizer.Bake() CreateEntity(MatchItem) Creates the entity. Declaration protected abstract IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match The match. Returns Type Description IEntity Remarks This method is called after every successful match. May also return null to avoid adding to returned EntityCollection . Parse(Request) Parses the specified request and returns a collection of recognized entities. Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request The request. Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer) See Also IBakableRecognizer"
  },
  "api/Syn.Bot.Oscova.Recognizers.FunctionalRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.FunctionalRecognizer.html",
    "title": "Class FunctionalRecognizer - Syn Developer Network",
    "keywords": "Class FunctionalRecognizer Inheritance System.Object FunctionalRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class FunctionalRecognizer : IEntityRecognizer Constructors FunctionalRecognizer(String, EntityExtractor) Declaration public FunctionalRecognizer(string type, EntityExtractor extractor) Parameters Type Name Description System.String type EntityExtractor extractor Properties Extractor Declaration public EntityExtractor Extractor { get; } Property Value Type Description EntityExtractor Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.IndianPhoneNumberRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.IndianPhoneNumberRecognizer.html",
    "title": "Class IndianPhoneNumberRecognizer - Syn Developer Network",
    "keywords": "Class IndianPhoneNumberRecognizer Inheritance System.Object BaseRegexRecognizer IndianPhoneNumberRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class IndianPhoneNumberRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors IndianPhoneNumberRecognizer() Declaration public IndianPhoneNumberRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.PercentageRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.PercentageRecognizer.html",
    "title": "Class PercentageRecognizer - Syn Developer Network",
    "keywords": "Class PercentageRecognizer Inheritance System.Object BaseRegexRecognizer PercentageRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class PercentageRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors PercentageRecognizer() Declaration public PercentageRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.RegexRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.RegexRecognizer.html",
    "title": "Class RegexRecognizer - Syn Developer Network",
    "keywords": "Class RegexRecognizer Inheritance System.Object BaseRegexRecognizer RegexRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class RegexRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors RegexRecognizer(String, Regex) Declaration public RegexRecognizer(string type, Regex regex) Parameters Type Name Description System.String type System.Text.RegularExpressions.Regex regex Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.TemperatureNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.TemperatureNameRecognizer.html",
    "title": "Class TemperatureNameRecognizer - Syn Developer Network",
    "keywords": "Class TemperatureNameRecognizer Inheritance System.Object EntryRecognizer TemperatureNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class TemperatureNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors TemperatureNameRecognizer() Declaration public TemperatureNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.TemperatureRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.TemperatureRecognizer.html",
    "title": "Class TemperatureRecognizer - Syn Developer Network",
    "keywords": "Class TemperatureRecognizer Inheritance System.Object BaseRegexRecognizer TemperatureRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class TemperatureRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors TemperatureRecognizer(OscovaBot) Declaration public TemperatureRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitLengthNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitLengthNameRecognizer.html",
    "title": "Class UnitLengthNameRecognizer - Syn Developer Network",
    "keywords": "Class UnitLengthNameRecognizer Inheritance System.Object EntryRecognizer UnitLengthNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitLengthNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UnitLengthNameRecognizer() Declaration public UnitLengthNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitLengthRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitLengthRecognizer.html",
    "title": "Class UnitLengthRecognizer - Syn Developer Network",
    "keywords": "Class UnitLengthRecognizer Inheritance System.Object BaseRegexRecognizer UnitLengthRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class UnitLengthRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UnitLengthRecognizer(OscovaBot) Declaration public UnitLengthRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitSpeedNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitSpeedNameRecognizer.html",
    "title": "Class UnitSpeedNameRecognizer - Syn Developer Network",
    "keywords": "Class UnitSpeedNameRecognizer Inheritance System.Object EntryRecognizer UnitSpeedNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitSpeedNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UnitSpeedNameRecognizer() Declaration public UnitSpeedNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitSpeedRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitSpeedRecognizer.html",
    "title": "Class UnitSpeedRecognizer - Syn Developer Network",
    "keywords": "Class UnitSpeedRecognizer Inheritance System.Object BaseRegexRecognizer UnitSpeedRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class UnitSpeedRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UnitSpeedRecognizer(OscovaBot) Declaration public UnitSpeedRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UrlRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UrlRecognizer.html",
    "title": "Class UrlRecognizer - Syn Developer Network",
    "keywords": "Class UrlRecognizer Inheritance System.Object UrlRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UrlRecognizer : IEntityRecognizer Constructors UrlRecognizer() Declaration public UrlRecognizer() Properties Regex Declaration public Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UsPhoneNumberRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UsPhoneNumberRecognizer.html",
    "title": "Class UsPhoneNumberRecognizer - Syn Developer Network",
    "keywords": "Class UsPhoneNumberRecognizer Inheritance System.Object BaseRegexRecognizer UsPhoneNumberRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UsPhoneNumberRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UsPhoneNumberRecognizer() Declaration public UsPhoneNumberRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UsPostalCodeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UsPostalCodeRecognizer.html",
    "title": "Class UsPostalCodeRecognizer - Syn Developer Network",
    "keywords": "Class UsPostalCodeRecognizer Inheritance System.Object BaseRegexRecognizer UsPostalCodeRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UsPostalCodeRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UsPostalCodeRecognizer() Declaration public UsPostalCodeRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UsStateRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UsStateRecognizer.html",
    "title": "Class UsStateRecognizer - Syn Developer Network",
    "keywords": "Class UsStateRecognizer Inheritance System.Object EntryRecognizer UsStateRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class UsStateRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UsStateRecognizer() Declaration public UsStateRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.ResponseType.html": {
    "href": "api/Syn.Bot.Oscova.ResponseType.html",
    "title": "Class ResponseType - Syn Developer Network",
    "keywords": "Class ResponseType Inheritance System.Object ResponseType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class ResponseType Fields Message Declaration public const string Message = \"message\" Field Value Type Description System.String Other Declaration public const string Other = \"other\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Result.html": {
    "href": "api/Syn.Bot.Oscova.Result.html",
    "title": "Class Result - Syn Developer Network",
    "keywords": "Class Result Represents a result generated by OscovaBot after evaluation of a Syn.Bot.Oscova.Result.Request . Inheritance System.Object Result Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class Result Properties CurrentIntent Gets the current intent which has been invoked. Declaration public IntentResult CurrentIntent { get; } Property Value Type Description IntentResult The currently invoked intent. Entities Gets the entities. Declaration public EntityCollection Entities { get; } Property Value Type Description EntityCollection The entities. Remarks Entities are ordered based on Index . Intents Gets the intents. Declaration public IntentCollection Intents { get; } Property Value Type Description IntentCollection The intents. Remarks Intents are ordered based on Score . SessionId Gets the current user session identifier. Declaration public string SessionId { get; } Property Value Type Description System.String The user session identifier. Methods SendResponse(Response) Sends the specified response to the user. Declaration public void SendResponse(Response response) Parameters Type Name Description Response response The bot response. SendResponse(String) Sends the specified message to the user. Declaration public void SendResponse(string message) Parameters Type Name Description System.String message The bot message."
  },
  "api/Syn.Bot.Oscova.ScoreConfiguration.html": {
    "href": "api/Syn.Bot.Oscova.ScoreConfiguration.html",
    "title": "Class ScoreConfiguration - Syn Developer Network",
    "keywords": "Class ScoreConfiguration Holds scoring values. Inheritance System.Object ScoreConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class ScoreConfiguration Properties MaxIntentScore Gets or sets the maximum intent score when classifier is over confident. Declaration public double MaxIntentScore { get; set; } Property Value Type Description System.Double Remarks Default is 0.99 MinimumScore Gets or sets the absolute minimum intent score. Declaration public double MinimumScore { get; set; } Property Value Type Description System.Double The minimum intent score. Remarks Default is 0.05 MinWordVectorSimilarty Gets or sets the minimum word vector similarty. Declaration public double MinWordVectorSimilarty { get; set; } Property Value Type Description System.Double The minimum word vector similarty. Remarks Default is 0.9 PromptMissingEntityScore Gets or sets the score of an entity that is missing but has prompt. Declaration public double PromptMissingEntityScore { get; set; } Property Value Type Description System.Double The prompt missing entity score. Remarks Default is 0.5 PromptModeMissingWord Gets or sets Score of a missing word in expression when classifier is in Prompt mode. Declaration public double PromptModeMissingWord { get; set; } Property Value Type Description System.Double The missing expression word score. Remarks Default is 0.5 RuleScoreDependency Gets or sets the rule score dependency percentage. Declaration public double RuleScoreDependency { get; set; } Property Value Type Description System.Double The rule score dependency percentage. Remarks Default is 0.6 StemmedWordScore Gets or sets the score of a stemmed word that was found instead of full word. Declaration public double StemmedWordScore { get; set; } Property Value Type Description System.Double The stemmed word score. Remarks Default is 0.85"
  },
  "api/Syn.Bot.Oscova.Statistic.html": {
    "href": "api/Syn.Bot.Oscova.Statistic.html",
    "title": "Class Statistic - Syn Developer Network",
    "keywords": "Class Statistic Inheritance System.Object Statistic Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class Statistic"
  },
  "api/Syn.Bot.Siml.Analysis.AnalysisMode.html": {
    "href": "api/Syn.Bot.Siml.Analysis.AnalysisMode.html",
    "title": "Enum AnalysisMode - Syn Developer Network",
    "keywords": "Enum AnalysisMode Namespace :Syn.Bot.Siml.Analysis Assembly :Syn.Bot.dll Syntax public enum AnalysisMode Fields Name Description File Project"
  },
  "api/Syn.Bot.Siml.Analysis.Severity.html": {
    "href": "api/Syn.Bot.Siml.Analysis.Severity.html",
    "title": "Enum Severity - Syn Developer Network",
    "keywords": "Enum Severity Namespace :Syn.Bot.Siml.Analysis Assembly :Syn.Bot.dll Syntax public enum Severity Fields Name Description High Low Medium None"
  },
  "api/Syn.Bot.Siml.Analysis.SimlAnalyzer.html": {
    "href": "api/Syn.Bot.Siml.Analysis.SimlAnalyzer.html",
    "title": "Class SimlAnalyzer - Syn Developer Network",
    "keywords": "Class SimlAnalyzer An SIML code analyzer. Inheritance System.Object SimlAnalyzer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Analysis Assembly :Syn.Bot.dll Syntax public class SimlAnalyzer : INotifyPropertyChanged Constructors SimlAnalyzer(AnalysisMode) Initializes a new instance of the SimlAnalyzer class. Declaration public SimlAnalyzer(AnalysisMode mode = AnalysisMode.Project) Parameters Type Name Description AnalysisMode mode Properties AnalysisBot Gets the temporary analysis bot. Declaration public SimlBot AnalysisBot { get; } Property Value Type Description SimlBot The analysis bot. CurrentFileName Gets or sets the name of the current file being analyzed. Declaration public string CurrentFileName { get; set; } Property Value Type Description System.String The name of the current file. Frames Gets the analysis frames. Declaration public List<AnalysisFrame> Frames { get; } Property Value Type Description System.Collections.Generic.List < AnalysisFrame > The analysis frames. Mode Gets the mode of analysis. Declaration public AnalysisMode Mode { get; } Property Value Type Description AnalysisMode The analysis mode. Status Gets or sets the status of the Analyzer. Declaration public string Status { get; set; } Property Value Type Description System.String The status. Methods AddFile(String, String) Adds an SIML code along with its file name. Declaration public void AddFile(string fileName, string simlString) Parameters Type Name Description System.String fileName Name of the file. System.String simlString The SIML code string. OnPropertyChanged(String) Declaration protected virtual void OnPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName StartAnalysis() Starts the analysis. Declaration public void StartAnalysis() StopAnalysis() Stops the analysis and clears the cache. Declaration public void StopAnalysis() Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged"
  },
  "api/Syn.Bot.Siml.Analysis.html": {
    "href": "api/Syn.Bot.Siml.Analysis.html",
    "title": "Namespace Syn.Bot.Siml.Analysis - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Analysis Classes AnalysisFrame SimlAnalyzer An SIML code analyzer. Enums AnalysisMode Severity"
  },
  "api/Syn.Bot.Siml.Classes.Typo.html": {
    "href": "api/Syn.Bot.Siml.Classes.Typo.html",
    "title": "Class Typo - Syn Developer Network",
    "keywords": "Class Typo Inheritance System.Object System.Collections.Generic.HashSet < System.String > Typo Inherited Members System.Collections.Generic.HashSet<System.String>.Add(System.String) System.Collections.Generic.HashSet<System.String>.Clear() System.Collections.Generic.HashSet<System.String>.Contains(System.String) System.Collections.Generic.HashSet<System.String>.CopyTo(System.String[]) System.Collections.Generic.HashSet<System.String>.CopyTo(System.String[], System.Int32) System.Collections.Generic.HashSet<System.String>.CopyTo(System.String[], System.Int32, System.Int32) System.Collections.Generic.HashSet<System.String>.ExceptWith(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.GetEnumerator() System.Collections.Generic.HashSet<System.String>.IntersectWith(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.IsSubsetOf(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.IsSupersetOf(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.Overlaps(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.Remove(System.String) System.Collections.Generic.HashSet<System.String>.RemoveWhere(System.Predicate<System.String>) System.Collections.Generic.HashSet<System.String>.SetEquals(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.System.Collections.Generic.ICollection<System.String>.Add(System.String) System.Collections.Generic.HashSet<System.String>.System.Collections.Generic.IEnumerable<System.String>.GetEnumerator() System.Collections.Generic.HashSet<System.String>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.HashSet<System.String>.TrimExcess() System.Collections.Generic.HashSet<System.String>.UnionWith(System.Collections.Generic.IEnumerable<System.String>) System.Collections.Generic.HashSet<System.String>.Comparer System.Collections.Generic.HashSet<System.String>.Count System.Collections.Generic.HashSet<System.String>.System.Collections.Generic.ICollection<System.String>.IsReadOnly System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Classes Assembly :Syn.Bot.dll Syntax public class Typo : HashSet<string>, ISet<string>, ICollection<string>, IEnumerable<string>, IEnumerable Constructors Typo(String) Declaration public Typo(string keyword) Parameters Type Name Description System.String keyword Properties Keyword Declaration public string Keyword { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Classes.TypoGenerator.html": {
    "href": "api/Syn.Bot.Siml.Classes.TypoGenerator.html",
    "title": "Class TypoGenerator - Syn Developer Network",
    "keywords": "Class TypoGenerator Inheritance System.Object TypoGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Classes Assembly :Syn.Bot.dll Syntax public class TypoGenerator Methods Generate(String) Declaration public static Typo Generate(string value) Parameters Type Name Description System.String value Returns Type Description Typo"
  },
  "api/Syn.Bot.Siml.Classes.html": {
    "href": "api/Syn.Bot.Siml.Classes.html",
    "title": "Namespace Syn.Bot.Siml.Classes - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Classes Classes RegexNormalized ShuffleBag<T> Typo TypoGenerator"
  },
  "api/Syn.Bot.Siml.Collections.AdapterCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.AdapterCollection.html",
    "title": "Class AdapterCollection - Syn Developer Network",
    "keywords": "Class AdapterCollection Represents a collection of IAdapter . Inheritance System.Object AdapterCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class AdapterCollection : ICollection<IAdapter>, IEnumerable<IAdapter>, IEnumerable Constructors AdapterCollection() Initializes a new instance of the AdapterCollection class. Declaration public AdapterCollection() Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[XName] Gets the IAdapter with the specified name. Declaration public IAdapter this[XName name] { get; } Parameters Type Name Description System.Xml.Linq.XName name The name. Property Value Type Description IAdapter The IAdapter . Methods Add(IAdapter) Adds the specified handler. Declaration public void Add(IAdapter handler) Parameters Type Name Description IAdapter handler The handler. Implements System.Collections.Generic.ICollection<T>.Add(T) AddRange(IAdapter[]) Adds all the specified IAdapter s Declaration public void AddRange(params IAdapter[] handlers) Parameters Type Name Description IAdapter [] handlers Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IAdapter) Determines whether this collection contains the specified IAdapter . Declaration public bool Contains(IAdapter tagAdapter) Parameters Type Name Description IAdapter tagAdapter The tag adapter. Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Determines whether this collection contains an IAdapter with the specified name. Declaration public bool Contains(string name) Parameters Type Name Description System.String name The name. Returns Type Description System.Boolean CopyTo(IAdapter[], Int32) Copies to. Declaration public void CopyTo(IAdapter[] array, int arrayIndex) Parameters Type Name Description IAdapter [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IAdapter> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IAdapter > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IAdapter) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(IAdapter item) Parameters Type Name Description IAdapter item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.DataCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.DataCollection.html",
    "title": "Class DataCollection - Syn Developer Network",
    "keywords": "Class DataCollection Inheritance System.Object DataCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class DataCollection Properties Current Declaration public object Current { get; } Property Value Type Description System.Object Methods Add(Object) Declaration public void Add(object data) Parameters Type Name Description System.Object data Get<T>() Declaration public T Get<T>() Returns Type Description T Type Parameters Name Description T"
  },
  "api/Syn.Bot.Siml.Collections.ExampleCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.ExampleCollection.html",
    "title": "Class ExampleCollection - Syn Developer Network",
    "keywords": "Class ExampleCollection Inheritance System.Object ExampleCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class ExampleCollection : ICollection<ExampleItem>, IEnumerable<ExampleItem>, IEnumerable Constructors ExampleCollection(SimlBot) Initializes a new instance of the ExampleCollection class. Declaration public ExampleCollection(SimlBot bot) Parameters Type Name Description SimlBot bot The bot. Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly SuggestionFormatter Gets or set the ISuggestionFormatter for the Syn.Bot.Siml.Adapters.SuggestionAdapter . Declaration public ISuggestionFormatter SuggestionFormatter { get; set; } Property Value Type Description ISuggestionFormatter Methods Add(ExampleItem) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(ExampleItem item) Parameters Type Name Description ExampleItem item The object to add to the System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Add(T) Add(ExampleItem, Boolean) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(ExampleItem item, bool addVocabulary) Parameters Type Name Description ExampleItem item The object to add to the System.Collections.Generic.ICollection<T> . System.Boolean addVocabulary Add vocabulary. Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ExampleItem) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(ExampleItem item) Parameters Type Name Description ExampleItem item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Determines whether this ExampleCollection contains the specified example value. Declaration public bool Contains(string examplePattern) Parameters Type Name Description System.String examplePattern The example value. Returns Type Description System.Boolean true if this ExampleCollection contains the specified example value; otherwise, false . CopyTo(ExampleItem[], Int32) Copies the elements of the System.Collections.Generic.ICollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(ExampleItem[] array, int arrayIndex) Parameters Type Name Description ExampleItem [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<ExampleItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ExampleItem > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetSuggestion(ChatRequest) Declaration public Suggestion GetSuggestion(ChatRequest request) Parameters Type Name Description ChatRequest request Returns Type Description Suggestion GetSuggestion(SearchQuery) Declaration public Suggestion GetSuggestion(SearchQuery searchQuery) Parameters Type Name Description SearchQuery searchQuery Returns Type Description Suggestion Remove(ExampleItem) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(ExampleItem item) Parameters Type Name Description ExampleItem item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Classes.ShuffleBag-1.html": {
    "href": "api/Syn.Bot.Siml.Classes.ShuffleBag-1.html",
    "title": "Class ShuffleBag<T> - Syn Developer Network",
    "keywords": "Class ShuffleBag<T> Inheritance System.Object ShuffleBag<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Classes Assembly :Syn.Bot.dll Syntax public class ShuffleBag<T> Type Parameters Name Description T Constructors ShuffleBag(Int32) Declaration public ShuffleBag(int initCapacity) Parameters Type Name Description System.Int32 initCapacity Properties Size Declaration public int Size { get; } Property Value Type Description System.Int32 Methods Add(WeightedItem<T>) Declaration public void Add(WeightedItem<T> item) Parameters Type Name Description WeightedItem <T> item AddRange(IEnumerable<WeightedItem<T>>) Declaration public void AddRange(IEnumerable<WeightedItem<T>> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < WeightedItem <T>> source Next() Declaration public T Next() Returns Type Description T"
  },
  "api/Syn.Bot.Siml.Collections.InteractionCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.InteractionCollection.html",
    "title": "Class InteractionCollection - Syn Developer Network",
    "keywords": "Class InteractionCollection Inheritance System.Object InteractionCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class InteractionCollection : ICollection<InteractionItem>, IEnumerable<InteractionItem>, IEnumerable Constructors InteractionCollection(SimlBot) Declaration public InteractionCollection(SimlBot bot) Parameters Type Name Description SimlBot bot Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly LowPrecicion Declaration public List<InteractionItem> LowPrecicion { get; } Property Value Type Description System.Collections.Generic.List < InteractionItem > Recent Declaration public List<InteractionItem> Recent { get; } Property Value Type Description System.Collections.Generic.List < InteractionItem > Methods Add(InteractionItem) Declaration public void Add(InteractionItem interaction) Parameters Type Name Description InteractionItem interaction Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(InteractionItem) Declaration public bool Contains(InteractionItem item) Parameters Type Name Description InteractionItem item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(InteractionItem[], Int32) Declaration public void CopyTo(InteractionItem[] array, int arrayIndex) Parameters Type Name Description InteractionItem [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<InteractionItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < InteractionItem > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(InteractionItem) Declaration public bool Remove(InteractionItem item) Parameters Type Name Description InteractionItem item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.InteractionItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.InteractionItem.html",
    "title": "Class InteractionItem - Syn Developer Network",
    "keywords": "Class InteractionItem Inheritance System.Object InteractionItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax [DataContract] public class InteractionItem Properties BotMessage Declaration [DataMember] public string BotMessage { get; set; } Property Value Type Description System.String Precision Declaration [DataMember] public double Precision { get; set; } Property Value Type Description System.Double UserMessage Declaration [DataMember] public string UserMessage { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Collections.Map.html": {
    "href": "api/Syn.Bot.Siml.Collections.Map.html",
    "title": "Class Map - Syn Developer Network",
    "keywords": "Class Map Default implementation of IMap interface. Inheritance System.Object Map Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class Map : IMap, ICollection<IMapItem>, IEnumerable<IMapItem>, IEnumerable Constructors Map(String) Initializes a new instance of the Map class. Declaration public Map(string mapName) Parameters Type Name Description System.String mapName Name of the map. Properties Contents Declaration public IEnumerable<string> Contents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Implements IMap.Contents Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public IMapItem this[string content] { get; set; } Parameters Type Name Description System.String content Property Value Type Description IMapItem Implements IMap.Item[String] Name Gets the name of the Map Declaration public string Name { get; } Property Value Type Description System.String The unique name of the Map. Implements IMap.Name Methods Add(IMapItem) Adds the specified map item. Declaration public void Add(IMapItem mapItem) Parameters Type Name Description IMapItem mapItem The map item. Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String, String) Creates and adds a new MapItem using the specified Content and Value. Declaration public void Add(string content, string value) Parameters Type Name Description System.String content The content. System.String value The value. Implements IMap.Add(String, String) Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IMapItem) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(IMapItem item) Parameters Type Name Description IMapItem item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string content) Parameters Type Name Description System.String content Returns Type Description System.Boolean Implements IMap.Contains(String) CopyTo(IMapItem[], Int32) Copies to. Declaration public void CopyTo(IMapItem[] array, int arrayIndex) Parameters Type Name Description IMapItem [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IMapItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IMapItem > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IMapItem) Removes the specified map item. Declaration public bool Remove(IMapItem mapItem) Parameters Type Name Description IMapItem mapItem The map item. Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Declaration public bool Remove(string content) Parameters Type Name Description System.String content Returns Type Description System.Boolean Implements IMap.Remove(String) Events Changed Declaration public event EventHandler<MapChangedEventArgs> Changed Event Type Type Description System.EventHandler < MapChangedEventArgs > Implements IMap.Changed Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods MapExtensions.ToElement(IMap)"
  },
  "api/Syn.Bot.Siml.Collections.MapCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.MapCollection.html",
    "title": "Class MapCollection - Syn Developer Network",
    "keywords": "Class MapCollection Represents a collection of SIML Maps. Inheritance System.Object MapCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class MapCollection : ICollection<IMap>, IEnumerable<IMap>, IEnumerable Constructors MapCollection(SimlBot) Initializes a new instance of the MapCollection class. Declaration public MapCollection(SimlBot mainBot) Parameters Type Name Description SimlBot mainBot The main bot. Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsOverridable Determines if an existing MapItem's value can be changed on Load. False by default. Declaration public bool IsOverridable { get; set; } Property Value Type Description System.Boolean IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Gets a Map with this specified name Declaration public IMap this[string mapName] { get; set; } Parameters Type Name Description System.String mapName Name of the map. Property Value Type Description IMap Methods Add(IMap) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(IMap item) Parameters Type Name Description IMap item The object to add to the System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Add(T) Add(XElement) Adds a Map to this collection. Declaration public void Add(XElement mapElement) Parameters Type Name Description System.Xml.Linq.XElement mapElement The map element. Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IMap) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(IMap item) Parameters Type Name Description IMap item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Determines whether this collection contains the specified Map. Declaration public bool Contains(string mapName) Parameters Type Name Description System.String mapName Name of the Map. Returns Type Description System.Boolean CopyTo(IMap[], Int32) Copies to. Declaration public void CopyTo(IMap[] array, int arrayIndex) Parameters Type Name Description IMap [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetDocument() Gets an SIML document that represents this MapCollection . Declaration public XDocument GetDocument() Returns Type Description System.Xml.Linq.XDocument GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IMap> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IMap > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IMap) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(IMap item) Parameters Type Name Description IMap item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Transform(Context, String) Transforms the specified parameter. Declaration public string Transform(Context context, string mapName) Parameters Type Name Description Context context The parameter. System.String mapName Name of the Map. Returns Type Description System.String Events CollectionChanged Occurs when a Map is added, removed, updated or when this collection is cleared. Declaration public event EventHandler<MapCollectionChangedEventArgs> CollectionChanged Event Type Type Description System.EventHandler < MapCollectionChangedEventArgs > Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.Tokenizer.html": {
    "href": "api/Syn.Bot.Siml.Collections.Tokenizer.html",
    "title": "Class Tokenizer - Syn Developer Network",
    "keywords": "Class Tokenizer Represents an SIML splitter element. Inheritance System.Object Tokenizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class Tokenizer : ITokenizer Constructors Tokenizer(TokenizerType, String) Initializes a new instance of the Tokenizer class. Declaration public Tokenizer(TokenizerType type, string value) Parameters Type Name Description TokenizerType type Splitter type. System.String value Splitting value. Properties Type Gets the type of this Tokenizer Declaration public TokenizerType Type { get; } Property Value Type Description TokenizerType Implements ITokenizer.Type Value Gets the splitter value. Declaration public string Value { get; } Property Value Type Description System.String Implements ITokenizer.Value Methods Tokenize(List<String>) Splits the specified source string. Declaration public List<string> Tokenize(List<string> sourceList) Parameters Type Name Description System.Collections.Generic.List < System.String > sourceList The source string. Returns Type Description System.Collections.Generic.List < System.String > List of string split using this Tokenizer 's value. Implements ITokenizer.Tokenize(List<String>)"
  },
  "api/Syn.Bot.Siml.Collections.TokenizerCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.TokenizerCollection.html",
    "title": "Class TokenizerCollection - Syn Developer Network",
    "keywords": "Class TokenizerCollection Inheritance System.Object TokenizerCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class TokenizerCollection : ICollection<ITokenizer>, IEnumerable<ITokenizer>, IEnumerable Constructors TokenizerCollection(SimlBot) Declaration public TokenizerCollection(SimlBot mainBot) Parameters Type Name Description SimlBot mainBot Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(ITokenizer) Declaration public void Add(ITokenizer item) Parameters Type Name Description ITokenizer item Implements System.Collections.Generic.ICollection<T>.Add(T) Add(XElement) Declaration public void Add(XElement splitterElement) Parameters Type Name Description System.Xml.Linq.XElement splitterElement Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ITokenizer) Declaration public bool Contains(ITokenizer item) Parameters Type Name Description ITokenizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(ITokenizer[], Int32) Declaration public void CopyTo(ITokenizer[] array, int arrayIndex) Parameters Type Name Description ITokenizer [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<ITokenizer> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ITokenizer > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(ITokenizer) Declaration public bool Remove(ITokenizer item) Parameters Type Name Description ITokenizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.TokenizerType.html": {
    "href": "api/Syn.Bot.Siml.Collections.TokenizerType.html",
    "title": "Enum TokenizerType - Syn Developer Network",
    "keywords": "Enum TokenizerType Provides enumerated values that determine the behavior of a Tokenizer Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public enum TokenizerType Fields Name Description Regex Regular Expression based splitter. Text Textual splitter. Word Word based splitter."
  },
  "api/Syn.Bot.Siml.Collections.UsersCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.UsersCollection.html",
    "title": "Class UsersCollection - Syn Developer Network",
    "keywords": "Class UsersCollection Inheritance System.Object UsersCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class UsersCollection : ICollection<BotUser>, IEnumerable<BotUser>, IEnumerable Constructors UsersCollection() Declaration public UsersCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public BotUser this[string userId] { get; } Parameters Type Name Description System.String userId Property Value Type Description BotUser Methods Add(BotUser) Declaration public void Add(BotUser item) Parameters Type Name Description BotUser item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(BotUser) Declaration public bool Contains(BotUser item) Parameters Type Name Description BotUser item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string userId) Parameters Type Name Description System.String userId Returns Type Description System.Boolean CopyTo(BotUser[], Int32) Declaration public void CopyTo(BotUser[] array, int arrayIndex) Parameters Type Name Description BotUser [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<BotUser> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < BotUser > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(BotUser) Declaration public bool Remove(BotUser item) Parameters Type Name Description BotUser item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Declaration public bool Remove(string userId) Parameters Type Name Description System.String userId Returns Type Description System.Boolean TryGetUser(String, out BotUser) Declaration public bool TryGetUser(string userid, out BotUser botUser) Parameters Type Name Description System.String userid BotUser botUser Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.DelayStatus.html": {
    "href": "api/Syn.Bot.Siml.DelayStatus.html",
    "title": "Enum DelayStatus - Syn Developer Network",
    "keywords": "Enum DelayStatus Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum DelayStatus Fields Name Description Completed Created Running"
  },
  "api/Syn.Bot.Siml.DelayUnit.html": {
    "href": "api/Syn.Bot.Siml.DelayUnit.html",
    "title": "Enum DelayUnit - Syn Developer Network",
    "keywords": "Enum DelayUnit Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum DelayUnit Fields Name Description Hour Minute Second"
  },
  "api/Syn.Bot.Siml.Events.EmotionChangedEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.EmotionChangedEventArgs.html",
    "title": "Class EmotionChangedEventArgs - Syn Developer Network",
    "keywords": "Class EmotionChangedEventArgs Inheritance System.Object System.EventArgs EmotionChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class EmotionChangedEventArgs : EventArgs Constructors EmotionChangedEventArgs(Emotion, Emotion) Declaration public EmotionChangedEventArgs(Emotion previous, Emotion current) Parameters Type Name Description Emotion previous Emotion current Properties Current Declaration public Emotion Current { get; } Property Value Type Description Emotion Previous Declaration public Emotion Previous { get; } Property Value Type Description Emotion"
  },
  "api/Syn.Bot.Siml.Events.LearningEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.LearningEventArgs.html",
    "title": "Class LearningEventArgs - Syn Developer Network",
    "keywords": "Class LearningEventArgs Inheritance System.Object System.EventArgs LearningEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class LearningEventArgs : EventArgs Constructors LearningEventArgs(BotUser, XDocument) Declaration public LearningEventArgs(BotUser user, XDocument document) Parameters Type Name Description BotUser user System.Xml.Linq.XDocument document Properties Document Declaration public XDocument Document { get; } Property Value Type Description System.Xml.Linq.XDocument User Declaration public BotUser User { get; } Property Value Type Description BotUser"
  },
  "api/Syn.Bot.Siml.ExampleResult.html": {
    "href": "api/Syn.Bot.Siml.ExampleResult.html",
    "title": "Class ExampleResult - Syn Developer Network",
    "keywords": "Class ExampleResult Inheritance System.Object SearchResult ExampleResult Inherited Members SearchResult.Score SearchResult.Query SearchResult.Value SearchResult.InputMatchList SearchResult.Empty SearchResult.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class ExampleResult : SearchResult Constructors ExampleResult(SearchResult, ExampleItem) Declaration public ExampleResult(SearchResult searchResult, ExampleItem exampleItem) Parameters Type Name Description SearchResult searchResult ExampleItem exampleItem Properties Example Declaration public ExampleItem Example { get; } Property Value Type Description ExampleItem"
  },
  "api/Syn.Bot.Siml.Extensions.MapExtensions.html": {
    "href": "api/Syn.Bot.Siml.Extensions.MapExtensions.html",
    "title": "Class MapExtensions - Syn Developer Network",
    "keywords": "Class MapExtensions Inheritance System.Object MapExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Extensions Assembly :Syn.Bot.dll Syntax public static class MapExtensions Methods ToElement(IMap) Declaration public static XElement ToElement(this IMap map) Parameters Type Name Description IMap map Returns Type Description System.Xml.Linq.XElement"
  },
  "api/Syn.Bot.Siml.Extensions.RandomExtensions.html": {
    "href": "api/Syn.Bot.Siml.Extensions.RandomExtensions.html",
    "title": "Class RandomExtensions - Syn Developer Network",
    "keywords": "Class RandomExtensions Inheritance System.Object RandomExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Extensions Assembly :Syn.Bot.dll Syntax public static class RandomExtensions Methods ChooseByProbability<T>(IList<WeightedItem<T>>) Declaration public static T ChooseByProbability<T>(this IList<WeightedItem<T>> source) Parameters Type Name Description System.Collections.Generic.IList < WeightedItem <T>> source Returns Type Description T Type Parameters Name Description T ChooseByWeight<T>(IEnumerable<WeightedItem<T>>) Declaration public static T ChooseByWeight<T>(this IEnumerable<WeightedItem<T>> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < WeightedItem <T>> source Returns Type Description T Type Parameters Name Description T"
  },
  "api/Syn.Bot.Siml.Optimization.SimlOptimizer.html": {
    "href": "api/Syn.Bot.Siml.Optimization.SimlOptimizer.html",
    "title": "Class SimlOptimizer - Syn Developer Network",
    "keywords": "Class SimlOptimizer EXPERIMENTAL //TODO: Work in Progress Inheritance System.Object SimlOptimizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Optimization Assembly :Syn.Bot.dll Syntax public class SimlOptimizer : INotifyPropertyChanged Properties Status Gets or sets the status of the Analyzer. Declaration public string Status { get; set; } Property Value Type Description System.String The status. Methods OnPropertyChanged(String) Declaration protected virtual void OnPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Optimize(XDocument) Declaration public static XDocument Optimize(XDocument document) Parameters Type Name Description System.Xml.Linq.XDocument document Returns Type Description System.Xml.Linq.XDocument Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged"
  },
  "api/Syn.Bot.Siml.Optimization.html": {
    "href": "api/Syn.Bot.Siml.Optimization.html",
    "title": "Namespace Syn.Bot.Siml.Optimization - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Optimization Classes SimlOptimizer EXPERIMENTAL //TODO: Work in Progress"
  },
  "api/Syn.Bot.Siml.PackageManager.html": {
    "href": "api/Syn.Bot.Siml.PackageManager.html",
    "title": "Class PackageManager - Syn Developer Network",
    "keywords": "Class PackageManager Provides functionalities to import an SIML Package into the Bot's GraphNode Inheritance System.Object PackageManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class PackageManager Methods ConvertToPackage(IEnumerable<XDocument>) Converts a list of SIML documents to an SIML Package. Declaration public string ConvertToPackage(IEnumerable<XDocument> simlDocuments) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Xml.Linq.XDocument > simlDocuments SIML documents. Returns Type Description System.String An SIML Package as System.String Remarks This SIML Package should be stored in a file with .SimlPk extension LoadFromString(String) Loads SIML Package into the Bot's Master GraphNode Declaration public void LoadFromString(string packageString) Parameters Type Name Description System.String packageString The SIML package string."
  },
  "api/Syn.Bot.Siml.Performance.PerformanceWatch.html": {
    "href": "api/Syn.Bot.Siml.Performance.PerformanceWatch.html",
    "title": "Class PerformanceWatch - Syn Developer Network",
    "keywords": "Class PerformanceWatch Contains functionality to compare internal function performance. Inheritance System.Object PerformanceWatch Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Performance Assembly :Syn.Bot.dll Syntax public class PerformanceWatch Properties TotalMilliseconds Declaration public double TotalMilliseconds { get; } Property Value Type Description System.Double Methods Start() Declaration public static PerformanceWatch Start() Returns Type Description PerformanceWatch"
  },
  "api/Syn.Bot.Siml.Performance.SpeedStats.html": {
    "href": "api/Syn.Bot.Siml.Performance.SpeedStats.html",
    "title": "Class SpeedStats - Syn Developer Network",
    "keywords": "Class SpeedStats Inheritance System.Object SpeedStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Performance Assembly :Syn.Bot.dll Syntax public class SpeedStats Constructors SpeedStats() Declaration public SpeedStats() Properties FiltrationTime Declaration public double FiltrationTime { get; } Property Value Type Description System.Double MappingTime Declaration public double MappingTime { get; } Property Value Type Description System.Double ProcessingTime Declaration public double ProcessingTime { get; } Property Value Type Description System.Double SplittingTime Declaration public double SplittingTime { get; } Property Value Type Description System.Double"
  },
  "api/Syn.Bot.Siml.Serialization.html": {
    "href": "api/Syn.Bot.Siml.Serialization.html",
    "title": "Namespace Syn.Bot.Siml.Serialization - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Serialization Classes ChatResultContract"
  },
  "api/Syn.Bot.Siml.SimlBot.html": {
    "href": "api/Syn.Bot.Siml.SimlBot.html",
    "title": "Class SimlBot - Syn Developer Network",
    "keywords": "Class SimlBot Official SIML Interpreter by Synthetic Intelligence Network Inheritance System.Object SimlBot Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public sealed class SimlBot Constructors SimlBot() Initializes a new instance of SynBot class. Declaration public SimlBot() SimlBot(BotConfiguration) Initializes a new instance of SimlBot class with the specified configuration. Declaration public SimlBot(BotConfiguration configuration) Parameters Type Name Description BotConfiguration configuration Bot Configuration. Properties Adapters Gets the tag handlers. Declaration public AdapterCollection Adapters { get; } Property Value Type Description AdapterCollection The tag handlers. CacheManager Gets the cache manager. Declaration public ICacheManager CacheManager { get; } Property Value Type Description ICacheManager Configuration Gets the Bot configuration. Declaration public BotConfiguration Configuration { get; } Property Value Type Description BotConfiguration The configuration. ContextProcessor Gets the context processor. Declaration public IContextProcessor ContextProcessor { get; } Property Value Type Description IContextProcessor The context processor. Culture Gets the System.Globalization.CultureInfo under which the Bot is currently operating. Declaration public CultureInfo Culture { get; } Property Value Type Description System.Globalization.CultureInfo DefaultUserSettings Gets the default user settings. Declaration public UserSettings DefaultUserSettings { get; } Property Value Type Description UserSettings The default user settings. Remarks This Settings contains the default variables that are loaded upon package load. Once loaded any changes to this settings will not affect other BotUser settings. Emotion Gets the current emotion for the Bot. Declaration public Emotion Emotion { get; set; } Property Value Type Description Emotion EmotionMLDocument Gets the default EmotionML parser. Declaration public EmotionMLDocument EmotionMLDocument { get; } Property Value Type Description EmotionMLDocument Encoding Gets the encoding used by the Bot. Declaration public Encoding Encoding { get; } Property Value Type Description System.Text.Encoding Examples Gets a list of atomic patterns known by the bot. Declaration public ExampleCollection Examples { get; } Property Value Type Description ExampleCollection Atomic Patterns. Filters Gets the filter collection. Declaration public FilterCollection Filters { get; } Property Value Type Description FilterCollection The filter collection. GraphMaster Gets the master Graph Node. Declaration public GraphNode GraphMaster { get; } Property Value Type Description GraphNode HasParent Determines if this Bot has a parent Bot. Declaration public bool HasParent { get; } Property Value Type Description System.Boolean ID Gets the Unique ID assigned to this Bot. Declaration public string ID { get; } Property Value Type Description System.String Instance Gets or sets the shared Main SimlBot . A new SimlBot object is initialized on 'Get' call. Declaration public static SimlBot Instance { get; set; } Property Value Type Description SimlBot The main bot. Interactions Gets the interactions made by all bot users. Declaration public InteractionCollection Interactions { get; } Property Value Type Description InteractionCollection The interactions. IsIdle Gets a value indicating if this bot has exceeded its maximum allowed idle time. Declaration public bool IsIdle { get; } Property Value Type Description System.Boolean Logger Gets the default logger. Declaration public static SynLogger Logger { get; } Property Value Type Description SynLogger MainUser Gets the \"supposedly\" main user for this Bot. Declaration public BotUser MainUser { get; } Property Value Type Description BotUser Main user Maps Gets the map collection. Declaration public MapCollection Maps { get; } Property Value Type Description MapCollection The map collection. PackageManager Loads SIML Package from String. Declaration public PackageManager PackageManager { get; } Property Value Type Description PackageManager Parent Get the Parent Bot Declaration public SimlBot Parent { get; } Property Value Type Description SimlBot The Parent Bot if it exists else returns null. Parsers Gets the parsers. Declaration public ParserCollection Parsers { get; } Property Value Type Description ParserCollection The parsers. RandomCollection Gets the collection of Random and Phrase items. Declaration public RandomCollection RandomCollection { get; } Property Value Type Description RandomCollection RegularExpressions Gets the regex collection. Declaration public RegexCollection RegularExpressions { get; } Property Value Type Description RegexCollection The regex collection. RepeatManager Gets the repeat manager. Declaration public RepeatManager RepeatManager { get; } Property Value Type Description RepeatManager The repeat manager. ScriptManager Gets the Script Manager. Declaration public ScriptManager ScriptManager { get; } Property Value Type Description ScriptManager SearchEngine Gets or sets the search engine for processing examples. Declaration public ISearchEngine SearchEngine { get; set; } Property Value Type Description ISearchEngine The search engine. Sets Gets the set collection. Declaration public SetCollection Sets { get; } Property Value Type Description SetCollection The set collection. Settings Gets the Settings object that contains Bot variables. Declaration public BotSettings Settings { get; } Property Value Type Description BotSettings List of variables known by the Bot. Stats Gets Bot stats. Declaration public BotStats Stats { get; } Property Value Type Description BotStats BotStats Time Gets the UTC offset based System.DateTime value. Declaration public DateTime Time { get; } Property Value Type Description System.DateTime UTC offset based System.DateTime value. Remarks if the UTC offset value is not set in bot settings then returns System.DateTime.Now . Timeout Gets the time span after which a chat request is timed out Declaration public TimeSpan Timeout { get; } Property Value Type Description System.TimeSpan Timeout Timer Gets the default Timer for Syn.Bot.Siml.LateTask execution. Declaration public ServiceTimer Timer { get; } Property Value Type Description ServiceTimer Tokenizers Gets the Splitter Collection. Declaration public TokenizerCollection Tokenizers { get; } Property Value Type Description TokenizerCollection Users Gets all known BotUser s. Declaration public UsersCollection Users { get; } Property Value Type Description UsersCollection Version Gets the version of the Bot Library. Declaration public static string Version { get; } Property Value Type Description System.String The Bot Library version. Vocabulary Gets all the unique tokens known to the Bot. Declaration public VocabularyCollection Vocabulary { get; } Property Value Type Description VocabularyCollection Methods Activate(String, String, String) Activates the specified license type. Declaration public static void Activate(string licenseType, string licensee, string licenseKey) Parameters Type Name Description System.String licenseType Type of the license. System.String licensee The licensee. System.String licenseKey The license key. AddSiml(IEnumerable<XDocument>) Adds SIML documents to Bot Knowledge-Base after proper sequencing. Declaration public void AddSiml(IEnumerable<XDocument> simlDocuments) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Xml.Linq.XDocument > simlDocuments SIML Elements AddSiml(String) Loads SIML from string preserving all whitespace. Declaration public void AddSiml(string simlString) Parameters Type Name Description System.String simlString SIML String. AddSiml(XDocument) Adds the SIML document to bot. Declaration public void AddSiml(XDocument simlDocument) Parameters Type Name Description System.Xml.Linq.XDocument simlDocument The SIML document. AddSiml(XDocument, BotUser) Adds the SIML document to the user's mini graph. Declaration public void AddSiml(XDocument simlDocument, BotUser user) Parameters Type Name Description System.Xml.Linq.XDocument simlDocument The SIML document. BotUser user The Bot user. Chat(ChatRequest) Sends the specified chat request. Declaration public ChatResult Chat(ChatRequest chatRequest) Parameters Type Name Description ChatRequest chatRequest The chat request. Returns Type Description ChatResult Chat(String) Chat Declaration public ChatResult Chat(string userMessage) Parameters Type Name Description System.String userMessage user Message Returns Type Description ChatResult Chat(String, BotUser) Sends the message as user chat request. Declaration public ChatResult Chat(string userMessage, BotUser botUser) Parameters Type Name Description System.String userMessage The user message. BotUser botUser The BotUser that is making this chat request. Returns Type Description ChatResult Chat<T>(String) EXPERIMENTAL: Starts a chat request and returnes the last evaluated contextual Data of the specified type. Declaration public T Chat<T>(string userMessage) Parameters Type Name Description System.String userMessage Returns Type Description T Type Parameters Name Description T CreateUser() Creates a new BotUser Declaration public BotUser CreateUser() Returns Type Description BotUser CreateUser(String) Creates User with the specified ID. Declaration public BotUser CreateUser(string userId) Parameters Type Name Description System.String userId Unique Identifier. Returns Type Description BotUser Remarks If a user with the specified id already exists then the existing user is returned. Raise(String) Raises the specified event for the MainUser . Declaration public void Raise(string eventName) Parameters Type Name Description System.String eventName The event name. Raise(String, BotUser) Raises the specified event for the specified BotUser . Declaration public void Raise(string eventName, BotUser user) Parameters Type Name Description System.String eventName The event name. BotUser user The user. Release() Releases and clears all resources used by this Bot. This function is to be used if the Bot has a Parent. Declaration public void Release() Trigger(String) Triggers the specified event. Declaration [Obsolete(\"Please use Raise() instead.\", true)] public void Trigger(string eventMessage) Parameters Type Name Description System.String eventMessage The event message. Trigger(String, BotUser) Triggers the specified event message. Declaration [Obsolete(\"Please use Raise() instead.\", true)] public void Trigger(string eventMessage, BotUser user) Parameters Type Name Description System.String eventMessage The event message. BotUser user The user. Events EmotionChanged Occurs when the emotion of the Bot changes. Declaration public event EventHandler<EmotionChangedEventArgs> EmotionChanged Event Type Type Description System.EventHandler < EmotionChangedEventArgs > Learning Occurs when the Bot learns a new Model. Declaration public event EventHandler<LearningEventArgs> Learning Event Type Type Description System.EventHandler < LearningEventArgs > Memorizing Occurs when the Bot memorizes a new Model for a specific user. Declaration public event EventHandler<MemorizingEventArgs> Memorizing Event Type Type Description System.EventHandler < MemorizingEventArgs > Suggesting Occurs when the Bot is suggesting example inputs from Examples . Declaration public event EventHandler<SuggestingEventArgs> Suggesting Event Type Type Description System.EventHandler < SuggestingEventArgs >"
  },
  "api/Syn.Bot.Siml.SimlSpecification.html": {
    "href": "api/Syn.Bot.Siml.SimlSpecification.html",
    "title": "Class SimlSpecification - Syn Developer Network",
    "keywords": "Class SimlSpecification Represents an SIML specification. Inheritance System.Object SimlSpecification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public static class SimlSpecification Properties EmptyDocument Gets an empty SIML document. Declaration public static XDocument EmptyDocument { get; } Property Value Type Description System.Xml.Linq.XDocument An empty SIML document. Namespace Gets a class with Properties that point to known and/or commonly used Namespaces in an SIML document. Declaration public static Namespace Namespace { get; } Property Value Type Description Namespace Version Gets the SIML version. Declaration public static string Version { get; } Property Value Type Description System.String 1.0"
  },
  "api/Syn.Bot.Siml.StackFrame.html": {
    "href": "api/Syn.Bot.Siml.StackFrame.html",
    "title": "Class StackFrame - Syn Developer Network",
    "keywords": "Class StackFrame Container class for Stack information. Inheritance System.Object StackFrame Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class StackFrame Properties Concept Gets the SIML Concept name. Declaration public string Concept { get; } Property Value Type Description System.String Label Gets the value of the Label associated with this BotResponse Declaration public string Label { get; } Property Value Type Description System.String Output Gets the Bot output. Declaration public string Output { get; } Property Value Type Description System.String Previous Gets the value of the Previous element. Declaration public string Previous { get; } Property Value Type Description System.String Previous element's value. Siml Gets the SIML code. Declaration public string Siml { get; } Property Value Type Description System.String Trigger Gets the SIML Pattern that triggered this BotResponse Declaration public string Trigger { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.UserSettings.html": {
    "href": "api/Syn.Bot.Siml.UserSettings.html",
    "title": "Class UserSettings - Syn Developer Network",
    "keywords": "Class UserSettings A Settings class for SynUser. Inheritance System.Object Settings CommonSettings UserSettings Inherited Members CommonSettings.DefaultValue CommonSettings.UndefinedValue CommonSettings.GetValue(String) CommonSettings.Load(XDocument) CommonSettings.Load(XElement) CommonSettings.GetDocument() Settings.Bind(Settings) Settings.Load(Settings) Settings.Add(String, Func<String>) Settings.Add(IVariable) Settings.Remove(String) Settings.Clear() Settings.Contains(IVariable) Settings.CopyTo(IVariable[], Int32) Settings.Remove(IVariable) Settings.GetEnumerator() Settings.IEnumerable.GetEnumerator() Settings.TryGetValue(String, String) Settings.Contains(String) Settings.Variables Settings.Count Settings.IsReadOnly Settings.Name Settings.Location Settings.Item[String] Settings.SettingsChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class UserSettings : CommonSettings, ICollection<IVariable>, IEnumerable<IVariable>, IEnumerable Constructors UserSettings() Initializes a new instance of the UserSettings class. Declaration public UserSettings() Extension Methods SettingsExtensions.ApplyToProperties(Settings, Object, String[]) SettingsExtensions.GetDocument(Settings)"
  },
  "api/Syn.Bot.Siml.VarSettings.html": {
    "href": "api/Syn.Bot.Siml.VarSettings.html",
    "title": "Class VarSettings - Syn Developer Network",
    "keywords": "Class VarSettings Represents an arbitrary container for temporary variables. Inheritance System.Object Settings CommonSettings VarSettings Inherited Members CommonSettings.DefaultValue CommonSettings.UndefinedValue CommonSettings.GetValue(String) CommonSettings.Load(XDocument) CommonSettings.Load(XElement) CommonSettings.GetDocument() Settings.Bind(Settings) Settings.Load(Settings) Settings.Add(String, Func<String>) Settings.Add(IVariable) Settings.Remove(String) Settings.Clear() Settings.Contains(IVariable) Settings.CopyTo(IVariable[], Int32) Settings.Remove(IVariable) Settings.GetEnumerator() Settings.IEnumerable.GetEnumerator() Settings.TryGetValue(String, String) Settings.Contains(String) Settings.Variables Settings.Count Settings.IsReadOnly Settings.Name Settings.Location Settings.Item[String] Settings.SettingsChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class VarSettings : CommonSettings, ICollection<IVariable>, IEnumerable<IVariable>, IEnumerable Constructors VarSettings() Declaration public VarSettings() Extension Methods SettingsExtensions.ApplyToProperties(Settings, Object, String[]) SettingsExtensions.GetDocument(Settings)"
  },
  "api/Syn.Bot.Siml.html": {
    "href": "api/Syn.Bot.Siml.html",
    "title": "Namespace Syn.Bot.Siml - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml Classes BotConfiguration A pre-load configuration class for SimlBot . BotResponse Represents a response generated after a GraphNode has successfully been evaluated. BotSettings A Settings class derived for storing Bot related variables. BotStats A container class used to store Bot statistics. BotUser Represents an entity that interacts with SimlBot ChatRequest Represents a Chat Request made to SimlBot . ChatResult Represents a Bot message that is generated after a ChatRequest is made. CommonSettings Context A Contextual collection of all the items that represent the current SIML node being processed. ContextProcessor A Processor class that processes all the adapters found in the Context . DelayBase ExampleResult Namespace PackageManager Provides functionalities to import an SIML Package into the Bot's GraphNode RepeatManager Represents a repeat management system. ScriptManager Provides functionality to interact with internal Scripting Engines. SimlBot Official SIML Interpreter by Synthetic Intelligence Network SimlSpecification Represents an SIML specification. StackFrame Container class for Stack information. UserSettings A Settings class for SynUser. VarSettings Represents an arbitrary container for temporary variables. Enums BindingSwitch ConceptType Provides enumerated values used to determine the type of Concept. DelayStatus DelayUnit FilterTarget Provides enumerated values to determine the target of filtration. ScriptType Provides enumerated values to represent a Script."
  },
  "api/Syn.Bot.Utility.Cache.SqlCacheManager.html": {
    "href": "api/Syn.Bot.Utility.Cache.SqlCacheManager.html",
    "title": "Class SqlCacheManager - Syn Developer Network",
    "keywords": "Class SqlCacheManager Caches all JSON serializable objects to an SQL Database. Duplicate entries are negligible because Database size is not a consideration. Only read-only entries that do not get modified are run-time must be cached. Variables MUST NOT be cached. Inheritance System.Object SqlCacheManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Cache Assembly :Syn.Bot.Utility.dll Syntax public class SqlCacheManager : ICacheManager Constructors SqlCacheManager(String) Declaration public SqlCacheManager(string cacheFilePath) Parameters Type Name Description System.String cacheFilePath Properties Command Declaration public SQLiteCommand Command { get; set; } Property Value Type Description System.Data.SQLite.SQLiteCommand Connection Declaration public SQLiteConnection Connection { get; set; } Property Value Type Description System.Data.SQLite.SQLiteConnection IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Implements ICacheManager.IsEmpty Size Declaration public int Size { get; } Property Value Type Description System.Int32 Implements ICacheManager.Size Methods Add(Object) Declaration public int Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Implements ICacheManager.Add(Object) Clear() Declaration public void Clear() Implements ICacheManager.Clear() GetValue<T>(Int32) Declaration public T GetValue<T>(int key) Parameters Type Name Description System.Int32 key Returns Type Description T Type Parameters Name Description T Implements ICacheManager.GetValue<T>(Int32) Remove(Int32) Declaration public bool Remove(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Boolean Implements ICacheManager.Remove(Int32)"
  },
  "api/Syn.Bot.Utility.Contracts.ServerDetail.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ServerDetail.html",
    "title": "Class ServerDetail - Syn Developer Network",
    "keywords": "Class ServerDetail Inheritance System.Object ServerDetail Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"ServerDetail\", Namespace = \"\")] public class ServerDetail Properties Cpu Declaration [DataMember] public string Cpu { get; set; } Property Value Type Description System.String Interactions Declaration [DataMember] public long Interactions { get; set; } Property Value Type Description System.Int64 Interpreter Declaration [DataMember] public string Interpreter { get; set; } Property Value Type Description System.String Os Declaration [DataMember] public string Os { get; set; } Property Value Type Description System.String Ram Declaration [DataMember] public string Ram { get; set; } Property Value Type Description System.String Time Declaration [DataMember] public string Time { get; set; } Property Value Type Description System.String Version Declaration [DataMember] public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Contracts.ServiceRequest.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ServiceRequest.html",
    "title": "Class ServiceRequest - Syn Developer Network",
    "keywords": "Class ServiceRequest Inheritance System.Object ServiceRequest Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"Request\", Namespace = \"\")] public class ServiceRequest Properties ApiKey Declaration [DataMember] public string ApiKey { get; set; } Property Value Type Description System.String Secret Declaration [DataMember] public string Secret { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Contracts.ServiceResult.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ServiceResult.html",
    "title": "Class ServiceResult - Syn Developer Network",
    "keywords": "Class ServiceResult Inheritance System.Object ServiceResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"ServiceResult\")] public class ServiceResult Properties Message Declaration [DataMember] public string Message { get; set; } Property Value Type Description System.String Success Declaration [DataMember] public bool Success { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.Entities.IpAddressEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.IpAddressEntity.html",
    "title": "Class IpAddressEntity - Syn Developer Network",
    "keywords": "Class IpAddressEntity Inheritance System.Object Entity IpAddressEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class IpAddressEntity : Entity, IEntity Constructors IpAddressEntity(String) Declaration public IpAddressEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.NumberSequenceEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.NumberSequenceEntity.html",
    "title": "Class NumberSequenceEntity - Syn Developer Network",
    "keywords": "Class NumberSequenceEntity Inheritance System.Object Entity NumberSequenceEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class NumberSequenceEntity : Entity, IEntity Constructors NumberSequenceEntity(String) Declaration public NumberSequenceEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.OrdinalEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.OrdinalEntity.html",
    "title": "Class OrdinalEntity - Syn Developer Network",
    "keywords": "Class OrdinalEntity Inheritance System.Object OrdinalEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class OrdinalEntity : IEntity Constructors OrdinalEntity(String, Int32) Declaration public OrdinalEntity(string value, int ordinal) Parameters Type Name Description System.String value System.Int32 ordinal Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Length Declaration public int Length { get; } Property Value Type Description System.Int32 Ordinal Declaration [Resolution(\"ordinal\")] public int Ordinal { get; } Property Value Type Description System.Int32 Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Value Declaration public string Value { get; } Property Value Type Description System.String Implements IEntity.Value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.PercentageEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.PercentageEntity.html",
    "title": "Class PercentageEntity - Syn Developer Network",
    "keywords": "Class PercentageEntity Inheritance System.Object AmountUnitEntity PercentageEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class PercentageEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors PercentageEntity() Declaration public PercentageEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.PhoneNumberEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.PhoneNumberEntity.html",
    "title": "Class PhoneNumberEntity - Syn Developer Network",
    "keywords": "Class PhoneNumberEntity Inheritance System.Object Entity PhoneNumberEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class PhoneNumberEntity : Entity, IEntity Constructors PhoneNumberEntity(String) Declaration public PhoneNumberEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitLengthEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitLengthEntity.html",
    "title": "Class UnitLengthEntity - Syn Developer Network",
    "keywords": "Class UnitLengthEntity Inheritance System.Object AmountUnitEntity UnitLengthEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitLengthEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors UnitLengthEntity() Declaration public UnitLengthEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitLengthNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitLengthNameEntity.html",
    "title": "Class UnitLengthNameEntity - Syn Developer Network",
    "keywords": "Class UnitLengthNameEntity Inheritance System.Object UnitEntity UnitLengthNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitLengthNameEntity : UnitEntity, IEntity Constructors UnitLengthNameEntity(String, String) Declaration public UnitLengthNameEntity(string value, string unit) Parameters Type Name Description System.String value System.String unit Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitSpeedEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitSpeedEntity.html",
    "title": "Class UnitSpeedEntity - Syn Developer Network",
    "keywords": "Class UnitSpeedEntity Inheritance System.Object AmountUnitEntity UnitSpeedEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class UnitSpeedEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors UnitSpeedEntity() Declaration public UnitSpeedEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitSpeedNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitSpeedNameEntity.html",
    "title": "Class UnitSpeedNameEntity - Syn Developer Network",
    "keywords": "Class UnitSpeedNameEntity Inheritance System.Object UnitEntity UnitSpeedNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitSpeedNameEntity : UnitEntity, IEntity Constructors UnitSpeedNameEntity(String, String) Declaration public UnitSpeedNameEntity(string value, string resolution) Parameters Type Name Description System.String value System.String resolution Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.html": {
    "href": "api/Syn.Bot.Oscova.Entities.html",
    "title": "Namespace Syn.Bot.Oscova.Entities - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Entities Classes AgeEntity AmountUnitEntity ColorEntity CompositeEntity CountryEntity CurrencyNameEntity DateEntity DateTimeEntity DayEntity DurationEntity EmailEntity Entity IntegerEntity IpAddressEntity LanguageEntity MonthEntity MusicGenreEntity NegativeEntity NumberEntity NumberSequenceEntity OrdinalEntity PercentageEntity PhoneNumberEntity PostalCodeEntity PostiveEntity StateNameEntity TemperatureEntity TextEntity TimeEntity UnitAreaEntity UnitAreaNameEntity UnitEntity UnitLengthEntity UnitLengthNameEntity UnitSpeedEntity UnitSpeedNameEntity UnitTemperatureNameEntity UnitVolumeEntity UnitVolumeNameEntity UnitWeightEntity UnitWeightNameEntity UrlEntity"
  },
  "api/Syn.Bot.Oscova.EvaluationResult.html": {
    "href": "api/Syn.Bot.Oscova.EvaluationResult.html",
    "title": "Class EvaluationResult - Syn Developer Network",
    "keywords": "Class EvaluationResult Represents an evaluation result generated by OscovaBot . Inheritance System.Object EvaluationResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class EvaluationResult Properties Entities Gets the entities. Declaration public EntityCollection Entities { get; } Property Value Type Description EntityCollection The entities. Intents Gets the intents. Declaration public IntentCollection Intents { get; } Property Value Type Description IntentCollection The intents. ProcessingTime Gets the request processing time. Declaration public TimeSpan ProcessingTime { get; } Property Value Type Description System.TimeSpan The request processing time. Methods Invoke() Invokes the highest scoring contextual intent. Declaration public void Invoke() Invoke(IntentResult) Invokes the the specified IntentResult . Declaration public void Invoke(IntentResult intentResult) Parameters Type Name Description IntentResult intentResult The result. Serialize() Serializes this evaluation result into JSON. Declaration public string Serialize() Returns Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Events.CompositeEntityCreatedEventArgs.html": {
    "href": "api/Syn.Bot.Oscova.Events.CompositeEntityCreatedEventArgs.html",
    "title": "Class CompositeEntityCreatedEventArgs - Syn Developer Network",
    "keywords": "Class CompositeEntityCreatedEventArgs Inheritance System.Object System.EventArgs CompositeEntityCreatedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Events Assembly :Syn.Bot.dll Syntax public class CompositeEntityCreatedEventArgs : EventArgs Properties CompositeEntity Declaration public ICompositeEntity CompositeEntity { get; } Property Value Type Description ICompositeEntity Entities Declaration public EntityCollection Entities { get; } Property Value Type Description EntityCollection Request Declaration public Request Request { get; } Property Value Type Description Request"
  },
  "api/Syn.Bot.Oscova.Events.EntityCreatedEventArgs.html": {
    "href": "api/Syn.Bot.Oscova.Events.EntityCreatedEventArgs.html",
    "title": "Class EntityCreatedEventArgs - Syn Developer Network",
    "keywords": "Class EntityCreatedEventArgs Inheritance System.Object System.EventArgs EntityCreatedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Events Assembly :Syn.Bot.dll Syntax public class EntityCreatedEventArgs : EventArgs Constructors EntityCreatedEventArgs(EntityCollection, IEntity) Declaration public EntityCreatedEventArgs(EntityCollection entities, IEntity entity) Parameters Type Name Description EntityCollection entities IEntity entity Properties Entities Declaration public EntityCollection Entities { get; } Property Value Type Description EntityCollection Entity Declaration public IEntity Entity { get; } Property Value Type Description IEntity"
  },
  "api/Syn.Bot.Oscova.Recognizers.AgeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.AgeRecognizer.html",
    "title": "Class AgeRecognizer - Syn Developer Network",
    "keywords": "Class AgeRecognizer Inheritance System.Object BaseRegexRecognizer AgeRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class AgeRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors AgeRecognizer() Declaration public AgeRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.BaseRegexRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.BaseRegexRecognizer.html",
    "title": "Class BaseRegexRecognizer - Syn Developer Network",
    "keywords": "Class BaseRegexRecognizer Inheritance System.Object BaseRegexRecognizer AgeRecognizer DurationRecognizer IndianPhoneNumberRecognizer IndianPostalCodeRecognizer IntegerRecognizer IpAddressRecognizer NumberSequenceRecognizer PercentageRecognizer RegexRecognizer TemperatureRecognizer UkPostalCodeRecognizer UnitAreaRecognizer UnitLengthRecognizer UnitSpeedRecognizer UnitVolumeRecognizer UnitWeightRecognizer UsPhoneNumberRecognizer UsPostalCodeRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public abstract class BaseRegexRecognizer : IEntityRecognizer Constructors BaseRegexRecognizer(String) Declaration protected BaseRegexRecognizer(string type) Parameters Type Name Description System.String type Properties Regex Declaration public abstract Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods CreateEntity(Match) Declaration public abstract IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.CountryRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.CountryRecognizer.html",
    "title": "Class CountryRecognizer - Syn Developer Network",
    "keywords": "Class CountryRecognizer Inheritance System.Object EntryRecognizer CountryRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class CountryRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors CountryRecognizer() Declaration public CountryRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Utilities.EnglishNumberResult.html": {
    "href": "api/Syn.Bot.Oscova.Utilities.EnglishNumberResult.html",
    "title": "Class EnglishNumberResult - Syn Developer Network",
    "keywords": "Class EnglishNumberResult Inheritance System.Object EnglishNumberResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Utilities Assembly :Syn.Bot.dll Syntax public class EnglishNumberResult Constructors EnglishNumberResult() Declaration public EnglishNumberResult() Fields Empty Declaration public static readonly EnglishNumberResult Empty Field Value Type Description EnglishNumberResult Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 IsOrdinal Declaration public bool IsOrdinal { get; } Property Value Type Description System.Boolean Phrase Declaration public string Phrase { get; set; } Property Value Type Description System.String Value Declaration public int Value { get; set; } Property Value Type Description System.Int32"
  },
  "api/Syn.Bot.Siml.BindingSwitch.html": {
    "href": "api/Syn.Bot.Siml.BindingSwitch.html",
    "title": "Enum BindingSwitch - Syn Developer Network",
    "keywords": "Enum BindingSwitch Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum BindingSwitch Fields Name Description Off On"
  },
  "api/Syn.Bot.Siml.BotConfiguration.html": {
    "href": "api/Syn.Bot.Siml.BotConfiguration.html",
    "title": "Class BotConfiguration - Syn Developer Network",
    "keywords": "Class BotConfiguration A pre-load configuration class for SimlBot . Inheritance System.Object BotConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public sealed class BotConfiguration Constructors BotConfiguration() Initializes a new instance of the BotConfiguration class. Declaration public BotConfiguration() Properties AllowConditionsInPattern Gets or sets a value indicating whether If conditions are allowed within Patterns Declaration public bool AllowConditionsInPattern { get; set; } Property Value Type Description System.Boolean true if If conditions are allowed within Patterns ; otherwise, false . AllowConditionsInPublicPattern Gets or sets a value indicating whether If conditions are allowed in Public Patterns Declaration public bool AllowConditionsInPublicPattern { get; set; } Property Value Type Description System.Boolean true if If conditions are allowed within Public Patterns ; otherwise, false . AllowEmotions Gets or sets a value indicating whether emotions are allowed. Declaration public bool AllowEmotions { get; set; } Property Value Type Description System.Boolean true if emotions are allowed; otherwise, false . AllowFilters Gets or sets a value indicating whether filters are allowed. Declaration public bool AllowFilters { get; set; } Property Value Type Description System.Boolean true if filters are allowed; otherwise, false . AllowJavaScript Gets or sets a value indicating whether JavaScript is allowed. Declaration public bool AllowJavaScript { get; set; } Property Value Type Description System.Boolean true if JavaScript is allowed; otherwise, false . AllowLearning Gets or sets a value indicating whether the Bot is allowed to store Models in its Master GraphNode . Declaration public bool AllowLearning { get; set; } Property Value Type Description System.Boolean true if Models can be stored in the Master GraphNode ; otherwise, false . AllowMaps Gets or sets a value indicating whether Maps are allowed. Declaration public bool AllowMaps { get; set; } Property Value Type Description System.Boolean true if Maps are allowed; otherwise, false . AllowPublicScriptsInPattern Gets or sets a value indicating whether scripts are allowed in public Patterns . Declaration public bool AllowPublicScriptsInPattern { get; set; } Property Value Type Description System.Boolean true if scripts are allowed in public Patterns ; otherwise, false . AllowRegex Gets or sets a value indicating whether regular expressions are allowed. Declaration public bool AllowRegex { get; set; } Property Value Type Description System.Boolean true if regular expressions are allowed; otherwise, false . AllowRemembering Gets or sets a value indicating whether Models can be stored in User's GraphNode . Declaration public bool AllowRemembering { get; set; } Property Value Type Description System.Boolean true if Models can be stored in the User's GraphNode ; otherwise, false . AllowScriptsInPattern Gets or sets a value indicating whether scripts are allowed within Patterns . Declaration public bool AllowScriptsInPattern { get; set; } Property Value Type Description System.Boolean true if scripts are allowed in Patterns ; otherwise, false . AllowSets Gets or sets a value indicating whether Sets are allowed. Declaration public bool AllowSets { get; set; } Property Value Type Description System.Boolean true if sets are allowed; otherwise, false . AllowStacking Gets or sets a value indicating whether Stack frames should be stored. Declaration public bool AllowStacking { get; set; } Property Value Type Description System.Boolean true if Stack frames are to be stored; otherwise, false . BotID Gets or sets the unique ID for the Bot. Declaration public string BotID { get; set; } Property Value Type Description System.String BotTimeout Gets or sets the maximum time span beyond which a chat request is timed out. Declaration public TimeSpan BotTimeout { get; set; } Property Value Type Description System.TimeSpan Remarks The default value is 1 Minute CacheManager Gets or sets the cache manager. Declaration public ICacheManager CacheManager { get; set; } Property Value Type Description ICacheManager Any valid implementation of ICacheManager. Encoding Gets or sets the encoding to be used by this Bot for textual transformations. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding The encoding. Remarks The default value is UTF-8 encoding. FilterLimit Gets or sets the maximum number of Filter elements that can be stored in the Bot's FilterCollection Declaration public int FilterLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. HasParent Gets a value indicating whether the bot has a parent. Declaration public bool HasParent { get; } Property Value Type Description System.Boolean true if this bot has a parent; otherwise, false . LicenseKey Gets or sets the license key. Declaration public string LicenseKey { get; set; } Property Value Type Description System.String The license key. MapLimit Gets or sets the maximum number of Map elements that can be stored in the Bot's MapCollection Declaration public int MapLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. MaxBotIdleTime Gets or sets the maximum time span after which a Bot is declared idle. Declaration public TimeSpan MaxBotIdleTime { get; set; } Property Value Type Description System.TimeSpan Remarks The default value is 31 Days. MaxUserIdleTime Gets or sets the maximum user idle time after which the user history begins to clear up. Declaration public TimeSpan MaxUserIdleTime { get; set; } Property Value Type Description System.TimeSpan The maximum user idle time. Remarks The default value is 31 Days. ModelLimit Gets or sets the maximum number of Models that can be stored in the Bot's Master GraphNode Declaration public int ModelLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. ParentBot Gets or sets the parent bot. Declaration public SimlBot ParentBot { get; set; } Property Value Type Description SimlBot The parent bot. RegexLimit Gets or sets the maximum number of regular expressions that be stored in the Bot's RegexCollection Declaration public int RegexLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. SetLimit Gets or sets the maximum number of Set elements that can be stored by the Bot's SetCollection Declaration public int SetLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. SplitterLimit Gets or sets the maximum number of Splitter elements that be stored in the Bot's TokenizerCollection Declaration public int SplitterLimit { get; set; } Property Value Type Description System.Int32 System.Int32.MaxValue by default. StoreExamples Gets or sets a value indicating whether to store Examples. Declaration public bool StoreExamples { get; set; } Property Value Type Description System.Boolean true if atomic patterns are to be stored; otherwise, false . Remarks Default value is true . StorePatternExamples Gets or sets a value indicating whether to store atomic patterns as examples. Declaration public bool StorePatternExamples { get; set; } Property Value Type Description System.Boolean StoreVocabulary Gets or sets a value indicating whether vocabulary should be stored. Declaration public bool StoreVocabulary { get; set; } Property Value Type Description System.Boolean true if vocabulary is stored; otherwise, false . UseParentFilters Gets or sets a value indicating whether parent's Filters are accessible. Declaration public bool UseParentFilters { get; set; } Property Value Type Description System.Boolean true if parent's Filters can be used; otherwise, false . UseParentMaps Gets or sets a value indicating whether parent's Maps accessible. Declaration public bool UseParentMaps { get; set; } Property Value Type Description System.Boolean true if parent's Maps are accessible; otherwise, false . UseParentPhrases Gets or sets a value indicating whether parent's phrase collection is accessible. Declaration public bool UseParentPhrases { get; set; } Property Value Type Description System.Boolean true if parent's phrase collection is accessible.; otherwise, false . UseParentRandoms Gets or sets a value indicating whether parent's random collection is accessible. Declaration public bool UseParentRandoms { get; set; } Property Value Type Description System.Boolean true if parent's random collection is accessible; otherwise, false . UseParentRegex Gets or sets a value indicating whether parent's regular expressions are accessible. Declaration public bool UseParentRegex { get; set; } Property Value Type Description System.Boolean true if parent's regular expressions are accessible; otherwise, false . UseParentSets Gets or sets a value indicating whether parent's Sets are accessible. Declaration public bool UseParentSets { get; set; } Property Value Type Description System.Boolean true if parent's Sets are accessible; otherwise, false . UseParentSplitters Gets or sets a value indicating whether to use Parent's splitters. Declaration public bool UseParentSplitters { get; set; } Property Value Type Description System.Boolean true if parent splitters are to be used; otherwise, false . UserHistoryLimit Gets or sets the number of Chat requests and Chat results to be stored in user history. Declaration public int UserHistoryLimit { get; set; } Property Value Type Description System.Int32"
  },
  "api/Syn.Bot.Siml.BotResponse.html": {
    "href": "api/Syn.Bot.Siml.BotResponse.html",
    "title": "Class BotResponse - Syn Developer Network",
    "keywords": "Class BotResponse Represents a response generated after a GraphNode has successfully been evaluated. Inheritance System.Object BotResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class BotResponse Fields Empty Returns an Empty Response. This field is read-only. Declaration public static readonly BotResponse Empty Field Value Type Description BotResponse Properties Bot Declaration public SimlBot Bot { get; set; } Property Value Type Description SimlBot Concept Gets or sets the Concept for this Response. Declaration public string Concept { get; set; } Property Value Type Description System.String ConceptRepeat Gets or sets a value indicating whether the Concept is repeatable. Declaration public bool ConceptRepeat { get; set; } Property Value Type Description System.Boolean true if Concept is repeatable; otherwise, false . ConceptType Gets or sets the ConceptType for this Response. Declaration public ConceptType ConceptType { get; set; } Property Value Type Description ConceptType Element Gets the XML element that represents this response. Declaration public XElement Element { get; } Property Value Type Description System.Xml.Linq.XElement HasLabel Gets a value indicating if this Response has a Label. Declaration public bool HasLabel { get; } Property Value Type Description System.Boolean IsEmpty Gets a value indicating if this Response is Empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Label Gets or sets the Label for this Response. Declaration public string Label { get; set; } Property Value Type Description System.String OutputMessage Gets the Output Sentence for this Response. Declaration public string OutputMessage { get; set; } Property Value Type Description System.String Rank Gets the rank of this BotResponse Declaration public ResponseRank Rank { get; } Property Value Type Description ResponseRank The response rank. Methods Clone() Creates a object Clone of this BotResponse . Declaration public BotResponse Clone() Returns Type Description BotResponse"
  },
  "api/Syn.Bot.Siml.BotSettings.html": {
    "href": "api/Syn.Bot.Siml.BotSettings.html",
    "title": "Class BotSettings - Syn Developer Network",
    "keywords": "Class BotSettings A Settings class derived for storing Bot related variables. Inheritance System.Object Settings CommonSettings BotSettings Inherited Members CommonSettings.DefaultValue CommonSettings.UndefinedValue CommonSettings.GetValue(String) CommonSettings.Load(XDocument) CommonSettings.Load(XElement) CommonSettings.GetDocument() Settings.Bind(Settings) Settings.Load(Settings) Settings.Add(String, Func<String>) Settings.Add(IVariable) Settings.Remove(String) Settings.Clear() Settings.Contains(IVariable) Settings.CopyTo(IVariable[], Int32) Settings.Remove(IVariable) Settings.GetEnumerator() Settings.IEnumerable.GetEnumerator() Settings.TryGetValue(String, String) Settings.Contains(String) Settings.Variables Settings.Count Settings.IsReadOnly Settings.Name Settings.Location Settings.Item[String] Settings.SettingsChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class BotSettings : CommonSettings, ICollection<IVariable>, IEnumerable<IVariable>, IEnumerable Constructors BotSettings() Initializes a new instance of the BotSettings class. Declaration public BotSettings() Extension Methods SettingsExtensions.ApplyToProperties(Settings, Object, String[]) SettingsExtensions.GetDocument(Settings)"
  },
  "api/Syn.Bot.Siml.BotStats.html": {
    "href": "api/Syn.Bot.Siml.BotStats.html",
    "title": "Class BotStats - Syn Developer Network",
    "keywords": "Class BotStats A container class used to store Bot statistics. Inheritance System.Object BotStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class BotStats Properties BindingTime Declaration public double BindingTime { get; } Property Value Type Description System.Double ConceptCount Total number of Concepts known. Declaration public int ConceptCount { get; } Property Value Type Description System.Int32 FilterationTime Gets the average filtration time in milliseconds. Declaration public double FilterationTime { get; } Property Value Type Description System.Double IdleTime Gets a value indicating how long the Bot was Idle. Declaration public TimeSpan IdleTime { get; } Property Value Type Description System.TimeSpan Interactions Gets the total number of Chat requests this Bot has processed. Declaration public int Interactions { get; } Property Value Type Description System.Int32 LoadTime Gets the time in Milliseconds taken to load the Bot Package. Declaration public double LoadTime { get; } Property Value Type Description System.Double MappingTime Gets the average mapping time in milliseconds. Declaration public double MappingTime { get; } Property Value Type Description System.Double ModelCount Total number of Models known. Declaration public int ModelCount { get; } Property Value Type Description System.Int32 PrivateConceptCount Total number of Concept Concepts known. Declaration public int PrivateConceptCount { get; } Property Value Type Description System.Int32 PublicConceptCount Total number of Public Concepts known. Declaration public int PublicConceptCount { get; } Property Value Type Description System.Int32 SplittingTime Gets the average time taken in milliseconds to split user message into multiple sentences. Declaration public double SplittingTime { get; } Property Value Type Description System.Double SuggestionTime Declaration public double SuggestionTime { get; } Property Value Type Description System.Double Methods ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.BotUser.html": {
    "href": "api/Syn.Bot.Siml.BotUser.html",
    "title": "Class BotUser - Syn Developer Network",
    "keywords": "Class BotUser Represents an entity that interacts with SimlBot Inheritance System.Object User BotUser Inherited Members User.ID System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class BotUser : User Properties Bot Gets the bot associated with this user. Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot Emotion Gets or sets the emotional state for the user. Declaration public Emotion Emotion { get; set; } Property Value Type Description Emotion HasHistory Gets a value indicating whether this user has a chat history. Declaration public bool HasHistory { get; } Property Value Type Description System.Boolean true if this user has a chat history; otherwise, false . IdleTime Gets the idle time for the user. Declaration public TimeSpan IdleTime { get; } Property Value Type Description System.TimeSpan IsIdle Gets a value indicating whether this user is idle. Declaration public bool IsIdle { get; } Property Value Type Description System.Boolean true if this user is idle; otherwise, false . IsMain Gets a value indicating whether this instance is MainUser . Declaration public override bool IsMain { get; } Property Value Type Description System.Boolean true if this instance is MainUser ; otherwise, false . Overrides User.IsMain LastChatRequest Gets the last chat request. Declaration public ChatRequest LastChatRequest { get; } Property Value Type Description ChatRequest LastChatResult Gets the last chat result. Declaration public ChatResult LastChatResult { get; } Property Value Type Description ChatResult MiniGraph Gets the mini graph used to store user related Models. Declaration public GraphNode MiniGraph { get; } Property Value Type Description GraphNode Requests Gets a list of ChatRequest s made by this user. Declaration public List<ChatRequest> Requests { get; } Property Value Type Description System.Collections.Generic.List < ChatRequest > Results Gets the previous results stored. Declaration public List<ChatResult> Results { get; } Property Value Type Description System.Collections.Generic.List < ChatResult > Settings Gets the settings that contains user related variables. Declaration public UserSettings Settings { get; } Property Value Type Description UserSettings Vars Gets the variables that are stored temporarily during a chat session. Declaration public VarSettings Vars { get; } Property Value Type Description VarSettings Methods Equals(Object) Returns a value that determines if the specified object is equal to this BotUser object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) Events EmotionChanged Occurs when the emotion is this user changes. Declaration public event EventHandler<EmotionChangedEventArgs> EmotionChanged Event Type Type Description System.EventHandler < EmotionChangedEventArgs > ResponseReceived Occurs when an automated or timed response is generated by the Graph Processor. Declaration public event EventHandler<ResponseReceivedEventArgs> ResponseReceived Event Type Type Description System.EventHandler < ResponseReceivedEventArgs >"
  },
  "api/Syn.Bot.Siml.ChatRequest.html": {
    "href": "api/Syn.Bot.Siml.ChatRequest.html",
    "title": "Class ChatRequest - Syn Developer Network",
    "keywords": "Class ChatRequest Represents a Chat Request made to SimlBot . Inheritance System.Object ChatRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class ChatRequest Constructors ChatRequest(String, BotUser) Initializes a new instance of the ChatRequest class. Declaration public ChatRequest(string userMessage, BotUser botUser) Parameters Type Name Description System.String userMessage The user message. BotUser botUser The bot user. Properties Bot Gets the bot to which the chat request is to be made. Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot ExampleResult Declaration public ExampleResult ExampleResult { get; } Property Value Type Description ExampleResult InputList Gets the List of Splitted Queries based on User Message. Declaration public List<QueryTree> InputList { get; } Property Value Type Description System.Collections.Generic.List < QueryTree > Type Gets the type of chat request. Declaration public MessageType Type { get; } Property Value Type Description MessageType User Gets the user associated with this chat request. Declaration public BotUser User { get; } Property Value Type Description BotUser UserMessage Gets the raw user request message Declaration public string UserMessage { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.ChatResult.html": {
    "href": "api/Syn.Bot.Siml.ChatResult.html",
    "title": "Class ChatResult - Syn Developer Network",
    "keywords": "Class ChatResult Represents a Bot message that is generated after a ChatRequest is made. Inheritance System.Object ChatResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class ChatResult Properties BotEmotion Gets the Bot emotion associated with this ChatResult Declaration public Emotion BotEmotion { get; } Property Value Type Description Emotion BotMessage Gets the entire Message the Bot generated for a chat request it received. Declaration public string BotMessage { get; } Property Value Type Description System.String Contract Gets the contract object that can be easily serialized to any Data-Interchange format. Declaration public ChatResultContract Contract { get; } Property Value Type Description ChatResultContract Data Gets or sets the DataCollection stored in this ChatResult . Declaration public DataCollection Data { get; set; } Property Value Type Description DataCollection The data. Hint Gets or sets the last hint for next user message the Bot expects. Declaration public string Hint { get; set; } Property Value Type Description System.String Label Gets the last Label that was set for a BotResponse Declaration public string Label { get; set; } Property Value Type Description System.String LastResponse Gets the last Response added to this Result. Declaration public BotResponse LastResponse { get; } Property Value Type Description BotResponse Precision Gets the result precision in the range [0,1] based on the number precision-tokens matches. Declaration public double Precision { get; } Property Value Type Description System.Double ReadTime Gets the 'estimated' time in seconds required for a human to read this result. Declaration public double ReadTime { get; } Property Value Type Description System.Double The human read time. Responses Gets or sets the responses. Declaration public List<BotResponse> Responses { get; set; } Property Value Type Description System.Collections.Generic.List < BotResponse > The responses. Stack Gets the stack frames for this ChatResult Declaration public List<StackFrame> Stack { get; } Property Value Type Description System.Collections.Generic.List < StackFrame > Stats Gets the time taken to process the Result in Milliseconds. Declaration public SpeedStats Stats { get; set; } Property Value Type Description SpeedStats Success Gets a value indicating whether this ChatResult has a BotResponse . Declaration public bool Success { get; } Property Value Type Description System.Boolean true if successful; otherwise, false . TraversedNode Gets the search graph. Declaration public TraversedNode TraversedNode { get; } Property Value Type Description TraversedNode The search graph. Type The type of Result generated. Declaration public ResultType Type { get; set; } Property Value Type Description ResultType User Gets the BotUser for whom the ChatResult was generated. Declaration public BotUser User { get; } Property Value Type Description BotUser The user. UserEmotion Gets the User emotion associated with this ChatResult Declaration public Emotion UserEmotion { get; } Property Value Type Description Emotion Methods GetSuggestions() Gets suggestions for the ChatRequest attached to this ChatResult . Declaration public Suggestion GetSuggestions() Returns Type Description Suggestion Remarks In case the response is generated by a SearchResult then the value of Score is returned. ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.Collections.MapItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.MapItem.html",
    "title": "Class MapItem - Syn Developer Network",
    "keywords": "Class MapItem Default implementation of IMapItem interface. Inheritance System.Object MapItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class MapItem : IMapItem Constructors MapItem(String, String) Declaration public MapItem(string content, string value) Parameters Type Name Description System.String content System.String value Properties Content Declaration public string Content { get; set; } Property Value Type Description System.String Implements IMapItem.Content Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements IMapItem.Value"
  },
  "api/Syn.Bot.Siml.Collections.ParserCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.ParserCollection.html",
    "title": "Class ParserCollection - Syn Developer Network",
    "keywords": "Class ParserCollection Represents a collection of IParser . Inheritance System.Object ParserCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class ParserCollection : ICollection<IParser>, IEnumerable<IParser>, IEnumerable Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[XName] Gets the IParser with the specified name. Declaration public IParser this[XName name] { get; } Parameters Type Name Description System.Xml.Linq.XName name The name. Property Value Type Description IParser The IParser . Methods Add(IParser) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(IParser item) Parameters Type Name Description IParser item The object to add to the System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Add(T) AddRange(IParser[]) Adds the range. Declaration public void AddRange(params IParser[] handlers) Parameters Type Name Description IParser [] handlers The handlers. Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IParser) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(IParser item) Parameters Type Name Description IParser item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(XName) Determines whether this collection contains a parser for the specified tag name. Declaration public bool Contains(XName tagName) Parameters Type Name Description System.Xml.Linq.XName tagName Name of the tag. Returns Type Description System.Boolean CopyTo(IParser[], Int32) Copies to. Declaration public void CopyTo(IParser[] array, int arrayIndex) Parameters Type Name Description IParser [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) Exceptions Type Condition System.NotImplementedException GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IParser> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IParser > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IParser) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(IParser item) Parameters Type Name Description IParser item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.RandomCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.RandomCollection.html",
    "title": "Class RandomCollection - Syn Developer Network",
    "keywords": "Class RandomCollection Inheritance System.Object RandomCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class RandomCollection Constructors RandomCollection(SimlBot) Declaration public RandomCollection(SimlBot mainBot) Parameters Type Name Description SimlBot mainBot Properties Bot Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot Methods AddPhrase(XElement) Declaration public void AddPhrase(XElement phraseElement) Parameters Type Name Description System.Xml.Linq.XElement phraseElement AddRandom(XElement) Declaration public void AddRandom(XElement randomElement) Parameters Type Name Description System.Xml.Linq.XElement randomElement ContainsPhrase(String) Declaration public bool ContainsPhrase(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean ContainsRandom(String) Declaration public bool ContainsRandom(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean GetPhrase(String) Declaration public XElement GetPhrase(string phraseName) Parameters Type Name Description System.String phraseName Returns Type Description System.Xml.Linq.XElement GetRandom(String) Declaration public XElement GetRandom(string randomName) Parameters Type Name Description System.String randomName Returns Type Description System.Xml.Linq.XElement"
  },
  "api/Syn.Bot.Siml.Collections.RegexCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.RegexCollection.html",
    "title": "Class RegexCollection - Syn Developer Network",
    "keywords": "Class RegexCollection Class that contains all Regular Expressions created by the Developer. Inheritance System.Object RegexCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class RegexCollection : ICollection<IRegexItem>, IEnumerable<IRegexItem>, IEnumerable Constructors RegexCollection(SimlBot) Initializes a new instance of the RegexCollection class. Declaration public RegexCollection(SimlBot bot) Parameters Type Name Description SimlBot bot The bot. Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsOverridable Declaration public bool IsOverridable { get; set; } Property Value Type Description System.Boolean IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public IRegexItem this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description IRegexItem Methods Add(IRegexItem) Declaration public void Add(IRegexItem item) Parameters Type Name Description IRegexItem item Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String, Regex) Declaration public void Add(string regexName, Regex regex) Parameters Type Name Description System.String regexName System.Text.RegularExpressions.Regex regex Add(XElement) Declaration public void Add(XElement regexElement) Parameters Type Name Description System.Xml.Linq.XElement regexElement Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IRegexItem) Declaration public bool Contains(IRegexItem item) Parameters Type Name Description IRegexItem item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string regexName) Parameters Type Name Description System.String regexName Returns Type Description System.Boolean CopyTo(IRegexItem[], Int32) Declaration public void CopyTo(IRegexItem[] array, int arrayIndex) Parameters Type Name Description IRegexItem [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) Denormalize(RegexNormalized, String) Declaration public string Denormalize(RegexNormalized normalizedRegex, string message) Parameters Type Name Description RegexNormalized normalizedRegex System.String message Returns Type Description System.String GetEnumerator() Declaration public IEnumerator<IRegexItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IRegexItem > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetRegex(String) Declaration public Regex GetRegex(string regexName) Parameters Type Name Description System.String regexName Returns Type Description System.Text.RegularExpressions.Regex Normalize(String) Declaration public RegexNormalized Normalize(string message) Parameters Type Name Description System.String message Returns Type Description RegexNormalized Remove(IRegexItem) Declaration public bool Remove(IRegexItem item) Parameters Type Name Description IRegexItem item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.RegexItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.RegexItem.html",
    "title": "Class RegexItem - Syn Developer Network",
    "keywords": "Class RegexItem Inheritance System.Object RegexItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class RegexItem : IRegexItem Constructors RegexItem(String, Regex) Declaration public RegexItem(string name, Regex regex) Parameters Type Name Description System.String name System.Text.RegularExpressions.Regex regex Properties IsStrict Declaration public bool IsStrict { get; set; } Property Value Type Description System.Boolean Implements IRegexItem.IsStrict Name Declaration public string Name { get; } Property Value Type Description System.String Implements IRegexItem.Name Regex Declaration public Regex Regex { get; set; } Property Value Type Description System.Text.RegularExpressions.Regex Implements IRegexItem.Regex"
  },
  "api/Syn.Bot.Siml.Collections.SetCollection.html": {
    "href": "api/Syn.Bot.Siml.Collections.SetCollection.html",
    "title": "Class SetCollection - Syn Developer Network",
    "keywords": "Class SetCollection Represents a collection of SIML SetItem . Inheritance System.Object SetCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class SetCollection : ICollection<ISet>, IEnumerable<ISet>, IEnumerable Constructors SetCollection(SimlBot) Initializes a new instance of SetCollection class. Declaration public SetCollection(SimlBot bot) Parameters Type Name Description SimlBot bot Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsOverridable Gets a value indicating if an already existing SetItem can be replaced by a new SetItem . Declaration public bool IsOverridable { get; } Property Value Type Description System.Boolean IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Gets a SetItem with the specified name. Declaration public ISet this[string name] { get; } Parameters Type Name Description System.String name The name of the SetItem . Property Value Type Description ISet Methods Add(ISet) Adds the specified SetItem to this collection. Declaration public void Add(ISet setItem) Parameters Type Name Description ISet setItem The SetItem to add. Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String, IEnumerable<String>) Adds a new set with the specified name and items. Declaration public void Add(string setName, IEnumerable<string> words) Parameters Type Name Description System.String setName Name of the set. System.Collections.Generic.IEnumerable < System.String > words The set items. Add(XElement) Parses and adds the specified System.Xml.Linq.XElement as SetItem . Declaration public void Add(XElement setElement) Parameters Type Name Description System.Xml.Linq.XElement setElement The set element. Add<T>(String) Declaration public void Add<T>(string setName = \"\")where T : struct Parameters Type Name Description System.String setName Type Parameters Name Description T Clear() Clears this collection. Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ISet) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(ISet item) Parameters Type Name Description ISet item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Determines whether a SetItem with the specified name exists. Declaration public bool Contains(string setName) Parameters Type Name Description System.String setName Name of the SetItem . Returns Type Description System.Boolean ContainsWord(String) Determines whether the specified set word exists in any of the Sets. Declaration public bool ContainsWord(string word) Parameters Type Name Description System.String word The set word. Returns Type Description System.Boolean ContainsWord(String, out String) Declaration public bool ContainsWord(string word, out string setName) Parameters Type Name Description System.String word System.String setName Returns Type Description System.Boolean CopyTo(ISet[], Int32) Copies to. Declaration public void CopyTo(ISet[] array, int arrayIndex) Parameters Type Name Description ISet [] array The array. System.Int32 arrayIndex Index of the array. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetDocument() Gets an SIML document that represents this SetCollection . Declaration public XDocument GetDocument() Returns Type Description System.Xml.Linq.XDocument GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<ISet> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ISet > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetMatchString(ChatRequest, String, String, Boolean) Gets the match string. Declaration public string GetMatchString(ChatRequest request, string setName, string sentence, bool looseSearch = false) Parameters Type Name Description ChatRequest request The request. System.String setName Name of the set. System.String sentence The sentence. System.Boolean looseSearch Returns Type Description System.String Remove(ISet) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(ISet item) Parameters Type Name Description ISet item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Removes the specified set name. Declaration public bool Remove(string setName) Parameters Type Name Description System.String setName Name of the set. Returns Type Description System.Boolean TryGetValue(String, out ISet) Declaration public bool TryGetValue(string setName, out ISet outValueSet) Parameters Type Name Description System.String setName ISet outValueSet Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Siml.Collections.SetItem.html": {
    "href": "api/Syn.Bot.Siml.Collections.SetItem.html",
    "title": "Class SetItem - Syn Developer Network",
    "keywords": "Class SetItem Inheritance System.Object SetItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class SetItem : ISet Constructors SetItem(String) Initializes a new instance of the SetItem class. Declaration public SetItem(string name) Parameters Type Name Description System.String name The name of this SetItem . Properties Name Gets or sets the unique name of this SetItem . Declaration public string Name { get; } Property Value Type Description System.String The name of this SetItem Implements ISet.Name Methods Add(String[]) Declaration public void Add(params string[] words) Parameters Type Name Description System.String [] words AddRange(IEnumerable<String>) Declaration public void AddRange(IEnumerable<string> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > collection Contains(String, String) Declaration public virtual bool Contains(string value, string parameter) Parameters Type Name Description System.String value System.String parameter Returns Type Description System.Boolean Implements ISet.Contains(String, String) GetValues(String) Declaration public IEnumerable<string> GetValues(string parameter = \"\") Parameters Type Name Description System.String parameter Returns Type Description System.Collections.Generic.IEnumerable < System.String > Implements ISet.GetValues(String)"
  },
  "api/Syn.Bot.Siml.Search.html": {
    "href": "api/Syn.Bot.Siml.Search.html",
    "title": "Namespace Syn.Bot.Siml.Search - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Search Classes SearchEngine Default implementation of ISearchEngine interface. SearchItem SearchQuery SearchResult Represents the returned value of a search result. SearchToken Interfaces ISearchEngine Interface for Search Engine mechanism. Enums SearchMode SearchTokenType"
  },
  "api/Syn.Bot.Siml.Serialization.ChatResultContract.html": {
    "href": "api/Syn.Bot.Siml.Serialization.ChatResultContract.html",
    "title": "Class ChatResultContract - Syn Developer Network",
    "keywords": "Class ChatResultContract Inheritance System.Object ChatResultContract Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Serialization Assembly :Syn.Bot.dll Syntax [DataContract] public class ChatResultContract Properties BotMessage Declaration [DataMember] public string BotMessage { get; set; } Property Value Type Description System.String Hint Declaration [DataMember] public string Hint { get; set; } Property Value Type Description System.String HumanReadTime Declaration [DataMember] public float HumanReadTime { get; set; } Property Value Type Description System.Single Precision Declaration [DataMember] public double Precision { get; set; } Property Value Type Description System.Double Success Declaration [DataMember] public bool Success { get; set; } Property Value Type Description System.Boolean User Declaration [DataMember] public string User { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynProductType.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynProductType.html",
    "title": "Class SynProductType - Syn Developer Network",
    "keywords": "Class SynProductType Summary description for SynProductType Inheritance System.Object SynProductType Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class SynProductType Fields SynEngine Declaration public const string SynEngine = \"Syn Engine\" Field Value Type Description System.String SynVirtualAssistant Declaration public const string SynVirtualAssistant = \"Syn Virtual Assistant\" Field Value Type Description System.String SynWebAssistant Declaration public const string SynWebAssistant = \"Syn Web Assistant\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynSubscription.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynSubscription.html",
    "title": "Class SynSubscription - Syn Developer Network",
    "keywords": "Class SynSubscription Summary description for SynSubscription Inheritance System.Object SynSubscription Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class SynSubscription Constructors SynSubscription() Declaration public SynSubscription() Properties ApiKey Declaration public string ApiKey { get; set; } Property Value Type Description System.String Committed Declaration public bool Committed { get; set; } Property Value Type Description System.Boolean Description Declaration public string Description { get; set; } Property Value Type Description System.String End Declaration public DateTime End { get; set; } Property Value Type Description System.DateTime IsActive Declaration public bool IsActive { get; } Property Value Type Description System.Boolean Product Declaration public string Product { get; set; } Property Value Type Description System.String Progress Declaration public int Progress { get; set; } Property Value Type Description System.Int32 Secret Declaration public string Secret { get; set; } Property Value Type Description System.String Start Declaration public DateTime Start { get; set; } Property Value Type Description System.DateTime Type Declaration public string Type { get; set; } Property Value Type Description System.String Url Declaration public string Url { get; set; } Property Value Type Description System.String Methods FromXElement(XElement) Declaration public static SynSubscription FromXElement(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description SynSubscription ToXElement() Declaration public XElement ToXElement() Returns Type Description System.Xml.Linq.XElement"
  },
  "api/Syn.Bot.Utility.Classes.SynUser.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynUser.html",
    "title": "Class SynUser - Syn Developer Network",
    "keywords": "Class SynUser Inheritance System.Object SynUser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class SynUser Constructors SynUser() Declaration public SynUser() Properties Company Declaration public string Company { get; set; } Property Value Type Description System.String Country Declaration public string Country { get; set; } Property Value Type Description System.String Email Declaration public string Email { get; set; } Property Value Type Description System.String FirstName Declaration public string FirstName { get; set; } Property Value Type Description System.String FullName Declaration public string FullName { get; } Property Value Type Description System.String Guid Declaration public string Guid { get; } Property Value Type Description System.String IsActivated Declaration public bool IsActivated { get; set; } Property Value Type Description System.Boolean IsCommitted Declaration public bool IsCommitted { get; set; } Property Value Type Description System.Boolean LastName Declaration public string LastName { get; set; } Property Value Type Description System.String Password Declaration public string Password { get; set; } Property Value Type Description System.String Subscriptions Declaration public List<SynSubscription> Subscriptions { get; set; } Property Value Type Description System.Collections.Generic.List < SynSubscription > SupportName Declaration public string SupportName { get; set; } Property Value Type Description System.String SupportPassword Declaration public string SupportPassword { get; set; } Property Value Type Description System.String Username Declaration public string Username { get; set; } Property Value Type Description System.String Website Declaration public string Website { get; set; } Property Value Type Description System.String Methods ActiveSubscriptions() Declaration public List<SynSubscription> ActiveSubscriptions() Returns Type Description System.Collections.Generic.List < SynSubscription > FromXml(String) Declaration public static SynUser FromXml(string xmlString) Parameters Type Name Description System.String xmlString Returns Type Description SynUser GetSubscriptionFromUrl(String) Declaration public SynSubscription GetSubscriptionFromUrl(string url) Parameters Type Name Description System.String url Returns Type Description SynSubscription InactiveSubscriptions() Declaration public List<SynSubscription> InactiveSubscriptions() Returns Type Description System.Collections.Generic.List < SynSubscription > ToXml() Declaration public string ToXml() Returns Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.html": {
    "href": "api/Syn.Bot.Utility.Classes.html",
    "title": "Namespace Syn.Bot.Utility.Classes - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Utility.Classes Classes LogItem MultipartParser SynInvoice Summary description for SynInvoice SynLicenseType Summary description for SynLicenseType SynLicenseType.SynChatbot SynLicenseType.SynEngine SynLicenseType.SynVirtualAssistant SynProductType Summary description for SynProductType SynSubscription Summary description for SynSubscription SynUser"
  },
  "api/Syn.Bot.Utility.Contracts.BotInfo.html": {
    "href": "api/Syn.Bot.Utility.Contracts.BotInfo.html",
    "title": "Class BotInfo - Syn Developer Network",
    "keywords": "Class BotInfo Inheritance System.Object BotInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"Settings\", Namespace = \"\")] public class BotInfo Constructors BotInfo() Declaration public BotInfo() Properties ApiKey Declaration [DataMember] public string ApiKey { get; set; } Property Value Type Description System.String Enabled Declaration [DataMember] public bool Enabled { get; set; } Property Value Type Description System.Boolean EndHour Determines the Time when the Agent is no longer visible on the Website. Declaration [DataMember] public int EndHour { get; set; } Property Value Type Description System.Int32 Footer Declaration [DataMember] public string Footer { get; set; } Property Value Type Description System.String FooterLink Declaration [DataMember] public string FooterLink { get; set; } Property Value Type Description System.String Input Declaration [DataMember] public string Input { get; set; } Property Value Type Description System.String InteractionLimit Declaration public int InteractionLimit { get; } Property Value Type Description System.Int32 Intro Declaration [DataMember] public string Intro { get; set; } Property Value Type Description System.String Location Declaration [DataMember] public string Location { get; set; } Property Value Type Description System.String LocationString Declaration public string LocationString { get; } Property Value Type Description System.String MaxFileSize Declaration public int MaxFileSize { get; } Property Value Type Description System.Int32 ModelLimit Declaration public int ModelLimit { get; } Property Value Type Description System.Int32 Name Declaration [DataMember] public string Name { get; set; } Property Value Type Description System.String PrimaryAvatar Declaration [DataMember] public string PrimaryAvatar { get; set; } Property Value Type Description System.String SecondaryAvatar Declaration [DataMember] public string SecondaryAvatar { get; set; } Property Value Type Description System.String Secret Declaration [DataMember] public string Secret { get; set; } Property Value Type Description System.String StartHour Determines the Time when the Agent should be visible on the Website. Declaration [DataMember] public int StartHour { get; set; } Property Value Type Description System.Int32 Template Declaration [DataMember] [JsonConverter(typeof (StringEnumConverter))] public TemplateType Template { get; set; } Property Value Type Description TemplateType Theme Declaration [DataMember] [JsonConverter(typeof (StringEnumConverter))] public ThemeType Theme { get; set; } Property Value Type Description ThemeType Title Declaration [DataMember] public string Title { get; set; } Property Value Type Description System.String Type Declaration [DataMember] [JsonConverter(typeof (StringEnumConverter))] public BotType Type { get; set; } Property Value Type Description BotType Methods FromFile(String) Declaration public static BotInfo FromFile(string filePath) Parameters Type Name Description System.String filePath Returns Type Description BotInfo SaveToFile(String) Declaration public void SaveToFile(string filePath) Parameters Type Name Description System.String filePath"
  },
  "api/Syn.Bot.Utility.Contracts.BotType.html": {
    "href": "api/Syn.Bot.Utility.Contracts.BotType.html",
    "title": "Enum BotType - Syn Developer Network",
    "keywords": "Enum BotType Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax public enum BotType Fields Name Description Basic Enterprise Standard Ultimate"
  },
  "api/Syn.Bot.Utility.Contracts.ChatItem.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ChatItem.html",
    "title": "Class ChatItem - Syn Developer Network",
    "keywords": "Class ChatItem Inheritance System.Object ChatItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"Chat\", Namespace = \"\")] public class ChatItem Properties Bot Declaration [DataMember] public string Bot { get; set; } Property Value Type Description System.String BotMessage Declaration [DataMember] public string BotMessage { get; set; } Property Value Type Description System.String BotTime Declaration [DataMember] public string BotTime { get; set; } Property Value Type Description System.String Session Declaration [DataMember] public string Session { get; set; } Property Value Type Description System.String Url Declaration [DataMember] public string Url { get; set; } Property Value Type Description System.String User Declaration [DataMember] public string User { get; set; } Property Value Type Description System.String UserMessage Declaration [DataMember] public string UserMessage { get; set; } Property Value Type Description System.String UserTime Declaration [DataMember] public string UserTime { get; set; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Utility.Contracts.ResultContract.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ResultContract.html",
    "title": "Class ResultContract - Syn Developer Network",
    "keywords": "Class ResultContract Inheritance System.Object ResultContract Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"Result\", Namespace = \"\")] public class ResultContract Properties Hint Declaration [DataMember] public string Hint { get; set; } Property Value Type Description System.String Response Declaration [DataMember] public string Response { get; set; } Property Value Type Description System.String Success Declaration [DataMember] public bool Success { get; set; } Property Value Type Description System.Boolean User Declaration [DataMember] public string User { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.EmotionML.Dimension.html": {
    "href": "api/Syn.EmotionML.Dimension.html",
    "title": "Class Dimension - Syn Developer Network",
    "keywords": "Class Dimension A class that describes an emotion or a related state according to an emotion dimension vocabulary. Inheritance System.Object EmotionRelatedState Dimension Inherited Members EmotionRelatedState.Name EmotionRelatedState.Confidence System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Dimension : EmotionRelatedState Constructors Dimension(String) Initializes a new instance of the Dimension class. Declaration public Dimension(string name) Parameters Type Name Description System.String name The name of the dimension, which must be contained in the declared dimension vocabulary. Dimension(String, Nullable<Double>) Initializes a new instance of the Dimension class. Declaration public Dimension(string name, double ? value) Parameters Type Name Description System.String name The name of the dimension, which must be contained in the declared dimension vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. Dimension(String, Nullable<Double>, Nullable<Double>) Initializes a new instance of the Dimension class. Declaration public Dimension(string name, double ? value, double ? confidence) Parameters Type Name Description System.String name The name of the dimension, which must be contained in the declared dimension vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. System.Nullable < System.Double > confidence The degree of confidence or probability that the emotion representation carrying this attribute is correct. Properties DimensionFsre Gets the FSRE dimensions URI Declaration public static string DimensionFsre { get; } Property Value Type Description System.String DimensionIntensity Gets the intensity dimension URI Declaration public static string DimensionIntensity { get; } Property Value Type Description System.String DimensionPad Gets the Mehrabian's PAD dimensions URI Declaration public static string DimensionPad { get; } Property Value Type Description System.String Trace Gets or sets a value that represents the time evolution of a dynamic scale value. Declaration public Trace Trace { get; set; } Property Value Type Description Trace Value Gets or sets a static scale value which must be a floating point value from the closed interval [0, 1]. Declaration public double ? Value { get; set; } Property Value Type Description System.Nullable < System.Double >"
  },
  "api/Syn.EmotionML.Emotion.html": {
    "href": "api/Syn.EmotionML.Emotion.html",
    "title": "Class Emotion - Syn Developer Network",
    "keywords": "Class Emotion A class that represents a single emotion annotation. Inheritance System.Object Emotion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Emotion Constructors Emotion() Initializes a new instance of the Emotion class. Declaration public Emotion() Properties ActionTendencies Gets or sets the action tendencies that describe this Emotion or a related state according to an emotion action tendency vocabulary. Declaration public Set ActionTendencies { get; set; } Property Value Type Description Set Appraisals Gets or sets the appraisals that describe this Emotion or a related state according to an emotion appraisal vocabulary. Declaration public Set Appraisals { get; set; } Property Value Type Description Set Categories Gets or sets the categories used to describe this Emotion or a related state using a category. Declaration public Set Categories { get; set; } Property Value Type Description Set Dimensions Gets or sets the dimensions that describe this Emotion or a related state according to an emotion dimension vocabulary. Declaration public Set Dimensions { get; set; } Property Value Type Description Set Duration Gets or sets a value defaulting to zero which specifies the duration of the event in milliseconds. Declaration public long ? Duration { get; set; } Property Value Type Description System.Nullable < System.Int64 > End Gets or sets a value which denotes the starting and ending absolute times. The value must be of type xsd:nonNegativeInteger and should indicate the number of milliseconds since 1 January 1970 00:00:00 GMT. Declaration public long ? End { get; set; } Property Value Type Description System.Nullable < System.Int64 > ExpressedThrough Gets or sets the modality, or list of modalities, through which the emotion is expressed. An attribute of type xsd:NMTOKENS which contains a space delimited set of values from an open set of values including: {gaze, face, head, torso, gesture, leg, voice, text, locomotion, posture, physiology, ...}. Declaration public string ExpressedThrough { get; set; } Property Value Type Description System.String ExpressedThroughCamera Gets the modality which denotes that the emotion is expressed through camera. Declaration public static string ExpressedThroughCamera { get; } Property Value Type Description System.String ExpressedThroughFace Gets the modality which denotes that the emotion is expressed through face. Declaration public static string ExpressedThroughFace { get; } Property Value Type Description System.String ExpressedThroughFacialSkinColor Gets the modality which denotes that the emotion is expressed through facial skin color. Declaration public static string ExpressedThroughFacialSkinColor { get; } Property Value Type Description System.String ExpressedThroughGaze Gets the modality which denotes that the emotion is expressed through gaze. Declaration public static string ExpressedThroughGaze { get; } Property Value Type Description System.String ExpressedThroughGesture Gets the modality which denotes that the emotion is expressed through gesture. Declaration public static string ExpressedThroughGesture { get; } Property Value Type Description System.String ExpressedThroughHead Gets the modality which denotes that the emotion is expressed through head. Declaration public static string ExpressedThroughHead { get; } Property Value Type Description System.String ExpressedThroughLeg Gets the modality which denotes that the emotion is expressed through leg. Declaration public static string ExpressedThroughLeg { get; } Property Value Type Description System.String ExpressedThroughLocomotion Gets the modality which denotes that the emotion is expressed through locomotion. Declaration public static string ExpressedThroughLocomotion { get; } Property Value Type Description System.String ExpressedThroughMicrophone Gets the modality which denotes that the emotion is expressed through microphone. Declaration public static string ExpressedThroughMicrophone { get; } Property Value Type Description System.String ExpressedThroughPhysiology Gets the modality which denotes that the emotion is expressed through physiology. Declaration public static string ExpressedThroughPhysiology { get; } Property Value Type Description System.String ExpressedThroughPosture Gets the modality which denotes that the emotion is expressed through posture. Declaration public static string ExpressedThroughPosture { get; } Property Value Type Description System.String ExpressedThroughText Gets the modality which denotes that the emotion is expressed through text. Declaration public static string ExpressedThroughText { get; } Property Value Type Description System.String ExpressedThroughTorso Gets the modality which denotes that the emotion is expressed through torso. Declaration public static string ExpressedThroughTorso { get; } Property Value Type Description System.String ExpressedThroughVoice Gets the modality which denotes that the emotion is expressed through voice. Declaration public static string ExpressedThroughVoice { get; } Property Value Type Description System.String ID Gets or sets the unique identifier for the emotion Declaration public string ID { get; set; } Property Value Type Description System.String The identifier. Info Gets or sets the Info used to annotate arbitrary metadata.. Declaration public Info Info { get; set; } Property Value Type Description Info OffsetToStart Gets or sets the offset in milliseconds for the start of input from the anchor point designated with TimeRefUri and TimeRefAnchorPoint . Declaration public long ? OffsetToStart { get; set; } Property Value Type Description System.Nullable < System.Int64 > PlainText Gets or sets an arbitrary text value. Declaration public string PlainText { get; set; } Property Value Type Description System.String The plain text. References Gets a list of references that relate this Emotion annotation to the \"rest of the world\". Declaration public List<Reference> References { get; protected set; } Property Value Type Description System.Collections.Generic.List < Reference > Start Gets or sets a value which denotes the starting and ending absolute times. The value must be of type xsd:nonNegativeInteger and should indicate the number of milliseconds since 1 January 1970 00:00:00 GMT. Declaration public long ? Start { get; set; } Property Value Type Description System.Nullable < System.Int64 > TimeRefAnchorPoint Gets or sets a value which indicates whether to measure the time from the start or end of the interval designated with TimeRefUri . Declaration public long ? TimeRefAnchorPoint { get; set; } Property Value Type Description System.Nullable < System.Int64 > TimeRefUri Gets or sets a value which indicates the URI used to anchor the relative timestamp. Declaration public Uri TimeRefUri { get; set; } Property Value Type Description System.Uri The time reference URI. Version Gets or sets the version which indicates the version of the specification to be used for the Emotion and its descendants. Declaration public string Version { get; set; } Property Value Type Description System.String The specification version. Methods AddActionTendency(ActionTendency) Adds an ActionTendency to this Emotion . Declaration public void AddActionTendency(ActionTendency newActionTendency) Parameters Type Name Description ActionTendency newActionTendency The ActionTendency to add. AddAppraisal(Appraisal) Adds an Appraisal to this Emotion . Declaration public void AddAppraisal(Appraisal newAppraisal) Parameters Type Name Description Appraisal newAppraisal AddCategory(Category) Adds a Category to this Emotion . Declaration public void AddCategory(Category newCategory) Parameters Type Name Description Category newCategory The category to add. AddDimension(Dimension) Adds a Dimension to this Emotion . Declaration public void AddDimension(Dimension newDimension) Parameters Type Name Description Dimension newDimension The Dimension to add. AddReference(Reference) Adds a reference URI to this Emotion annotation. Declaration public void AddReference(Reference newReference) Parameters Type Name Description Reference newReference The reference URI to add. GetElement() Gets an System.Xml.Linq.XElement that represents this Emotion . Declaration public XElement GetElement() Returns Type Description System.Xml.Linq.XElement MergeWith(Emotion) Merges this emotion with the specified emotion annnotation. Declaration public void MergeWith(Emotion mergingEmotion) Parameters Type Name Description Emotion mergingEmotion The Emotion to merge with. Parse(EmotionMLDocument, XElement) Loads an Emotion from the specified System.Xml.Linq.XElement . Declaration public static Emotion Parse(EmotionMLDocument emotionmlDocument, XElement element) Parameters Type Name Description EmotionMLDocument emotionmlDocument System.Xml.Linq.XElement element Returns Type Description Emotion RemoveActionTendency(String) Removes an ActionTendency by name Declaration public bool RemoveActionTendency(string actionTendencyName) Parameters Type Name Description System.String actionTendencyName The name of the ActionTendency to remove. Returns Type Description System.Boolean RemoveAppraisal(String) Removes an Appraisal by name. Declaration public bool RemoveAppraisal(string appraisalName) Parameters Type Name Description System.String appraisalName The name of the appraisal to remove. Returns Type Description System.Boolean RemoveCategory(String) Removes a Category by name. Declaration public bool RemoveCategory(string categoryName) Parameters Type Name Description System.String categoryName The name of the category to remove Returns Type Description System.Boolean RemoveDimension(String) Removes a Dimension by name. Declaration public bool RemoveDimension(string dimensionName) Parameters Type Name Description System.String dimensionName The name of the dimension to remove Returns Type Description System.Boolean RemoveReference(Reference) Removes a reference by its value. Declaration public bool RemoveReference(Reference referenceName) Parameters Type Name Description Reference referenceName Returns Type Description System.Boolean"
  },
  "api/Syn.EmotionML.EmotionMLDocument.html": {
    "href": "api/Syn.EmotionML.EmotionMLDocument.html",
    "title": "Class EmotionMLDocument - Syn Developer Network",
    "keywords": "Class EmotionMLDocument A class that represents the root element of an EmotionML document. Inheritance System.Object EmotionMLDocument Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class EmotionMLDocument Constructors EmotionMLDocument() Initializes a new instance of the EmotionMLDocument class. Declaration public EmotionMLDocument() Properties ActionTendencySet Gets or sets the action tendency set for action tendencies Declaration public Uri ActionTendencySet { get; set; } Property Value Type Description System.Uri The action tendency set. AppraisalSet Gets or sets the appraisal set. Declaration public Uri AppraisalSet { get; set; } Property Value Type Description System.Uri The appraisal set. CategorySet category set for categories Declaration public Uri CategorySet { get; set; } Property Value Type Description System.Uri DimensionSet dimension set for dimensions Declaration public Uri DimensionSet { get; set; } Property Value Type Description System.Uri Emotions Gets or sets the list of all the emotions that represents a individual emotion annotation. Declaration public List<Emotion> Emotions { get; set; } Property Value Type Description System.Collections.Generic.List < Emotion > Info Gets or sets the Info element used to annotate arbitrary metadata.. Declaration public Info Info { get; set; } Property Value Type Description Info PlainText Gets or sets an arbitrary plain text value. Declaration public string PlainText { get; set; } Property Value Type Description System.String Version Gets the version of EmotionML specification. Declaration public string Version { get; } Property Value Type Description System.String Vocabularies Gets or sets list of vocabularies that contain the definition of individual Emotion vocabulary. Declaration public List<Vocabulary> Vocabularies { get; set; } Property Value Type Description System.Collections.Generic.List < Vocabulary > The vocabularies. Methods ContainsEmotion(String) Determines whether an emotion with the specified ID exists. Declaration public bool ContainsEmotion(string id) Parameters Type Name Description System.String id The emotion identifier. Returns Type Description System.Boolean GetDocument() Gets an System.Xml.Linq.XDocument that represents this EmotionMLDocument object. Declaration public XDocument GetDocument() Returns Type Description System.Xml.Linq.XDocument GetEmotionById(String) Gets an Emotion by identifier. Declaration public Emotion GetEmotionById(string id) Parameters Type Name Description System.String id The emotion identifier. Returns Type Description Emotion Parse(String) Loads an EmotionMLDocument by parsing the specified System.String . Declaration public static EmotionMLDocument Parse(string emotionML) Parameters Type Name Description System.String emotionML The EmotionML document string. Returns Type Description EmotionMLDocument Parse(XDocument) Loads an EmotionMLDocument from the specified System.Xml.Linq.XDocument . Declaration public static EmotionMLDocument Parse(XDocument emotionMLDocument) Parameters Type Name Description System.Xml.Linq.XDocument emotionMLDocument The EmotionML document. Returns Type Description EmotionMLDocument"
  },
  "api/Syn.EmotionML.EmotionMLException.html": {
    "href": "api/Syn.EmotionML.EmotionMLException.html",
    "title": "Class EmotionMLException - Syn Developer Network",
    "keywords": "Class EmotionMLException Represents errors that occur when an EmotionML element is parsed. Inheritance System.Object System.Exception EmotionMLException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class EmotionMLException : Exception Constructors EmotionMLException() Initializes a new instance of the EmotionMLException class. Declaration public EmotionMLException() EmotionMLException(String) Initializes a new instance of the EmotionMLException class. Declaration public EmotionMLException(string message) Parameters Type Name Description System.String message The message that describes the error. EmotionMLException(String, Exception) Initializes a new instance of the EmotionMLException class. Declaration public EmotionMLException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/Syn.EmotionML.EmotionMLSpecification.html": {
    "href": "api/Syn.EmotionML.EmotionMLSpecification.html",
    "title": "Class EmotionMLSpecification - Syn Developer Network",
    "keywords": "Class EmotionMLSpecification A class that holds static EmotionML constants. Inheritance System.Object EmotionMLSpecification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public sealed class EmotionMLSpecification Properties FileExtension Gets the File-extension of EmotionML Declaration public static string FileExtension { get; } Property Value Type Description System.String KnownTags Gets a list of all the known EmotionML tags. Declaration public static HashSet<string> KnownTags { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > The known tags. MimeType Gets the MIME type of EmotionML Declaration public static string MimeType { get; } Property Value Type Description System.String Namespace Gets the namespace for EmotionML 1.0 specification. Declaration public static XNamespace Namespace { get; } Property Value Type Description System.Xml.Linq.XNamespace Prefix Gets the recommented XML-prefix of EmotionML Declaration public static string Prefix { get; } Property Value Type Description System.String Version Gets the version of highest EmotionML-Recommendation Declaration public static string Version { get; } Property Value Type Description System.String Versions Gets all known EmotionML versions. Declaration public static string[] Versions { get; } Property Value Type Description System.String []"
  },
  "api/Syn.EmotionML.EmotionRelatedState.html": {
    "href": "api/Syn.EmotionML.EmotionRelatedState.html",
    "title": "Class EmotionRelatedState - Syn Developer Network",
    "keywords": "Class EmotionRelatedState An abstract class for the broad range of phenomena intended to be covered by EmotionML specification. Inheritance System.Object EmotionRelatedState ActionTendency Appraisal Category Dimension Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public abstract class EmotionRelatedState Properties Confidence Gets or sets a value which indicates the degree of confidence or probability that the emotion representation carrying this attribute is correct. Declaration public double ? Confidence { get; set; } Property Value Type Description System.Nullable < System.Double > Name Gets or sets a value which describes and or defines an Emotion or an emotion related state. Declaration public string Name { get; set; } Property Value Type Description System.String Trace Gets or sets the Trace value which represents the time evolution of a dynamic scale value. Declaration public Trace Trace { get; set; } Property Value Type Description Trace Value Gets or sets a value which represents a static scale value of the enclosing element. Declaration public double ? Value { get; set; } Property Value Type Description System.Nullable < System.Double >"
  },
  "api/Syn.VA.Interaction.Response.html": {
    "href": "api/Syn.VA.Interaction.Response.html",
    "title": "Class Response - Syn Developer Network",
    "keywords": "Class Response Inheritance System.Object Response Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Interaction Assembly :Syn.VA.dll Syntax public class Response Constructors Response() Declaration public Response() Properties From Declaration public string From { get; set; } Property Value Type Description System.String Hint Gets or sets the hint. Declaration public string Hint { get; set; } Property Value Type Description System.String The next input value expected by the Virtual Assistant. Rank Gets or sets the rank. Declaration public ResponseRank Rank { get; set; } Property Value Type Description ResponseRank The rank of this response. Text Declaration public string Text { get; set; } Property Value Type Description System.String User Gets or sets the user. Declaration public User User { get; set; } Property Value Type Description User The user. Remarks Returns MainUser if the value is not set."
  },
  "api/Syn.VA.Interaction.html": {
    "href": "api/Syn.VA.Interaction.html",
    "title": "Namespace Syn.VA.Interaction - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Interaction Classes InteractionManager A class for managing interations with the VirtualAssistant . Message Response Enums MessageType"
  },
  "api/Syn.VA.Interfaces.IChoiceItem.html": {
    "href": "api/Syn.VA.Interfaces.IChoiceItem.html",
    "title": "Interface IChoiceItem - Syn Developer Network",
    "keywords": "Interface IChoiceItem Namespace :Syn.VA.Interfaces Assembly :Syn.VA.dll Syntax public interface IChoiceItem Properties Category Declaration string Category { get; } Property Value Type Description System.String Value Declaration string Value { get; } Property Value Type Description System.String"
  },
  "api/Syn.VA.Interfaces.IFunctionalVariable.html": {
    "href": "api/Syn.VA.Interfaces.IFunctionalVariable.html",
    "title": "Interface IFunctionalVariable - Syn Developer Network",
    "keywords": "Interface IFunctionalVariable Inherited Members IVariable.Name IVariable.Value IVariable.Owner IVariable.List IVariable.Count IVariable.Add(String) IVariable.Remove(String) IVariable.Contains(String) IVariable.Clear() IVariable.Clone IVariable.Changed Namespace :Syn.VA.Interfaces Assembly :Syn.VA.dll Syntax public interface IFunctionalVariable : IVariable, IVolatile Extension Methods VariableExtensions.GetValue<T>(IVariable) VariableExtensions.GetValue<T>(IVariable, T) VariableExtensions.SetValue<T>(IVariable, T) VariableExtensions.GetValues<T>(IVariable) VariableExtensions.GetTuple<T1, T2>(IVariable, String) VariableExtensions.GetTuple<T1, T2>(IVariable) VariableExtensions.GetTuples<T1, T2>(IVariable) VariableExtensions.Add<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.Remove<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.GetTuple<T1, T2, T3>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3>(IVariable) VariableExtensions.GetTuples<T1, T2, T3>(IVariable) VariableExtensions.Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4>(IVariable) VariableExtensions.Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.ValueAs<T>(IVariable) VariableExtensions.ValueAs<T>(IVariable, T)"
  },
  "api/Syn.VA.Interfaces.IPlugin.html": {
    "href": "api/Syn.VA.Interfaces.IPlugin.html",
    "title": "Interface IPlugin - Syn Developer Network",
    "keywords": "Interface IPlugin Namespace :Syn.VA.Interfaces Assembly :Syn.VA.dll Syntax public interface IPlugin Properties DisplayName Declaration string DisplayName { get; } Property Value Type Description System.String Name Declaration string Name { get; } Property Value Type Description System.String Settings Declaration Settings Settings { get; } Property Value Type Description Settings Methods GetPanel<T>(Object[]) Declaration T GetPanel<T>(params object[] parameters)where T : class Parameters Type Name Description System.Object [] parameters Returns Type Description T Type Parameters Name Description T"
  },
  "api/Syn.VA.Interfaces.IVariable.html": {
    "href": "api/Syn.VA.Interfaces.IVariable.html",
    "title": "Interface IVariable - Syn Developer Network",
    "keywords": "Interface IVariable An interface for SIML variable implementation. Namespace :Syn.VA.Interfaces Assembly :Syn.VA.dll Syntax public interface IVariable Properties Clone Gets the copy of this Variable . Declaration IVariable Clone { get; } Property Value Type Description IVariable Deep copy of Variable Count Gets the number of values held by this variable. Declaration int Count { get; } Property Value Type Description System.Int32 List Gets a list of all the values stored within this Variable Declaration List<string> List { get; } Property Value Type Description System.Collections.Generic.List < System.String > Name Gets the name of this variable. Declaration string Name { get; } Property Value Type Description System.String Owner Gets or sets the Settings that owns this IVariable . Declaration Settings Owner { get; set; } Property Value Type Description Settings The owner Settings Value Gets or sets the main value of this variable. Declaration string Value { get; set; } Property Value Type Description System.String Methods Add(String) Adds the specified value to this Variable Declaration void Add(string value) Parameters Type Name Description System.String value The value to add. Clear() Clears all values of this Variable Declaration void Clear() Contains(String) Determines whether this Variable contains the specified value. Declaration bool Contains(string value) Parameters Type Name Description System.String value The value to search. Returns Type Description System.Boolean true if this Variable contains the specified value; otherwise, false. Remove(String) Removes the specified value from this Variable Declaration bool Remove(string value) Parameters Type Name Description System.String value The value to remove. Returns Type Description System.Boolean Events Changed Occurs when the value of this IVariable is changed. Declaration event EventHandler<VariableChangedEventArgs> Changed Event Type Type Description System.EventHandler < VariableChangedEventArgs > Extension Methods VariableExtensions.GetValue<T>(IVariable) VariableExtensions.GetValue<T>(IVariable, T) VariableExtensions.SetValue<T>(IVariable, T) VariableExtensions.GetValues<T>(IVariable) VariableExtensions.GetTuple<T1, T2>(IVariable, String) VariableExtensions.GetTuple<T1, T2>(IVariable) VariableExtensions.GetTuples<T1, T2>(IVariable) VariableExtensions.Add<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.Remove<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.GetTuple<T1, T2, T3>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3>(IVariable) VariableExtensions.GetTuples<T1, T2, T3>(IVariable) VariableExtensions.Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4>(IVariable) VariableExtensions.Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.ValueAs<T>(IVariable) VariableExtensions.ValueAs<T>(IVariable, T)"
  },
  "api/Syn.VA.Interfaces.IVolatile.html": {
    "href": "api/Syn.VA.Interfaces.IVolatile.html",
    "title": "Interface IVolatile - Syn Developer Network",
    "keywords": "Interface IVolatile Interface to be implemented by volatile classes. Namespace :Syn.VA.Interfaces Assembly :Syn.VA.dll Syntax public interface IVolatile"
  },
  "api/Syn.VA.Interfaces.html": {
    "href": "api/Syn.VA.Interfaces.html",
    "title": "Namespace Syn.VA.Interfaces - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Interfaces Interfaces IChoiceItem IFunctionalVariable IPlugin IVariable An interface for SIML variable implementation. IVolatile Interface to be implemented by volatile classes."
  },
  "api/Syn.VA.Plugin.html": {
    "href": "api/Syn.VA.Plugin.html",
    "title": "Class Plugin - Syn Developer Network",
    "keywords": "Class Plugin Inheritance System.Object Plugin Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public abstract class Plugin : IPlugin Properties DisplayName Declaration public virtual string DisplayName { get; } Property Value Type Description System.String Implements IPlugin.DisplayName Name Declaration public virtual string Name { get; } Property Value Type Description System.String Implements IPlugin.Name Settings Declaration public Settings Settings { get; } Property Value Type Description Settings Implements IPlugin.Settings VA Declaration public VirtualAssistant VA { get; } Property Value Type Description VirtualAssistant Methods GetPanel<T>(Object[]) Declaration public virtual T GetPanel<T>(params object[] parameters)where T : class Parameters Type Name Description System.Object [] parameters Returns Type Description T Type Parameters Name Description T Implements IPlugin.GetPanel<T>(Object[])"
  },
  "api/Syn.VA.ResponseRank.html": {
    "href": "api/Syn.VA.ResponseRank.html",
    "title": "Enum ResponseRank - Syn Developer Network",
    "keywords": "Enum ResponseRank A Rank given to a Response to reflect its priority of reaching a user. Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public enum ResponseRank Fields Name Description High A high ranking response, the value or data of which must be presented to the user. Internal An internal ranking response. The textual data generated by this type of response MUST NOT be displayed to the user. Low A low ranking response. The textual data generated by this type of response isn't important enough to be displayed to the user. Normal A normal ranking response, the textual value of which is usually meant to be displayed to the user."
  },
  "api/Syn.VA.Service.html": {
    "href": "api/Syn.VA.Service.html",
    "title": "Class Service - Syn Developer Network",
    "keywords": "Class Service Inheritance System.Object Service Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class Service Constructors Service(String) Declaration public Service(string serviceId) Parameters Type Name Description System.String serviceId Service(String, Action) Declaration public Service(string serviceId, Action serviceAction) Parameters Type Name Description System.String serviceId System.Action serviceAction Properties Action Gets or sets the service action. Declaration public Action Action { get; set; } Property Value Type Description System.Action Description Gets or sets the description for this service. Declaration public string Description { get; set; } Property Value Type Description System.String Enabled Gets or sets a value indicating whether this Service is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . ID Gets or sets the unique ID of this service. Declaration public string ID { get; } Property Value Type Description System.String Interval Gets or sets the time interval at which this service is to be executed. Declaration public TimeSpan Interval { get; set; } Property Value Type Description System.TimeSpan Stopwatch Gets the Stopwatch used to check if the service can be executed. Declaration public Stopwatch Stopwatch { get; } Property Value Type Description System.Diagnostics.Stopwatch"
  },
  "api/Syn.VA.Settings.html": {
    "href": "api/Syn.VA.Settings.html",
    "title": "Class Settings - Syn Developer Network",
    "keywords": "Class Settings Inheritance System.Object Settings CommonSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class Settings : ICollection<IVariable>, IEnumerable<IVariable>, IEnumerable Constructors Settings(String, String) Initializes a new instance of the Settings class. Declaration public Settings(string name, string location) Parameters Type Name Description System.String name The settings name. System.String location The location where the settings is to be stored. Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public IVariable this[string variableName] { get; } Parameters Type Name Description System.String variableName Property Value Type Description IVariable Location Declaration public string Location { get; } Property Value Type Description System.String Name Declaration public string Name { get; } Property Value Type Description System.String Variables Declaration protected Dictionary<string, IVariable> Variables { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IVariable > Methods Add(IVariable) Declaration public void Add(IVariable variable) Parameters Type Name Description IVariable variable Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String, Func<String>) Adds the specified variable name. Declaration public void Add(string variableName, Func<string> function) Parameters Type Name Description System.String variableName Name of the variable. System.Func < System.String > function The function that returns a string value. Bind(Settings) Binds the current settings to the specified settings. Declaration public void Bind(Settings settings) Parameters Type Name Description Settings settings The settings to bind to. Remarks Bind a Settings to another settings clears its existing variable table. Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IVariable) Declaration public bool Contains(IVariable item) Parameters Type Name Description IVariable item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Determines whether this Settings instance contains the specified variable. Declaration public bool Contains(string variableName) Parameters Type Name Description System.String variableName Name of the variable. Returns Type Description System.Boolean true if specified variable is found; otherwise, false . CopyTo(IVariable[], Int32) Declaration public void CopyTo(IVariable[] array, int arrayIndex) Parameters Type Name Description IVariable [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<IVariable> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IVariable > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetValue(String) Gets the main value of the specified variable. Declaration public virtual string GetValue(string variableName) Parameters Type Name Description System.String variableName Name of the variable. Returns Type Description System.String Value of the variable if it exists otherwise returns the default value. Load(Settings) Loads the specified settings. Declaration public void Load(Settings settings) Parameters Type Name Description Settings settings The settings. Remove(IVariable) Declaration public bool Remove(IVariable item) Parameters Type Name Description IVariable item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Removes the variable with the specified name. Declaration public void Remove(string variableName) Parameters Type Name Description System.String variableName Name of the variable. TryGetValue(String, out String) Tries to get the value of a variable. Declaration public bool TryGetValue(string variableName, out string variableValue) Parameters Type Name Description System.String variableName Name of the variable. System.String variableValue value of the variable. Returns Type Description System.Boolean true if the variable was found; otherwise false. Events SettingsChanged Occurs when a variable is added or removed. Declaration public event EventHandler<SettingsChangedEventArgs> SettingsChanged Event Type Type Description System.EventHandler < SettingsChangedEventArgs > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods SettingsExtensions.ApplyToProperties(Settings, Object, String[]) SettingsExtensions.GetDocument(Settings)"
  },
  "api/Syn.VA.SettingsManager.html": {
    "href": "api/Syn.VA.SettingsManager.html",
    "title": "Class SettingsManager - Syn Developer Network",
    "keywords": "Class SettingsManager Container class that holds Settings instances of components and plugins. Inheritance System.Object SettingsManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class SettingsManager Properties Item[String] Declaration public Settings this[string settingsName] { get; } Parameters Type Name Description System.String settingsName Property Value Type Description Settings Methods Add(Settings) Adds the specified settings. Declaration public void Add(Settings settings) Parameters Type Name Description Settings settings The settings. Contains(String) Determines whether this SettingsManager contains a Settings instance with the specified name. Declaration public bool Contains(string settingsName) Parameters Type Name Description System.String settingsName Name of the settings. Returns Type Description System.Boolean true if a settings with the specified name exists; otherwise, false . Create(String) Creates a new Settings with specified name. Declaration public Settings Create(string name) Parameters Type Name Description System.String name The Settings name. Returns Type Description Settings Create(String, String) Declaration public Settings Create(string name, string fileLocation) Parameters Type Name Description System.String name System.String fileLocation Returns Type Description Settings Events SettingsSaved Occurs when a Settings is serialized to a file. Declaration public event EventHandler<SettingsSavedEventArgs> SettingsSaved Event Type Type Description System.EventHandler < SettingsSavedEventArgs > Extension Methods SettingsManagerExtensions.LoadFromFile(SettingsManager, String) SettingsManagerExtensions.LoadFromDirectory(SettingsManager, String) SettingsManagerExtensions.Save(SettingsManager, Settings, String)"
  },
  "api/Syn.VA.Speech.ISpeechRecognizer.html": {
    "href": "api/Syn.VA.Speech.ISpeechRecognizer.html",
    "title": "Interface ISpeechRecognizer - Syn Developer Network",
    "keywords": "Interface ISpeechRecognizer Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public interface ISpeechRecognizer Properties Name Gets the unique name of the ISpeechRecognizer Declaration string Name { get; } Property Value Type Description System.String The name. Status Declaration RecognizerStatus Status { get; } Property Value Type Description RecognizerStatus Methods LoadChoices(IEnumerable<String>) Declaration void LoadChoices(IEnumerable<string> choiceList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > choiceList Start() Declaration void Start() Stop() Declaration void Stop() Events SpeechRecognized Declaration event EventHandler<UtteranceRecognizedEventArgs> SpeechRecognized Event Type Type Description System.EventHandler < UtteranceRecognizedEventArgs >"
  },
  "api/Syn.Bot.Assistant.Telegram.KeyboardAlignment.html": {
    "href": "api/Syn.Bot.Assistant.Telegram.KeyboardAlignment.html",
    "title": "Enum KeyboardAlignment - Syn Developer Network",
    "keywords": "Enum KeyboardAlignment Namespace :Syn.Bot.Assistant.Telegram Assembly :Syn.Bot.Assistant.dll Syntax public enum KeyboardAlignment Fields Name Description Horizontal Vertical"
  },
  "api/Syn.Bot.Oscova.Entities.CompositeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.CompositeEntity.html",
    "title": "Class CompositeEntity - Syn Developer Network",
    "keywords": "Class CompositeEntity Inheritance System.Object CompositeEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class CompositeEntity : ICompositeEntity, IEntity Constructors CompositeEntity(String, Request) Declaration public CompositeEntity(string compositeType, Request request) Parameters Type Name Description System.String compositeType Request request Properties Children Declaration public EntityCollection Children { get; } Property Value Type Description EntityCollection Implements ICompositeEntity.Children Index Declaration public int Index { get; } Property Value Type Description System.Int32 Implements IEntity.Index Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Value Declaration public string Value { get; } Property Value Type Description System.String Implements IEntity.Value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.CurrencyNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.CurrencyNameEntity.html",
    "title": "Class CurrencyNameEntity - Syn Developer Network",
    "keywords": "Class CurrencyNameEntity Inheritance System.Object Entity CurrencyNameEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class CurrencyNameEntity : Entity, IEntity Constructors CurrencyNameEntity(String, String) Declaration public CurrencyNameEntity(string value, string currency) Parameters Type Name Description System.String value System.String currency Properties Currency Declaration [Resolution(\"currency\")] public string Currency { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.DurationEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.DurationEntity.html",
    "title": "Class DurationEntity - Syn Developer Network",
    "keywords": "Class DurationEntity Inheritance System.Object AmountUnitEntity DurationEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class DurationEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors DurationEntity() Declaration public DurationEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.Entity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.Entity.html",
    "title": "Class Entity - Syn Developer Network",
    "keywords": "Class Entity Inheritance System.Object Entity ColorEntity CountryEntity CurrencyNameEntity DateEntity DateTimeEntity DayEntity EmailEntity IpAddressEntity LanguageEntity MonthEntity MusicGenreEntity NegativeEntity NumberSequenceEntity PhoneNumberEntity PostalCodeEntity PostiveEntity StateNameEntity TextEntity TimeEntity UrlEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class Entity : IEntity Constructors Entity(String) Declaration public Entity(string type) Parameters Type Name Description System.String type Entity(String, String) Declaration public Entity(string type, string value) Parameters Type Name Description System.String type System.String value Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements IEntity.Value Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() ValueAs<T>() Declaration public T ValueAs<T>()where T : struct Returns Type Description T Type Parameters Name Description T Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.MonthEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.MonthEntity.html",
    "title": "Class MonthEntity - Syn Developer Network",
    "keywords": "Class MonthEntity Inheritance System.Object Entity MonthEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class MonthEntity : Entity, IEntity Constructors MonthEntity(String, String) Declaration public MonthEntity(string value, string month) Parameters Type Name Description System.String value System.String month Properties Date Declaration [Resolution(\"date\")] public string Date { get; } Property Value Type Description System.String DateTime Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime Month Declaration [Resolution(\"month\")] public string Month { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.NumberEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.NumberEntity.html",
    "title": "Class NumberEntity - Syn Developer Network",
    "keywords": "Class NumberEntity Inheritance System.Object NumberEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class NumberEntity : IEntity Constructors NumberEntity(String, Double) Declaration public NumberEntity(string value, double number) Parameters Type Name Description System.String value System.Double number Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Number Declaration [Resolution(\"number\")] public double Number { get; } Property Value Type Description System.Double Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Value Declaration public string Value { get; } Property Value Type Description System.String Implements IEntity.Value Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.PostalCodeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.PostalCodeEntity.html",
    "title": "Class PostalCodeEntity - Syn Developer Network",
    "keywords": "Class PostalCodeEntity Inheritance System.Object Entity PostalCodeEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class PostalCodeEntity : Entity, IEntity Constructors PostalCodeEntity(String) Declaration public PostalCodeEntity(string value) Parameters Type Name Description System.String value Properties PostalCode Declaration [Resolution(\"code\")] public string PostalCode { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.TemperatureEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.TemperatureEntity.html",
    "title": "Class TemperatureEntity - Syn Developer Network",
    "keywords": "Class TemperatureEntity Inheritance System.Object AmountUnitEntity TemperatureEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class TemperatureEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors TemperatureEntity() Declaration public TemperatureEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.TextEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.TextEntity.html",
    "title": "Class TextEntity - Syn Developer Network",
    "keywords": "Class TextEntity Inheritance System.Object Entity TextEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class TextEntity : Entity, IEntity Constructors TextEntity() Declaration public TextEntity() Properties Confidence Declaration [Resolution(\"confidence\")] public double Confidence { get; set; } Property Value Type Description System.Double Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitAreaNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitAreaNameEntity.html",
    "title": "Class UnitAreaNameEntity - Syn Developer Network",
    "keywords": "Class UnitAreaNameEntity Inheritance System.Object UnitEntity UnitAreaNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitAreaNameEntity : UnitEntity, IEntity Constructors UnitAreaNameEntity(String, String) Declaration public UnitAreaNameEntity(string value, string resolution) Parameters Type Name Description System.String value System.String resolution Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitEntity.html",
    "title": "Class UnitEntity - Syn Developer Network",
    "keywords": "Class UnitEntity Inheritance System.Object UnitEntity UnitAreaNameEntity UnitLengthNameEntity UnitSpeedNameEntity UnitTemperatureNameEntity UnitVolumeNameEntity UnitWeightNameEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitEntity : IEntity Constructors UnitEntity(String, String, String) Declaration public UnitEntity(string type, string value, string unit) Parameters Type Name Description System.String type System.String value System.String unit Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Unit Declaration [Resolution(\"unit\")] public string Unit { get; set; } Property Value Type Description System.String Value Declaration public string Value { get; } Property Value Type Description System.String Implements IEntity.Value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitVolumeNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitVolumeNameEntity.html",
    "title": "Class UnitVolumeNameEntity - Syn Developer Network",
    "keywords": "Class UnitVolumeNameEntity Inheritance System.Object UnitEntity UnitVolumeNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitVolumeNameEntity : UnitEntity, IEntity Constructors UnitVolumeNameEntity(String, String) Declaration public UnitVolumeNameEntity(string value, string resolution) Parameters Type Name Description System.String value System.String resolution Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitWeightEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitWeightEntity.html",
    "title": "Class UnitWeightEntity - Syn Developer Network",
    "keywords": "Class UnitWeightEntity Inheritance System.Object AmountUnitEntity UnitWeightEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitWeightEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors UnitWeightEntity() Declaration public UnitWeightEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Events.InvokingIntentEventArgs.html": {
    "href": "api/Syn.Bot.Oscova.Events.InvokingIntentEventArgs.html",
    "title": "Class InvokingIntentEventArgs - Syn Developer Network",
    "keywords": "Class InvokingIntentEventArgs Inheritance System.Object System.EventArgs InvokingIntentEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Events Assembly :Syn.Bot.dll Syntax public class InvokingIntentEventArgs : EventArgs Properties Context Declaration public Context Context { get; } Property Value Type Description Context Dialog Declaration public Dialog Dialog { get; } Property Value Type Description Dialog Intent Declaration public IntentResult Intent { get; } Property Value Type Description IntentResult"
  },
  "api/Syn.Bot.Oscova.Events.ResponseReceivedEventArgs.html": {
    "href": "api/Syn.Bot.Oscova.Events.ResponseReceivedEventArgs.html",
    "title": "Class ResponseReceivedEventArgs - Syn Developer Network",
    "keywords": "Class ResponseReceivedEventArgs Inheritance System.Object System.EventArgs ResponseReceivedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Events Assembly :Syn.Bot.dll Syntax public class ResponseReceivedEventArgs : EventArgs Properties Response Declaration public Response Response { get; } Property Value Type Description Response"
  },
  "api/Syn.Bot.Oscova.Extensions.ParserExtensions.html": {
    "href": "api/Syn.Bot.Oscova.Extensions.ParserExtensions.html",
    "title": "Class ParserExtensions - Syn Developer Network",
    "keywords": "Class ParserExtensions Inheritance System.Object ParserExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Extensions Assembly :Syn.Bot.dll Syntax public static class ParserExtensions Methods IsSystem(IEntityRecognizer) Declaration public static bool IsSystem(this IEntityRecognizer recognizer) Parameters Type Name Description IEntityRecognizer recognizer Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.Extensions.html": {
    "href": "api/Syn.Bot.Oscova.Extensions.html",
    "title": "Namespace Syn.Bot.Oscova.Extensions - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Extensions Classes EntityExtensions EntryExtensions ParserExtensions"
  },
  "api/Syn.Bot.Oscova.Interfaces.IBakableRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IBakableRecognizer.html",
    "title": "Interface IBakableRecognizer - Syn Developer Network",
    "keywords": "Interface IBakableRecognizer Inherited Members IEntityRecognizer.Type IEntityRecognizer.Parse(Request) Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IBakableRecognizer : IEntityRecognizer Properties EntriesRegex Declaration Regex EntriesRegex { get; set; } Property Value Type Description System.Text.RegularExpressions.Regex IsBaked Gets or sets a value indicating whether the entries are baked. Declaration bool IsBaked { get; set; } Property Value Type Description System.Boolean true if entries are baked; otherwise, false . Methods Bake() Declaration void Bake() Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Interfaces.ICompositeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.ICompositeEntity.html",
    "title": "Interface ICompositeEntity - Syn Developer Network",
    "keywords": "Interface ICompositeEntity Inherited Members IEntity.Type IEntity.Value IEntity.Index Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface ICompositeEntity : IEntity Properties Children Declaration EntityCollection Children { get; } Property Value Type Description EntityCollection Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Interfaces.INumberUnitEntity.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.INumberUnitEntity.html",
    "title": "Interface INumberUnitEntity - Syn Developer Network",
    "keywords": "Interface INumberUnitEntity Inherited Members IEntity.Type IEntity.Index Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface INumberUnitEntity : IEntity Properties Amount Declaration double Amount { get; } Property Value Type Description System.Double Unit Declaration string Unit { get; } Property Value Type Description System.String Value Declaration string Value { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Interfaces.IStemmer.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IStemmer.html",
    "title": "Interface IStemmer - Syn Developer Network",
    "keywords": "Interface IStemmer Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IStemmer Methods Stem(String) Declaration string Stem(string word) Parameters Type Name Description System.String word Returns Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Languages.English.EnglishDetokenizer.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.EnglishDetokenizer.html",
    "title": "Class EnglishDetokenizer - Syn Developer Network",
    "keywords": "Class EnglishDetokenizer Inheritance System.Object EnglishDetokenizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Languages.English Assembly :Syn.Bot.dll Syntax public class EnglishDetokenizer : IDetokenizer Methods Detokenize(IEnumerable<String>) Declaration public string Detokenize(IEnumerable<string> words) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > words Returns Type Description System.String Implements IDetokenizer.Detokenize(IEnumerable<String>)"
  },
  "api/Syn.Bot.Oscova.Languages.English.EnglishLanguage.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.EnglishLanguage.html",
    "title": "Class EnglishLanguage - Syn Developer Network",
    "keywords": "Class EnglishLanguage Inheritance System.Object Language EnglishLanguage Inherited Members Language.LoadWordVectors(Stream, FileFormat) Language.WordNet Language.WordSpacing Language.Culture Language.Punctuations Language.Filters Language.Tokenizer Language.Detokenizer Language.Stemmer Language.StopWords Language.AddFilter(FilterType, String, String) Language.Normalize(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Languages.English Assembly :Syn.Bot.dll Syntax public class EnglishLanguage : Language Constructors EnglishLanguage(OscovaBot) Initializes a new instance of the EnglishLanguage class. Declaration public EnglishLanguage(OscovaBot bot) Parameters Type Name Description OscovaBot bot"
  },
  "api/Syn.Bot.Oscova.Languages.English.EnglishTokenizer.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.EnglishTokenizer.html",
    "title": "Class EnglishTokenizer - Syn Developer Network",
    "keywords": "Class EnglishTokenizer Represents default English Tokenizer. Inheritance System.Object EnglishTokenizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Languages.English Assembly :Syn.Bot.dll Syntax public class EnglishTokenizer : ITokenizer Constructors EnglishTokenizer() Initializes a new instance of the EnglishTokenizer class. Declaration public EnglishTokenizer() Properties ReservedPatterns Gets or sets the reserved patterns. Declaration public List<string> ReservedPatterns { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > The reserved patterns. Methods Tokenize(String) Tokenizes the specified text. Declaration public List<string> Tokenize(string text) Parameters Type Name Description System.String text The text. Returns Type Description System.Collections.Generic.List < System.String > Implements ITokenizer.Tokenize(String) See Also ITokenizer"
  },
  "api/Syn.Bot.Oscova.Languages.English.Stemmer.EnglishStemmer.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.Stemmer.EnglishStemmer.html",
    "title": "Class EnglishStemmer - Syn Developer Network",
    "keywords": "Class EnglishStemmer Inheritance System.Object StemmerOperations EnglishStemmer Inherited Members StemmerOperations.current StemmerOperations.cursor StemmerOperations.limit StemmerOperations.limit_backward StemmerOperations.bra StemmerOperations.ket StemmerOperations.assign_to(StringBuilder) StemmerOperations.copy_from(StemmerOperations) StemmerOperations.eq_s(Int32, String) StemmerOperations.eq_s_b(Int32, String) StemmerOperations.eq_v(StringBuilder) StemmerOperations.eq_v_b(StringBuilder) StemmerOperations.getCurrent() StemmerOperations.in_grouping(Char[], Int32, Int32) StemmerOperations.in_grouping_b(Char[], Int32, Int32) StemmerOperations.in_range(Int32, Int32) StemmerOperations.in_range_b(Int32, Int32) StemmerOperations.insert(Int32, Int32, String) StemmerOperations.insert(Int32, Int32, StringBuilder) StemmerOperations.out_grouping(Char[], Int32, Int32) StemmerOperations.out_grouping_b(Char[], Int32, Int32) StemmerOperations.out_range(Int32, Int32) StemmerOperations.out_range_b(Int32, Int32) StemmerOperations.removeAugmentative() StemmerOperations.removeCase() StemmerOperations.removeComparative() StemmerOperations.removeDerivational() StemmerOperations.removeDiminutive() StemmerOperations.removePossessives() StemmerOperations.replace_s(Int32, Int32, String) StemmerOperations.setCurrent(String) StemmerOperations.slice_check() StemmerOperations.slice_del() StemmerOperations.slice_from(String) StemmerOperations.slice_from(StringBuilder) StemmerOperations.slice_to(StringBuilder) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Languages.English.Stemmer Assembly :Syn.Bot.dll Syntax public class EnglishStemmer : StemmerOperations, IStemmer Methods CanStem() Declaration public bool CanStem() Returns Type Description System.Boolean Stem(String) Declaration public string Stem(string s) Parameters Type Name Description System.String s Returns Type Description System.String Implements IStemmer.Stem(String)"
  },
  "api/Syn.Bot.Oscova.Languages.English.Stemmer.StemmerOperations.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.Stemmer.StemmerOperations.html",
    "title": "Class StemmerOperations - Syn Developer Network",
    "keywords": "Class StemmerOperations Inheritance System.Object StemmerOperations EnglishStemmer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Languages.English.Stemmer Assembly :Syn.Bot.dll Syntax public class StemmerOperations Constructors StemmerOperations() Declaration protected StemmerOperations() Fields bra Declaration protected int bra Field Value Type Description System.Int32 current Declaration protected StringBuilder current Field Value Type Description System.Text.StringBuilder cursor Declaration protected int cursor Field Value Type Description System.Int32 ket Declaration protected int ket Field Value Type Description System.Int32 limit Declaration protected int limit Field Value Type Description System.Int32 limit_backward Declaration protected int limit_backward Field Value Type Description System.Int32 Methods assign_to(StringBuilder) Declaration protected StringBuilder assign_to(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s Returns Type Description System.Text.StringBuilder copy_from(StemmerOperations) Declaration protected void copy_from(StemmerOperations other) Parameters Type Name Description StemmerOperations other eq_s(Int32, String) Declaration protected bool eq_s(int s_size, string s) Parameters Type Name Description System.Int32 s_size System.String s Returns Type Description System.Boolean eq_s_b(Int32, String) Declaration protected bool eq_s_b(int s_size, string s) Parameters Type Name Description System.Int32 s_size System.String s Returns Type Description System.Boolean eq_v(StringBuilder) Declaration protected bool eq_v(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s Returns Type Description System.Boolean eq_v_b(StringBuilder) Declaration protected bool eq_v_b(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s Returns Type Description System.Boolean getCurrent() Declaration protected string getCurrent() Returns Type Description System.String in_grouping(Char[], Int32, Int32) Declaration protected bool in_grouping(char[] s, int min, int max) Parameters Type Name Description System.Char [] s System.Int32 min System.Int32 max Returns Type Description System.Boolean in_grouping_b(Char[], Int32, Int32) Declaration protected bool in_grouping_b(char[] s, int min, int max) Parameters Type Name Description System.Char [] s System.Int32 min System.Int32 max Returns Type Description System.Boolean in_range(Int32, Int32) Declaration protected bool in_range(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description System.Boolean in_range_b(Int32, Int32) Declaration protected bool in_range_b(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description System.Boolean insert(Int32, Int32, String) Declaration protected void insert(int c_bra, int c_ket, string s) Parameters Type Name Description System.Int32 c_bra System.Int32 c_ket System.String s insert(Int32, Int32, StringBuilder) Declaration protected void insert(int c_bra, int c_ket, StringBuilder s) Parameters Type Name Description System.Int32 c_bra System.Int32 c_ket System.Text.StringBuilder s out_grouping(Char[], Int32, Int32) Declaration protected bool out_grouping(char[] s, int min, int max) Parameters Type Name Description System.Char [] s System.Int32 min System.Int32 max Returns Type Description System.Boolean out_grouping_b(Char[], Int32, Int32) Declaration protected bool out_grouping_b(char[] s, int min, int max) Parameters Type Name Description System.Char [] s System.Int32 min System.Int32 max Returns Type Description System.Boolean out_range(Int32, Int32) Declaration protected bool out_range(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description System.Boolean out_range_b(Int32, Int32) Declaration protected bool out_range_b(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description System.Boolean removeAugmentative() Declaration protected void removeAugmentative() removeCase() Declaration protected void removeCase() removeComparative() Declaration protected void removeComparative() removeDerivational() Declaration protected void removeDerivational() removeDiminutive() Declaration protected void removeDiminutive() removePossessives() Declaration protected void removePossessives() replace_s(Int32, Int32, String) Declaration protected int replace_s(int c_bra, int c_ket, string s) Parameters Type Name Description System.Int32 c_bra System.Int32 c_ket System.String s Returns Type Description System.Int32 setCurrent(String) Declaration protected void setCurrent(string value) Parameters Type Name Description System.String value slice_check() Declaration protected void slice_check() slice_del() Declaration protected void slice_del() slice_from(String) Declaration protected void slice_from(string s) Parameters Type Name Description System.String s slice_from(StringBuilder) Declaration protected void slice_from(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s slice_to(StringBuilder) Declaration protected StringBuilder slice_to(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s Returns Type Description System.Text.StringBuilder"
  },
  "api/Syn.Bot.Oscova.Languages.English.Stemmer.html": {
    "href": "api/Syn.Bot.Oscova.Languages.English.Stemmer.html",
    "title": "Namespace Syn.Bot.Oscova.Languages.English.Stemmer - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Languages.English.Stemmer Classes EnglishStemmer StemmerOperations"
  },
  "api/Syn.Bot.Assistant.Telegram.html": {
    "href": "api/Syn.Bot.Assistant.Telegram.html",
    "title": "Namespace Syn.Bot.Assistant.Telegram - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Assistant.Telegram Classes TelegramAssistant Tailored class for deploying SIML based Bot on Telegram. TelegramQuery Enums KeyboardAlignment"
  },
  "api/Syn.Bot.Oscova.Attributes.EntityAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.EntityAttribute.html",
    "title": "Class EntityAttribute - Syn Developer Network",
    "keywords": "Class EntityAttribute Represents an Entity. Inheritance System.Object System.Attribute EntityAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class EntityAttribute : Attribute Constructors EntityAttribute(String) Initializes a new instance of the EntityAttribute class. Declaration public EntityAttribute(string type) Parameters Type Name Description System.String type The entity type. Properties Type Gets the entity type. Declaration public string Type { get; } Property Value Type Description System.String The type. See Also System.Attribute"
  },
  "api/Syn.Bot.Oscova.Attributes.HintAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.HintAttribute.html",
    "title": "Class HintAttribute - Syn Developer Network",
    "keywords": "Class HintAttribute Inheritance System.Object System.Attribute HintAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HintAttribute : Attribute"
  },
  "api/Syn.Bot.Oscova.Attributes.NameAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.NameAttribute.html",
    "title": "Class NameAttribute - Syn Developer Network",
    "keywords": "Class NameAttribute Inheritance System.Object System.Attribute NameAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)] public class NameAttribute : Attribute Constructors NameAttribute(String) Declaration public NameAttribute(string name) Parameters Type Name Description System.String name Properties Value Declaration public string Value { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Attributes.ResolutionAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.ResolutionAttribute.html",
    "title": "Class ResolutionAttribute - Syn Developer Network",
    "keywords": "Class ResolutionAttribute Inheritance System.Object System.Attribute ResolutionAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class ResolutionAttribute : Attribute Constructors ResolutionAttribute() Declaration public ResolutionAttribute() ResolutionAttribute(String) Declaration public ResolutionAttribute(string name) Parameters Type Name Description System.String name Properties Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Attributes.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.html",
    "title": "Namespace Syn.Bot.Oscova.Attributes - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Attributes Classes ContextAttribute Represents a user session conversation context. EntityAttribute Represents an Entity. ExpressionAttribute Represents a user input expression. HintAttribute IntentAttribute NameAttribute PromptAttribute Represents a Prompt message that is returned when the specified entity is missing. ResolutionAttribute SynonymsAttribute"
  },
  "api/Syn.Bot.Oscova.BotUser.html": {
    "href": "api/Syn.Bot.Oscova.BotUser.html",
    "title": "Class BotUser - Syn Developer Network",
    "keywords": "Class BotUser Represents an Oscova user. Inheritance System.Object BotUser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class BotUser Properties Context Declaration public Context Context { get; } Property Value Type Description Context ID Gets the user ID. Declaration public string ID { get; } Property Value Type Description System.String The user identifier. Settings Gets the settings. Declaration public Settings Settings { get; } Property Value Type Description Settings The settings. Methods CreateRequest() Creates a new user request. Declaration public Request CreateRequest() Returns Type Description Request CreateRequest(String) Creates a new user request. Declaration public Request CreateRequest(string message) Parameters Type Name Description System.String message The message. Returns Type Description Request Events ResponseReceived Occurs when a Response received by this BotUser . Declaration public event EventHandler<ResponseReceivedEventArgs> ResponseReceived Event Type Type Description System.EventHandler < ResponseReceivedEventArgs >"
  },
  "api/Syn.Bot.Oscova.Collection.DialogCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.DialogCollection.html",
    "title": "Class DialogCollection - Syn Developer Network",
    "keywords": "Class DialogCollection Inheritance System.Object DialogCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public sealed class DialogCollection : ICollection<Dialog>, IEnumerable<Dialog>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(Dialog) Declaration public void Add(Dialog item) Parameters Type Name Description Dialog item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(Dialog) Declaration public bool Contains(Dialog item) Parameters Type Name Description Dialog item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(Dialog[], Int32) Declaration public void CopyTo(Dialog[] array, int arrayIndex) Parameters Type Name Description Dialog [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<Dialog> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Dialog > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(Dialog) Declaration public bool Remove(Dialog item) Parameters Type Name Description Dialog item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.EntityCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.EntityCollection.html",
    "title": "Class EntityCollection - Syn Developer Network",
    "keywords": "Class EntityCollection Inheritance System.Object EntityCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class EntityCollection : ICollection<IEntity>, IEnumerable<IEntity>, IEnumerable Constructors EntityCollection() Declaration public EntityCollection() EntityCollection(IEnumerable<IEntity>) Declaration public EntityCollection(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[Int32] Declaration public IEntity this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IEntity Methods Add(IEntity) Declaration public void Add(IEntity item) Parameters Type Name Description IEntity item Implements System.Collections.Generic.ICollection<T>.Add(T) AddRange(IEnumerable<IEntity>) Declaration public void AddRange(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities AllOfType(String) Declaration public List<IEntity> AllOfType(string entityName) Parameters Type Name Description System.String entityName Returns Type Description System.Collections.Generic.List < IEntity > AllOfType<T>() Declaration public List<T> AllOfType<T>()where T : IEntity Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T AllOfType<T>(String) Declaration public List<T> AllOfType<T>(string entityType)where T : IEntity Parameters Type Name Description System.String entityType Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Clone() Declaration public EntityCollection Clone() Returns Type Description EntityCollection Contains(IEntity) Declaration public bool Contains(IEntity item) Parameters Type Name Description IEntity item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string entityType) Parameters Type Name Description System.String entityType Returns Type Description System.Boolean CopyTo(IEntity[], Int32) Declaration public void CopyTo(IEntity[] array, int arrayIndex) Parameters Type Name Description IEntity [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<IEntity> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IEntity > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() IndexOf(IEntity) Declaration public int IndexOf(IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Int32 IndexOf(String) Declaration public int IndexOf(string entityType) Parameters Type Name Description System.String entityType Returns Type Description System.Int32 OfCompositeType(String) Declaration public ICompositeEntity OfCompositeType(string entityType) Parameters Type Name Description System.String entityType Returns Type Description ICompositeEntity OfType(String) Declaration public IEntity OfType(string entityType) Parameters Type Name Description System.String entityType Returns Type Description IEntity OfType<T>() Declaration public T OfType<T>()where T : IEntity Returns Type Description T Type Parameters Name Description T OfType<T>(String) Declaration public T OfType<T>(string entityType)where T : IEntity Parameters Type Name Description System.String entityType Returns Type Description T Type Parameters Name Description T Remove(IEntity) Declaration public bool Remove(IEntity item) Parameters Type Name Description IEntity item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Declaration public bool Remove(string entityType) Parameters Type Name Description System.String entityType Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.Entry.html": {
    "href": "api/Syn.Bot.Oscova.Collection.Entry.html",
    "title": "Class Entry - Syn Developer Network",
    "keywords": "Class Entry Inheritance System.Object Entry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class Entry Constructors Entry(String) Declaration public Entry(string value) Parameters Type Name Description System.String value Properties Reference Declaration public string Reference { get; } Property Value Type Description System.String Value Declaration public string Value { get; } Property Value Type Description System.String Extension Methods EntryExtensions.HasReferenceValue(Entry)"
  },
  "api/Syn.Bot.Oscova.Collection.EntryCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.EntryCollection.html",
    "title": "Class EntryCollection - Syn Developer Network",
    "keywords": "Class EntryCollection Inheritance System.Object EntryCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class EntryCollection : ICollection<Entry>, IEnumerable<Entry>, IEnumerable Constructors EntryCollection() Declaration public EntryCollection() EntryCollection(IEnumerable<Entry>) Declaration public EntryCollection(IEnumerable<Entry> entries) Parameters Type Name Description System.Collections.Generic.IEnumerable < Entry > entries Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[Int32] Declaration public Entry this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Entry Item[String] Declaration public Entry this[string entryValue] { get; } Parameters Type Name Description System.String entryValue Property Value Type Description Entry JoinedWordPattern Declaration public string JoinedWordPattern { get; } Property Value Type Description System.String Methods Add(Entry) Declaration public void Add(Entry item) Parameters Type Name Description Entry item Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String) Declaration public void Add(string entryValue) Parameters Type Name Description System.String entryValue Add(String, String[]) Declaration public void Add(string item, string[] synonyms) Parameters Type Name Description System.String item System.String [] synonyms AddRange(IEnumerable<Entry>) Declaration public void AddRange(IEnumerable<Entry> entries) Parameters Type Name Description System.Collections.Generic.IEnumerable < Entry > entries AddSynonyms(String, String[]) Adds the synonyms as entries with item as the Reference . Declaration public void AddSynonyms(string item, string[] synonymsList) Parameters Type Name Description System.String item The item. System.String [] synonymsList The synonyms list. Remarks item is not added as an entry. Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(Entry) Declaration public bool Contains(Entry item) Parameters Type Name Description Entry item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string entryValue) Parameters Type Name Description System.String entryValue Returns Type Description System.Boolean CopyTo(Entry[], Int32) Declaration public void CopyTo(Entry[] array, int arrayIndex) Parameters Type Name Description Entry [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<Entry> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Entry > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() IndexOf(String) Declaration public int IndexOf(string entryValue) Parameters Type Name Description System.String entryValue Returns Type Description System.Int32 OrderByEntryLength() Orders the collection based on the length of item values. Declaration public void OrderByEntryLength() Remove(Entry) Declaration public bool Remove(Entry item) Parameters Type Name Description Entry item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.RecognizerCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.RecognizerCollection.html",
    "title": "Class RecognizerCollection - Syn Developer Network",
    "keywords": "Class RecognizerCollection Inheritance System.Object RecognizerCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class RecognizerCollection : ICollection<IEntityRecognizer>, IEnumerable<IEntityRecognizer>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public IEntityRecognizer this[string entityType] { get; } Parameters Type Name Description System.String entityType Property Value Type Description IEntityRecognizer Methods Add(IEntityRecognizer) Declaration public void Add(IEntityRecognizer item) Parameters Type Name Description IEntityRecognizer item Implements System.Collections.Generic.ICollection<T>.Add(T) CanOverride(IEntity, IEntity) Declaration public bool CanOverride(IEntity sourceEntity, IEntity targetEntity) Parameters Type Name Description IEntity sourceEntity IEntity targetEntity Returns Type Description System.Boolean Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IEntityRecognizer) Declaration public bool Contains(IEntityRecognizer item) Parameters Type Name Description IEntityRecognizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string entityType) Parameters Type Name Description System.String entityType Returns Type Description System.Boolean CopyTo(IEntityRecognizer[], Int32) Declaration public void CopyTo(IEntityRecognizer[] array, int arrayIndex) Parameters Type Name Description IEntityRecognizer [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) ExtractEntities(Request) Extracts known entities from Request . Declaration public EntityCollection ExtractEntities(Request request) Parameters Type Name Description Request request The request. Returns Type Description EntityCollection GetEnumerator() Declaration public IEnumerator<IEntityRecognizer> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IEntityRecognizer > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() IsCompositeType(String) Determines whether the specified entity type is composite. Declaration public bool IsCompositeType(string typeName) Parameters Type Name Description System.String typeName Name of the entity type. Returns Type Description System.Boolean true if entity type is composite; otherwise, false . LoadType(String) Loads a previously registered IEntityRecognizer for the specified entity type. Declaration public void LoadType(string entityType) Parameters Type Name Description System.String entityType Type of the entity. RegisterType<T>(String) Registers a IEntityRecognizer type. An instance of which is created only when necessary. Declaration public void RegisterType<T>(string entityType)where T : IEntityRecognizer Parameters Type Name Description System.String entityType Type of the entity. Type Parameters Name Description T IEntityRecognizer type. Remove(IEntityRecognizer) Declaration public bool Remove(IEntityRecognizer item) Parameters Type Name Description IEntityRecognizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) SetOverridable(String, String) Declaration public void SetOverridable(string sourceEntity, string targetEntity) Parameters Type Name Description System.String sourceEntity System.String targetEntity Events CompositeEntityCreated Occurs when a composite entity is created. Declaration public event EventHandler<CompositeEntityCreatedEventArgs> CompositeEntityCreated Event Type Type Description System.EventHandler < CompositeEntityCreatedEventArgs > EntityCreated Occurs when an entity is created by IEntityRecognizer . Declaration public event EventHandler<EntityCreatedEventArgs> EntityCreated Event Type Type Description System.EventHandler < EntityCreatedEventArgs > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.Word.html": {
    "href": "api/Syn.Bot.Oscova.Collection.Word.html",
    "title": "Class Word - Syn Developer Network",
    "keywords": "Class Word Inheritance System.Object Word Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class Word Constructors Word(String) Declaration public Word(string value) Parameters Type Name Description System.String value Properties Frequency Gets the word occurance frequency. Declaration public int Frequency { get; } Property Value Type Description System.Int32 The frequency. Value Declaration public string Value { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Context.html": {
    "href": "api/Syn.Bot.Oscova.Context.html",
    "title": "Class Context - Syn Developer Network",
    "keywords": "Class Context Represents a conversion context. Inheritance System.Object Context Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class Context : ICollection<ContextItem>, IEnumerable<ContextItem>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[Enum] Declaration public ContextItem this[Enum enumValue] { get; } Parameters Type Name Description System.Enum enumValue Property Value Type Description ContextItem Item[String] Gets the ContextItem with the specified name. Declaration public ContextItem this[string name] { get; } Parameters Type Name Description System.String name The name. Property Value Type Description ContextItem The ContextItem . SharedData Declaration public GenericCollection<object> SharedData { get; } Property Value Type Description GenericCollection < System.Object > SharedEntities Gets the shared entities. Declaration public EntityCollection SharedEntities { get; } Property Value Type Description EntityCollection The shared entities. Methods Add(ContextItem) Declaration public void Add(ContextItem item) Parameters Type Name Description ContextItem item Implements System.Collections.Generic.ICollection<T>.Add(T) Add(Enum) Declaration public void Add(Enum enumValue) Parameters Type Name Description System.Enum enumValue Add(Enum, IsActiveProvider) Declaration public void Add(Enum enumValue, IsActiveProvider isActiveProvider) Parameters Type Name Description System.Enum enumValue IsActiveProvider isActiveProvider Add(Enum, Int32) Declaration public void Add(Enum enumValue, int lifespan) Parameters Type Name Description System.Enum enumValue System.Int32 lifespan Add(String) Declaration public void Add(string contextName) Parameters Type Name Description System.String contextName Add(String, IsActiveProvider) Declaration public void Add(string contextName, IsActiveProvider isActiveProvider) Parameters Type Name Description System.String contextName IsActiveProvider isActiveProvider Add(String, Int32) Declaration public void Add(string contextName, int lifeSpan) Parameters Type Name Description System.String contextName System.Int32 lifeSpan Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ContextItem) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(ContextItem item) Parameters Type Name Description ContextItem item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(Enum) Declaration public bool Contains(Enum enumValue) Parameters Type Name Description System.Enum enumValue Returns Type Description System.Boolean Contains(String) Determines whether [contains] [the specified name]. Declaration public bool Contains(string name) Parameters Type Name Description System.String name The name. Returns Type Description System.Boolean true if [contains] [the specified name]; otherwise, false . CopyTo(ContextItem[], Int32) Declaration public void CopyTo(ContextItem[] array, int arrayIndex) Parameters Type Name Description ContextItem [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<ContextItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ContextItem > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(ContextItem) Declaration public bool Remove(ContextItem item) Parameters Type Name Description ContextItem item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Declaration public bool Remove(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.ContextItem.html": {
    "href": "api/Syn.Bot.Oscova.ContextItem.html",
    "title": "Class ContextItem - Syn Developer Network",
    "keywords": "Class ContextItem Represents the state of a Chat Session. Inheritance System.Object ContextItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class ContextItem Fields Empty Represents an empty context item. This field is read-only. Declaration public static readonly ContextItem Empty Field Value Type Description ContextItem Properties IsActive Gets a value indicating whether this instance is active. Declaration public bool IsActive { get; } Property Value Type Description System.Boolean true if this instance is active; otherwise, false . Lifespan Gets the context lifespan. Declaration public int Lifespan { get; } Property Value Type Description System.Int32 The context lifespan. Name Gets the context name. Declaration public string Name { get; } Property Value Type Description System.String The context name. Parameters Gets the contextual parameters. Declaration public ContextParameterCollection Parameters { get; } Property Value Type Description ContextParameterCollection Methods RenewLifespan() Renews the context lifespan. Declaration public void RenewLifespan() Operators Equality(ContextItem, Enum) Declaration public static bool operator ==(ContextItem first, Enum second) Parameters Type Name Description ContextItem first System.Enum second Returns Type Description System.Boolean Equality(ContextItem, String) Declaration public static bool operator ==(ContextItem first, string second) Parameters Type Name Description ContextItem first System.String second Returns Type Description System.Boolean Inequality(ContextItem, Enum) Declaration public static bool operator !=(ContextItem contextItem, Enum value) Parameters Type Name Description ContextItem contextItem System.Enum value Returns Type Description System.Boolean Inequality(ContextItem, String) Declaration public static bool operator !=(ContextItem first, string second) Parameters Type Name Description ContextItem first System.String second Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.Delegates.IsActiveProvider.html": {
    "href": "api/Syn.Bot.Oscova.Delegates.IsActiveProvider.html",
    "title": "Delegate IsActiveProvider - Syn Developer Network",
    "keywords": "Delegate IsActiveProvider Any custom method that determines whether the current context item is active. Namespace :Syn.Bot.Oscova.Delegates Assembly :Syn.Bot.dll Syntax public delegate bool IsActiveProvider(); Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.Delegates.html": {
    "href": "api/Syn.Bot.Oscova.Delegates.html",
    "title": "Namespace Syn.Bot.Oscova.Delegates - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Delegates Delegates EntityExtractor A custom method that evaluates the Request and returns extracted entities. IsActiveProvider Any custom method that determines whether the current context item is active."
  },
  "api/Syn.Bot.Oscova.Entities.AmountUnitEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.AmountUnitEntity.html",
    "title": "Class AmountUnitEntity - Syn Developer Network",
    "keywords": "Class AmountUnitEntity Inheritance System.Object AmountUnitEntity AgeEntity DurationEntity PercentageEntity TemperatureEntity UnitAreaEntity UnitLengthEntity UnitSpeedEntity UnitVolumeEntity UnitWeightEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public abstract class AmountUnitEntity : INumberUnitEntity, IEntity Constructors AmountUnitEntity(String) Declaration protected AmountUnitEntity(string typeName) Parameters Type Name Description System.String typeName Properties Amount Declaration [Resolution(\"amount\")] public double Amount { get; set; } Property Value Type Description System.Double Implements INumberUnitEntity.Amount Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Unit Declaration [Resolution(\"unit\")] public string Unit { get; set; } Property Value Type Description System.String Implements INumberUnitEntity.Unit Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements INumberUnitEntity.Value IEntity.Value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.ColorEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.ColorEntity.html",
    "title": "Class ColorEntity - Syn Developer Network",
    "keywords": "Class ColorEntity Inheritance System.Object Entity ColorEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class ColorEntity : Entity, IEntity Constructors ColorEntity(String, String) Declaration public ColorEntity(string value, string color) Parameters Type Name Description System.String value System.String color Properties Color Declaration [Resolution(\"color\")] public string Color { get; set; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.DateEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.DateEntity.html",
    "title": "Class DateEntity - Syn Developer Network",
    "keywords": "Class DateEntity Inheritance System.Object Entity DateEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class DateEntity : Entity, IEntity Constructors DateEntity(String, DateTime) Declaration public DateEntity(string value, DateTime dateTime) Parameters Type Name Description System.String value System.DateTime dateTime Properties Date Declaration [Resolution(\"date\")] public string Date { get; } Property Value Type Description System.String DateTime Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.DateTimeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.DateTimeEntity.html",
    "title": "Class DateTimeEntity - Syn Developer Network",
    "keywords": "Class DateTimeEntity Inheritance System.Object Entity DateTimeEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class DateTimeEntity : Entity, IEntity Constructors DateTimeEntity(String, DateTime) Declaration public DateTimeEntity(string value, DateTime dateTime) Parameters Type Name Description System.String value System.DateTime dateTime Properties DateTime Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime DateTimeString Declaration [Resolution(\"dateTime\")] public string DateTimeString { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.IntegerEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.IntegerEntity.html",
    "title": "Class IntegerEntity - Syn Developer Network",
    "keywords": "Class IntegerEntity Inheritance System.Object IntegerEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class IntegerEntity : IEntity Constructors IntegerEntity(String, Int32) Declaration public IntegerEntity(string value, int integer) Parameters Type Name Description System.String value System.Int32 integer Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Implements IEntity.Index Integer Declaration [Resolution(\"integer\")] public int Integer { get; } Property Value Type Description System.Int32 Type Declaration public string Type { get; set; } Property Value Type Description System.String Implements IEntity.Type Value Declaration public string Value { get; } Property Value Type Description System.String Implements IEntity.Value Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Recognizers.CurrencyNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.CurrencyNameRecognizer.html",
    "title": "Class CurrencyNameRecognizer - Syn Developer Network",
    "keywords": "Class CurrencyNameRecognizer Inheritance System.Object EntryRecognizer CurrencyNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class CurrencyNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors CurrencyNameRecognizer() Declaration public CurrencyNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.IndianPostalCodeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.IndianPostalCodeRecognizer.html",
    "title": "Class IndianPostalCodeRecognizer - Syn Developer Network",
    "keywords": "Class IndianPostalCodeRecognizer Inheritance System.Object BaseRegexRecognizer IndianPostalCodeRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class IndianPostalCodeRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors IndianPostalCodeRecognizer() Declaration public IndianPostalCodeRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.IndianStateRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.IndianStateRecognizer.html",
    "title": "Class IndianStateRecognizer - Syn Developer Network",
    "keywords": "Class IndianStateRecognizer Inheritance System.Object EntryRecognizer IndianStateRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class IndianStateRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors IndianStateRecognizer() Declaration public IndianStateRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.IntegerRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.IntegerRecognizer.html",
    "title": "Class IntegerRecognizer - Syn Developer Network",
    "keywords": "Class IntegerRecognizer Inheritance System.Object BaseRegexRecognizer IntegerRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class IntegerRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors IntegerRecognizer() Declaration public IntegerRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.IpAddressRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.IpAddressRecognizer.html",
    "title": "Class IpAddressRecognizer - Syn Developer Network",
    "keywords": "Class IpAddressRecognizer Inheritance System.Object BaseRegexRecognizer IpAddressRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class IpAddressRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors IpAddressRecognizer() Declaration public IpAddressRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.TimeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.TimeRecognizer.html",
    "title": "Class TimeRecognizer - Syn Developer Network",
    "keywords": "Class TimeRecognizer Inheritance System.Object TimeRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class TimeRecognizer : IEntityRecognizer Constructors TimeRecognizer() Declaration public TimeRecognizer() Properties RegexHourMeridiem Declaration public Regex RegexHourMeridiem { get; } Property Value Type Description System.Text.RegularExpressions.Regex RegexHourMinuteMeridiem Declaration public Regex RegexHourMinuteMeridiem { get; } Property Value Type Description System.Text.RegularExpressions.Regex RegexNumberUnit Declaration public Regex RegexNumberUnit { get; } Property Value Type Description System.Text.RegularExpressions.Regex Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UkPostalCodeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UkPostalCodeRecognizer.html",
    "title": "Class UkPostalCodeRecognizer - Syn Developer Network",
    "keywords": "Class UkPostalCodeRecognizer Inheritance System.Object BaseRegexRecognizer UkPostalCodeRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UkPostalCodeRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UkPostalCodeRecognizer() Declaration public UkPostalCodeRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitAreaNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitAreaNameRecognizer.html",
    "title": "Class UnitAreaNameRecognizer - Syn Developer Network",
    "keywords": "Class UnitAreaNameRecognizer Inheritance System.Object EntryRecognizer UnitAreaNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitAreaNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UnitAreaNameRecognizer() Declaration public UnitAreaNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitAreaRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitAreaRecognizer.html",
    "title": "Class UnitAreaRecognizer - Syn Developer Network",
    "keywords": "Class UnitAreaRecognizer Inheritance System.Object BaseRegexRecognizer UnitAreaRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitAreaRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UnitAreaRecognizer(OscovaBot) Declaration public UnitAreaRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitVolumeNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitVolumeNameRecognizer.html",
    "title": "Class UnitVolumeNameRecognizer - Syn Developer Network",
    "keywords": "Class UnitVolumeNameRecognizer Inheritance System.Object EntryRecognizer UnitVolumeNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitVolumeNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UnitVolumeNameRecognizer() Declaration public UnitVolumeNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitVolumeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitVolumeRecognizer.html",
    "title": "Class UnitVolumeRecognizer - Syn Developer Network",
    "keywords": "Class UnitVolumeRecognizer Inheritance System.Object BaseRegexRecognizer UnitVolumeRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitVolumeRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UnitVolumeRecognizer(OscovaBot) Declaration public UnitVolumeRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitWeightNameRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitWeightNameRecognizer.html",
    "title": "Class UnitWeightNameRecognizer - Syn Developer Network",
    "keywords": "Class UnitWeightNameRecognizer Inheritance System.Object EntryRecognizer UnitWeightNameRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class UnitWeightNameRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors UnitWeightNameRecognizer() Declaration public UnitWeightNameRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.UnitWeightRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.UnitWeightRecognizer.html",
    "title": "Class UnitWeightRecognizer - Syn Developer Network",
    "keywords": "Class UnitWeightRecognizer Inheritance System.Object BaseRegexRecognizer UnitWeightRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class UnitWeightRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors UnitWeightRecognizer(OscovaBot) Declaration public UnitWeightRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Sys.html": {
    "href": "api/Syn.Bot.Oscova.Sys.html",
    "title": "Class Sys - Syn Developer Network",
    "keywords": "Class Sys List of all known System Entity types. Inheritance System.Object Sys Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class Sys Fields Age Person's age. Declaration public const string Age = \"sys.age\" Field Value Type Description System.String Cardinal Cardinal. Declaration public const string Cardinal = \"sys.cardinal\" Field Value Type Description System.String Color Names of color. Declaration public const string Color = \"sys.color\" Field Value Type Description System.String Country Names of country. Declaration public const string Country = \"sys.geo.country\" Field Value Type Description System.String CurrencyName Names of currencies. Declaration public const string CurrencyName = \"sys.currency.name\" Field Value Type Description System.String Date Date. Declaration public const string Date = \"sys.date\" Field Value Type Description System.String DateTime Date and time. Declaration public const string DateTime = \"sys.date.time\" Field Value Type Description System.String Day Names of day of week. Declaration public const string Day = \"sys.date.day\" Field Value Type Description System.String Duration Duration Declaration public const string Duration = \"sys.duration\" Field Value Type Description System.String Email Valid email address. Declaration public const string Email = \"sys.email\" Field Value Type Description System.String IndianPhoneNumber Indian phone number formats. Declaration public const string IndianPhoneNumber = \"sys.phone.ind\" Field Value Type Description System.String IndianPostalCode Indian postal code. Declaration public const string IndianPostalCode = \"sys.geo.postal.ind\" Field Value Type Description System.String Integer Integer numbers. Declaration public const string Integer = \"sys.integer\" Field Value Type Description System.String IpAddress IP Address sequence. Declaration public const string IpAddress = \"sys.geo.ip\" Field Value Type Description System.String Language Names of languages. Declaration public const string Language = \"sys.language\" Field Value Type Description System.String Month Name of months. Declaration public const string Month = \"sys.date.month\" Field Value Type Description System.String MusicGenre Genre of Music. Declaration public const string MusicGenre = \"sys.music.genre\" Field Value Type Description System.String Negative Negative user response Declaration public const string Negative = \"sys.negative\" Field Value Type Description System.String Number Integer or decimal numbers. Declaration public const string Number = \"sys.number\" Field Value Type Description System.String NumberSequence Number sequence. Declaration public const string NumberSequence = \"sys.number.sequence\" Field Value Type Description System.String Ordinal Ordinals Declaration public const string Ordinal = \"sys.ordinal\" Field Value Type Description System.String Percentage Number and percents Declaration public const string Percentage = \"sys.percentage\" Field Value Type Description System.String Positive Positive or affirmative user response. Declaration public const string Positive = \"sys.positive\" Field Value Type Description System.String StatesIndia Indian states. Declaration public const string StatesIndia = \"sys.geo.state.ind\" Field Value Type Description System.String StatesUS US states Declaration public const string StatesUS = \"sys.geo.state.us\" Field Value Type Description System.String Temperature Temperature with unit. Declaration public const string Temperature = \"sys.temperature\" Field Value Type Description System.String Text Any non-empty text. Declaration public const string Text = \"sys.text\" Field Value Type Description System.String Time Time. Declaration public const string Time = \"sys.time\" Field Value Type Description System.String UkPostalCode UK postal code. Declaration public const string UkPostalCode = \"sys.geo.postal.uk\" Field Value Type Description System.String UnitArea Area with unit. Declaration public const string UnitArea = \"sys.unit.area\" Field Value Type Description System.String UnitAreaName Units of area. Declaration public const string UnitAreaName = \"sys.unit.area.name\" Field Value Type Description System.String UnitLength Length with unit. Declaration public const string UnitLength = \"sys.unit.length\" Field Value Type Description System.String UnitLengthName Units of length. Declaration public const string UnitLengthName = \"sys.unit.length.name\" Field Value Type Description System.String UnitSpeed Speed with unit. Declaration public const string UnitSpeed = \"sys.unit.speed\" Field Value Type Description System.String UnitSpeedName Units of speed. Declaration public const string UnitSpeedName = \"sys.unit.speed.name\" Field Value Type Description System.String UnitTemperatureName Units of temperature. Declaration public const string UnitTemperatureName = \"sys.unit.temperature.name\" Field Value Type Description System.String UnitVolume Volume with unit. Declaration public const string UnitVolume = \"sys.unit.volume\" Field Value Type Description System.String UnitVolumeName Units of volume. Declaration public const string UnitVolumeName = \"sys.unit.volume.name\" Field Value Type Description System.String UnitWeight Weight with unit. Declaration public const string UnitWeight = \"sys.unit.weight\" Field Value Type Description System.String UnitWeightName Units of weight. Declaration public const string UnitWeightName = \"sys.unit.weight.name\" Field Value Type Description System.String Url A valid URL. Declaration public const string Url = \"sys.url\" Field Value Type Description System.String UsPhoneNumber US phone number formats. Declaration public static string UsPhoneNumber Field Value Type Description System.String UsPostalCode US postal code. Declaration public const string UsPostalCode = \"sys.geo.postal.us\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Trainer.html": {
    "href": "api/Syn.Bot.Oscova.Trainer.html",
    "title": "Class Trainer - Syn Developer Network",
    "keywords": "Class Trainer Represents an Oscova bot training system. Inheritance System.Object Trainer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class Trainer Methods GetTrainingData() Gets the training data for external training of Neural Network. Declaration public XDocument GetTrainingData() Returns Type Description System.Xml.Linq.XDocument Remarks To be used with Syn Bot Studio only. StartTraining() Starts training the Bot. Declaration public void StartTraining() StartTraining(XDocument) Starts training the Bot using the model provided. Declaration public void StartTraining(XDocument trainedModel) Parameters Type Name Description System.Xml.Linq.XDocument trainedModel"
  },
  "api/Syn.Bot.Oscova.Utilities.EnglishNumberParser.html": {
    "href": "api/Syn.Bot.Oscova.Utilities.EnglishNumberParser.html",
    "title": "Class EnglishNumberParser - Syn Developer Network",
    "keywords": "Class EnglishNumberParser Inheritance System.Object EnglishNumberParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Utilities Assembly :Syn.Bot.dll Syntax public class EnglishNumberParser Constructors EnglishNumberParser(OscovaBot, String) Declaration public EnglishNumberParser(OscovaBot bot, string sentence) Parameters Type Name Description OscovaBot bot System.String sentence Properties AboveTenTable Declaration public Dictionary<string, int> AboveTenTable { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > Bot Declaration public OscovaBot Bot { get; } Property Value Type Description OscovaBot Modifiers Declaration public Dictionary<string, int> Modifiers { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > OnesTable Declaration public Dictionary<string, int> OnesTable { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > Sentence Declaration public string Sentence { get; } Property Value Type Description System.String TensTable Declaration public Dictionary<string, int> TensTable { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > Methods Evaluate() Declaration public EnglishNumberResult Evaluate() Returns Type Description EnglishNumberResult"
  },
  "api/Syn.Utility.Utilities.ConvertUtility.html": {
    "href": "api/Syn.Utility.Utilities.ConvertUtility.html",
    "title": "Class ConvertUtility - Syn Developer Network",
    "keywords": "Class ConvertUtility Inheritance System.Object ConvertUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ConvertUtility Methods BytesToString(Int64) Declaration public string BytesToString(long bytes) Parameters Type Name Description System.Int64 bytes Returns Type Description System.String"
  },
  "api/Syn.Utility.Utilities.DateUtility.html": {
    "href": "api/Syn.Utility.Utilities.DateUtility.html",
    "title": "Class DateUtility - Syn Developer Network",
    "keywords": "Class DateUtility Inheritance System.Object DateUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class DateUtility Methods GetDateTime(String) Declaration public DateTime GetDateTime(string dateString) Parameters Type Name Description System.String dateString Returns Type Description System.DateTime GetDateTime(String, DayOfWeek) Declaration public DateTime GetDateTime(string dateString, DayOfWeek dayOfWeek) Parameters Type Name Description System.String dateString System.DayOfWeek dayOfWeek Returns Type Description System.DateTime"
  },
  "api/Syn.Utility.Utilities.DirectoryUtility.html": {
    "href": "api/Syn.Utility.Utilities.DirectoryUtility.html",
    "title": "Class DirectoryUtility - Syn Developer Network",
    "keywords": "Class DirectoryUtility Inheritance System.Object DirectoryUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class DirectoryUtility Methods Current() Gets the actual current directory that is not affected by indirect invocations. Declaration public string Current() Returns Type Description System.String GetLevel(String) Declaration public int GetLevel(string directoryPath) Parameters Type Name Description System.String directoryPath Returns Type Description System.Int32 GetName(String) Gets the name of the directory from path. Declaration public string GetName(string path) Parameters Type Name Description System.String path The path to directory. Returns Type Description System.String GetParentPath(String, Int32) Declaration public string GetParentPath(string currentPath, int level) Parameters Type Name Description System.String currentPath System.Int32 level Returns Type Description System.String GetPath(SpecialFolders) Gets the path to a special folder. Declaration public string GetPath(SpecialFolders folder) Parameters Type Name Description SpecialFolders folder The folder. Returns Type Description System.String GetSafePath(String) Gets the directory path. If directory doesn't exist then the directory gets created. Declaration public string GetSafePath(string directoryPath) Parameters Type Name Description System.String directoryPath The directory path. Returns Type Description System.String GetSize(String) Gets the size of the directory in bytes. Declaration public float GetSize(string folder) Parameters Type Name Description System.String folder The directory path. Returns Type Description System.Single OpenAndSelect(String) Opens the directory containing the file and selects the file. Declaration public void OpenAndSelect(string filePath) Parameters Type Name Description System.String filePath The file path. RandomFile(String, String, String, SearchOption) Declaration public string RandomFile(string path, string skipFile = null, string searchPattern = \"*\", SearchOption searchOption = SearchOption.TopDirectoryOnly) Parameters Type Name Description System.String path System.String skipFile System.String searchPattern System.IO.SearchOption searchOption Returns Type Description System.String Rename(String, String) Declaration public string Rename(string folderPath, string newFolderName) Parameters Type Name Description System.String folderPath System.String newFolderName Returns Type Description System.String"
  },
  "api/Syn.Utility.Utilities.FileUtility.html": {
    "href": "api/Syn.Utility.Utilities.FileUtility.html",
    "title": "Class FileUtility - Syn Developer Network",
    "keywords": "Class FileUtility Inheritance System.Object FileUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class FileUtility Methods FileNameFromTime(String, String) Declaration public string FileNameFromTime(string fileName, string extension) Parameters Type Name Description System.String fileName System.String extension Returns Type Description System.String FileNameFromTime(String, String, DateTime) Declaration public string FileNameFromTime(string fileName, string extension, DateTime dateTime) Parameters Type Name Description System.String fileName System.String extension System.DateTime dateTime Returns Type Description System.String GetAbsolutePath(String) Declaration public string GetAbsolutePath(string theValue) Parameters Type Name Description System.String theValue Returns Type Description System.String GetFileSize(String, SizeMeasure) Declaration public double GetFileSize(string filePath, SizeMeasure measure) Parameters Type Name Description System.String filePath SizeMeasure measure Returns Type Description System.Double GetTempFileName(String) Declaration public string GetTempFileName(string extension) Parameters Type Name Description System.String extension Returns Type Description System.String"
  },
  "api/Syn.Utility.Utilities.ImageUtility.html": {
    "href": "api/Syn.Utility.Utilities.ImageUtility.html",
    "title": "Class ImageUtility - Syn Developer Network",
    "keywords": "Class ImageUtility Inheritance System.Object ImageUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ImageUtility Methods CreateBitmapSource(Bitmap) Declaration public BitmapSource CreateBitmapSource(Bitmap bitmap) Parameters Type Name Description System.Drawing.Bitmap bitmap Returns Type Description System.Windows.Media.Imaging.BitmapSource CreateThumbnail(String, Int32, Int32) Declaration public Bitmap CreateThumbnail(string lcFilename, int lnWidth, int lnHeight) Parameters Type Name Description System.String lcFilename System.Int32 lnWidth System.Int32 lnHeight Returns Type Description System.Drawing.Bitmap"
  },
  "api/Syn.Utility.Utilities.Win32Utility.Gw.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.Gw.html",
    "title": "Enum Win32Utility.Gw - Syn Developer Network",
    "keywords": "Enum Win32Utility.Gw Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum Gw Fields Name Description CHILD HWNDFIRST HWNDLAST HWNDNEXT HWNDPREV OWNER"
  },
  "api/Syn.Utility.Utilities.Win32Utility.PostionFlags.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.PostionFlags.html",
    "title": "Enum Win32Utility.PostionFlags - Syn Developer Network",
    "keywords": "Enum Win32Utility.PostionFlags Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum PostionFlags Fields Name Description Drawframe Framechanged Hidewindow NoActivate NoCopyBits NOMOVE NOOWNERZORDER NOREDRAW NOREPOSITION NOSENDCHANGING NOSIZE NOZORDER SHOWWINDOW"
  },
  "api/Syn.Utility.Utilities.Win32Utility.WindowMessage.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.WindowMessage.html",
    "title": "Struct Win32Utility.WindowMessage - Syn Developer Network",
    "keywords": "Struct Win32Utility.WindowMessage Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public struct WindowMessage Fields COPYDATA Declaration public static int COPYDATA Field Value Type Description System.Int32 Message Declaration public string Message Field Value Type Description System.String"
  },
  "api/Syn.Utility.Utilities.Win32Utility.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.html",
    "title": "Class Win32Utility - Syn Developer Network",
    "keywords": "Class Win32Utility Inheritance System.Object Win32Utility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class Win32Utility Methods ActivateWindow(IntPtr) Declaration public void ActivateWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd ArrangeWindows_CASCADE(Int32) Declaration public void ArrangeWindows_CASCADE(int parentHwnd) Parameters Type Name Description System.Int32 parentHwnd ArrangeWindows_HORIZONTAL(Int32) Declaration public void ArrangeWindows_HORIZONTAL(int parentHwnd) Parameters Type Name Description System.Int32 parentHwnd ArrangeWindows_VERTICAL(Int32) Declaration public void ArrangeWindows_VERTICAL(int parentHwnd) Parameters Type Name Description System.Int32 parentHwnd Beep(Win32Utility.BeepType) This demonstrates the different calling variations using the function Beep. Check The declarations in class CallingVariations. Declaration public void Beep(Win32Utility.BeepType type) Parameters Type Name Description Win32Utility.BeepType type CapsLockOff() Declaration public void CapsLockOff() CapsLockOn() Declaration public void CapsLockOn() CloseWindow(IntPtr) Declaration public void CloseWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd DisableWindow(IntPtr) Declaration public void DisableWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd EmptyRecycleBin() Declaration public void EmptyRecycleBin() EnableWindow(IntPtr) Declaration public void EnableWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd FindWindow(String, String) Declaration public int FindWindow(string className, string windowName) Parameters Type Name Description System.String className System.String windowName Returns Type Description System.Int32 FindWindowEx(Int32, Int32, String, String) Declaration public int FindWindowEx(int parent, int child, string className, string windowName) Parameters Type Name Description System.Int32 parent System.Int32 child System.String className System.String windowName Returns Type Description System.Int32 GetForegroundWindow() Declaration public IntPtr GetForegroundWindow() Returns Type Description System.IntPtr GetMousePosition() Declaration public Point GetMousePosition() Returns Type Description System.Drawing.Point GetWindowChildren(IntPtr) Declaration public StringBuilder GetWindowChildren(IntPtr windowHandle) Parameters Type Name Description System.IntPtr windowHandle Returns Type Description System.Text.StringBuilder GetWindowHandle(String, String) Declaration public int GetWindowHandle(string windowCaption, string className) Parameters Type Name Description System.String windowCaption System.String className Returns Type Description System.Int32 GetWindowText(IntPtr, String, Int32) Declaration public int GetWindowText(IntPtr handle, string title, int maxLength) Parameters Type Name Description System.IntPtr handle System.String title System.Int32 maxLength Returns Type Description System.Int32 GetWindowTextLength(Int32) Declaration public int GetWindowTextLength(int handle) Parameters Type Name Description System.Int32 handle Returns Type Description System.Int32 GetWindowThreadProcessID(IntPtr) Declaration public int GetWindowThreadProcessID(IntPtr handle) Parameters Type Name Description System.IntPtr handle Returns Type Description System.Int32 HibernateSystem() Declaration public bool HibernateSystem() Returns Type Description System.Boolean HideCaret(Int32) Declaration public void HideCaret(int windowHandle) Parameters Type Name Description System.Int32 windowHandle HideWindow(IntPtr) Declaration public void HideWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd IsWindowActive(IntPtr) Declaration public bool IsWindowActive(IntPtr windowHandle) Parameters Type Name Description System.IntPtr windowHandle Returns Type Description System.Boolean IsWindowEnabled(IntPtr) Declaration public bool IsWindowEnabled(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd Returns Type Description System.Boolean IsWindowMaximized(IntPtr) Declaration public bool IsWindowMaximized(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd Returns Type Description System.Boolean IsWindowMinimized(IntPtr) Declaration public bool IsWindowMinimized(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd Returns Type Description System.Boolean IsWindowPresent(IntPtr) Declaration public bool IsWindowPresent(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd Returns Type Description System.Boolean IsWindowVisible(IntPtr) Declaration public bool IsWindowVisible(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd Returns Type Description System.Boolean MaximizeWindow(IntPtr) Declaration public void MaximizeWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd MinimizeWindow(IntPtr) Declaration public void MinimizeWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd MoveWindow(Int32, Int32, Int32, Int32, Int32, Boolean) Declaration public bool MoveWindow(int windowHandle, int X, int Y, int windowWidth, int windowHeight, bool repaintWindow) Parameters Type Name Description System.Int32 windowHandle System.Int32 X System.Int32 Y System.Int32 windowWidth System.Int32 windowHeight System.Boolean repaintWindow Returns Type Description System.Boolean RestoreWindow(IntPtr) Declaration public void RestoreWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd SendWindowMessage(IntPtr, Win32Utility.WindowMessage) Declaration public void SendWindowMessage(IntPtr receiverWindowHandle, Win32Utility.WindowMessage message) Parameters Type Name Description System.IntPtr receiverWindowHandle Win32Utility.WindowMessage message SendWindowMessage(IntPtr, Int32, Int32, Int32) Declaration public void SendWindowMessage(IntPtr receiverWindowHandle, int wMsg, int wParam, int lParam) Parameters Type Name Description System.IntPtr receiverWindowHandle System.Int32 wMsg System.Int32 wParam System.Int32 lParam SendWindowMessage(IntPtr, Int32, Int32, String) Declaration public void SendWindowMessage(IntPtr receiverWindowHandle, int wMsg, int wParam, string lParam) Parameters Type Name Description System.IntPtr receiverWindowHandle System.Int32 wMsg System.Int32 wParam System.String lParam SetFocus(IntPtr) Declaration public void SetFocus(IntPtr handle) Parameters Type Name Description System.IntPtr handle SetForegroundWindow(IntPtr) Declaration public void SetForegroundWindow(IntPtr handle) Parameters Type Name Description System.IntPtr handle SetMousePosition(Int32, Int32) Declaration public void SetMousePosition(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y SetWallpaper(String) Declaration public void SetWallpaper(string filePath) Parameters Type Name Description System.String filePath SetWindowParent(Int32, Int32) Declaration public void SetWindowParent(int childWindowHandle, int parentWindowHandle) Parameters Type Name Description System.Int32 childWindowHandle System.Int32 parentWindowHandle SetWindowPostion(Int32, Int32, Int32, Int32, Int32, Int32, Win32Utility.PostionFlags) Declaration public void SetWindowPostion(int handleOfWindow, int placementOrder, int horizontalPosition, int verticalPostion, int width, int height, Win32Utility.PostionFlags windowPostion) Parameters Type Name Description System.Int32 handleOfWindow System.Int32 placementOrder System.Int32 horizontalPosition System.Int32 verticalPostion System.Int32 width System.Int32 height Win32Utility.PostionFlags windowPostion SetWindowText(IntPtr, String) Declaration public void SetWindowText(IntPtr windowHandle, string text) Parameters Type Name Description System.IntPtr windowHandle System.String text ShowCaret(Int32) Declaration public void ShowCaret(int windowHandle) Parameters Type Name Description System.Int32 windowHandle ShowWindow(IntPtr) Declaration public void ShowWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd ShuffleWindow(IntPtr) Declaration public void ShuffleWindow(IntPtr hWnd) Parameters Type Name Description System.IntPtr hWnd WindowIsFocused(IntPtr) Declaration public bool WindowIsFocused(IntPtr handle) Parameters Type Name Description System.IntPtr handle Returns Type Description System.Boolean"
  },
  "api/Syn.Utility.Utilities.Win32Utility.ZOrder.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.ZOrder.html",
    "title": "Enum Win32Utility.ZOrder - Syn Developer Network",
    "keywords": "Enum Win32Utility.ZOrder Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum ZOrder Fields Name Description Bottom Notopmost Top Topmost"
  },
  "api/Syn.Utility.Utilities.WindowSizeType.html": {
    "href": "api/Syn.Utility.Utilities.WindowSizeType.html",
    "title": "Enum WindowSizeType - Syn Developer Network",
    "keywords": "Enum WindowSizeType Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum WindowSizeType Fields Name Description Normal Square Wide"
  },
  "api/Syn.Utility.Utilities.WpfUtility.html": {
    "href": "api/Syn.Utility.Utilities.WpfUtility.html",
    "title": "Class WpfUtility - Syn Developer Network",
    "keywords": "Class WpfUtility Inheritance System.Object WpfUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class WpfUtility Methods Restart() Restarts a WPF application. Declaration public void Restart() RestoreDesignBackground(UserControl) Declaration public void RestoreDesignBackground(UserControl element) Parameters Type Name Description System.Windows.Controls.UserControl element"
  },
  "api/Syn.Utility.Utilities.XmlUtility.html": {
    "href": "api/Syn.Utility.Utilities.XmlUtility.html",
    "title": "Class XmlUtility - Syn Developer Network",
    "keywords": "Class XmlUtility Inheritance System.Object XmlUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class XmlUtility Methods Deserialize<T>(String) Declaration public T Deserialize<T>(string xml)where T : class Parameters Type Name Description System.String xml Returns Type Description T Type Parameters Name Description T EndsWithCloseTag(String) Declaration public bool EndsWithCloseTag(string input) Parameters Type Name Description System.String input Returns Type Description System.Boolean EndsWithOpenTag(String) Declaration public bool EndsWithOpenTag(string input) Parameters Type Name Description System.String input Returns Type Description System.Boolean GetDepth(XNode) Declaration public int GetDepth(XNode node) Parameters Type Name Description System.Xml.Linq.XNode node Returns Type Description System.Int32 GetInnerXml(XElement) Declaration public string GetInnerXml(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description System.String NextIndentLevel(XNode) Declaration public int NextIndentLevel(XNode node) Parameters Type Name Description System.Xml.Linq.XNode node Returns Type Description System.Int32 RemoveAllNamespaces(XElement) Declaration public XElement RemoveAllNamespaces(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description System.Xml.Linq.XElement SaveXElement(String, XElement) Declaration public void SaveXElement(string filePath, XElement element) Parameters Type Name Description System.String filePath System.Xml.Linq.XElement element Serialize(Object) Declaration public string Serialize(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String StartsWithCloseTag(String) Declaration public bool StartsWithCloseTag(string input) Parameters Type Name Description System.String input Returns Type Description System.Boolean StartsWithOpenTag(String) Declaration public bool StartsWithOpenTag(string input) Parameters Type Name Description System.String input Returns Type Description System.Boolean Tagged(String) Declaration public string Tagged(string name) Parameters Type Name Description System.String name Returns Type Description System.String TransformToHtml(String, String) Declaration public string TransformToHtml(string inputXml, string xsltString) Parameters Type Name Description System.String inputXml System.String xsltString Returns Type Description System.String UpperCaseTextOnly(XElement) Converts the Text value of an XElement to UpperCase Declaration public void UpperCaseTextOnly(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element"
  },
  "api/Syn.VA.Interaction.Message.html": {
    "href": "api/Syn.VA.Interaction.Message.html",
    "title": "Class Message - Syn Developer Network",
    "keywords": "Class Message Inheritance System.Object Message Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Interaction Assembly :Syn.VA.dll Syntax public class Message Constructors Message() Declaration public Message() Message(String, MessageType) Declaration public Message(string message, MessageType type) Parameters Type Name Description System.String message MessageType type Fields Empty An Empty Message. Declaration public static readonly Message Empty Field Value Type Description Message Properties From Gets or sets the component from which this message is received. Declaration public string From { get; set; } Property Value Type Description System.String Name of the component sending this message. Remarks The value of this property must be a unique name of the component. IsEmpty Gets a value indicating whether this instance is an empty message. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if this instance is empty; otherwise, false . Text Declaration public string Text { get; set; } Property Value Type Description System.String Type Declaration public MessageType Type { get; set; } Property Value Type Description MessageType User Gets or sets the user. Declaration public User User { get; set; } Property Value Type Description User The targetted user. Remarks Returns MainUser if the value is not set."
  },
  "api/Syn.VA.Interaction.MessageType.html": {
    "href": "api/Syn.VA.Interaction.MessageType.html",
    "title": "Enum MessageType - Syn Developer Network",
    "keywords": "Enum MessageType Namespace :Syn.VA.Interaction Assembly :Syn.VA.dll Syntax public enum MessageType Fields Name Description EventMessage An event message that is triggered when an internal event is fired. None Undefined message type. UserMessage User message type."
  },
  "api/Syn.Utility.File.ShortcutFile.IPersist.html": {
    "href": "api/Syn.Utility.File.ShortcutFile.IPersist.html",
    "title": "Interface ShortcutFile.IPersist - Syn Developer Network",
    "keywords": "Interface ShortcutFile.IPersist Namespace :Syn.Utility.File Assembly :Syn.Utility.dll Syntax [Guid(\"0000010c-0000-0000-c000-000000000046\")] [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] public interface IPersist Methods GetClassID(out Guid) Declaration void GetClassID(out Guid pClassID) Parameters Type Name Description System.Guid pClassID"
  },
  "api/Syn.Utility.Utilities.html": {
    "href": "api/Syn.Utility.Utilities.html",
    "title": "Namespace Syn.Utility.Utilities - Syn Developer Network",
    "keywords": "Namespace Syn.Utility.Utilities Classes AspUtility ComputerUtility ConvertUtility DateUtility DirectoryUtility FileUtility ImageUtility JavaScriptUtility ListUtility MathUtility MemoryUtility NetworkUtility PatternsUtility PerformanceUtility ProcessUtility RegexPatternUtility RegexUtility ScreenUtility SecurityUtility Helper class to deal with string encryption and decryption. TextUtility TimingUtility Win32Utility WpfUtility XmlUtility Structs Win32Utility.WindowMessage Enums AspUtility.Headers AspUtility.LabelColor SizeMeasure Win32Utility.BeepType Win32Utility.Gw Win32Utility.PostionFlags Win32Utility.ZOrder WindowSizeType"
  },
  "api/Syn.Utility.ViewModelBase.html": {
    "href": "api/Syn.Utility.ViewModelBase.html",
    "title": "Class ViewModelBase - Syn Developer Network",
    "keywords": "Class ViewModelBase Inheritance System.Object ViewModelBase ProjectManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility Assembly :Syn.Utility.dll Syntax public class ViewModelBase : INotifyPropertyChanged Methods OnPropertyChanged(String) Declaration public void OnPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged"
  },
  "api/Syn.Utility.html": {
    "href": "api/Syn.Utility.html",
    "title": "Namespace Syn.Utility - Syn Developer Network",
    "keywords": "Namespace Syn.Utility Classes SynUtility ViewModelBase"
  },
  "api/Syn.VA.AvatarManager.html": {
    "href": "api/Syn.VA.AvatarManager.html",
    "title": "Class AvatarManager - Syn Developer Network",
    "keywords": "Class AvatarManager Inheritance System.Object AvatarManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class AvatarManager Methods Morph(String, TimeSpan) Declaration public void Morph(string morphId, TimeSpan timeSpan) Parameters Type Name Description System.String morphId System.TimeSpan timeSpan Events Morphing Declaration public event EventHandler<MorphingEventArgs> Morphing Event Type Type Description System.EventHandler < MorphingEventArgs >"
  },
  "api/Syn.VA.Collections.ChoiceCollection.html": {
    "href": "api/Syn.VA.Collections.ChoiceCollection.html",
    "title": "Class ChoiceCollection - Syn Developer Network",
    "keywords": "Class ChoiceCollection A collection class to hold all known choices for interacting with the VirtualAssistant . Inheritance System.Object ChoiceCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Collections Assembly :Syn.VA.dll Syntax public class ChoiceCollection : ICollection<IChoiceItem>, IEnumerable<IChoiceItem>, IEnumerable Constructors ChoiceCollection() Initializes a new instance of the ChoiceCollection class. Declaration public ChoiceCollection() Properties Count Gets the number of elements contained in the System.Collections.Generic.ICollection<T> . Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(IChoiceItem) Adds an item to the System.Collections.Generic.ICollection<T> . Declaration public void Add(IChoiceItem item) Parameters Type Name Description IChoiceItem item The object to add to the System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Add(T) Remarks Duplicate Value is ignored. Clear() Removes all items from the System.Collections.Generic.ICollection<T> . Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IChoiceItem) Determines whether the System.Collections.Generic.ICollection<T> contains a specific value. Declaration public bool Contains(IChoiceItem item) Parameters Type Name Description IChoiceItem item The object to locate in the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item is found in the System.Collections.Generic.ICollection<T> ; otherwise, false. Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(IChoiceItem[], Int32) Copies the elements of the System.Collections.Generic.ICollection<T> to an System.Array , starting at a particular System.Array index. Declaration public void CopyTo(IChoiceItem[] array, int arrayIndex) Parameters Type Name Description IChoiceItem [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection<T> . The System.Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IChoiceItem> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IChoiceItem > A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IChoiceItem) Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T> . Declaration public bool Remove(IChoiceItem item) Parameters Type Name Description IChoiceItem item The object to remove from the System.Collections.Generic.ICollection<T> . Returns Type Description System.Boolean true if item was successfully removed from the System.Collections.Generic.ICollection<T> ; otherwise, false. This method also returns false if item is not found in the original System.Collections.Generic.ICollection<T> . Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.IEnumerable.GetEnumerator() See Also System.Collections.Generic.ICollection <T>"
  },
  "api/Syn.VA.Collections.ChoiceItem.html": {
    "href": "api/Syn.VA.Collections.ChoiceItem.html",
    "title": "Class ChoiceItem - Syn Developer Network",
    "keywords": "Class ChoiceItem Inheritance System.Object ChoiceItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Collections Assembly :Syn.VA.dll Syntax public class ChoiceItem : IChoiceItem Constructors ChoiceItem(String, String) Declaration public ChoiceItem(string category, string value) Parameters Type Name Description System.String category System.String value Properties Category Declaration public string Category { get; } Property Value Type Description System.String Implements IChoiceItem.Category Value Declaration public string Value { get; } Property Value Type Description System.String Implements IChoiceItem.Value"
  },
  "api/Syn.VA.Collections.PluginCollection.html": {
    "href": "api/Syn.VA.Collections.PluginCollection.html",
    "title": "Class PluginCollection - Syn Developer Network",
    "keywords": "Class PluginCollection Inheritance System.Object PluginCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Collections Assembly :Syn.VA.dll Syntax public class PluginCollection : ICollection<IPlugin>, IEnumerable<IPlugin>, IEnumerable Constructors PluginCollection() Declaration public PluginCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(IPlugin) Declaration public void Add(IPlugin item) Parameters Type Name Description IPlugin item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IPlugin) Declaration public bool Contains(IPlugin item) Parameters Type Name Description IPlugin item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(IPlugin[], Int32) Declaration public void CopyTo(IPlugin[] array, int arrayIndex) Parameters Type Name Description IPlugin [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<IPlugin> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IPlugin > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetPluginByName(String) Gets the plugin with the specified name. Declaration public IPlugin GetPluginByName(string pluginName) Parameters Type Name Description System.String pluginName Name of the plugin. Returns Type Description IPlugin The plugin if found otherwise null . GetPluginByType<T>() Gets the plugin of the specified type. Declaration public T GetPluginByType<T>()where T : IPlugin Returns Type Description T The plugin if found otherwise null . Type Parameters Name Description T Type of Plugin. Load(Assembly) Declaration public void Load(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Remove(IPlugin) Declaration public bool Remove(IPlugin item) Parameters Type Name Description IPlugin item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.VA.Collections.ServiceCollection.html": {
    "href": "api/Syn.VA.Collections.ServiceCollection.html",
    "title": "Class ServiceCollection - Syn Developer Network",
    "keywords": "Class ServiceCollection A Service management class that helps interact with added Service Inheritance System.Object ServiceCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Collections Assembly :Syn.VA.dll Syntax public class ServiceCollection : ICollection<Service>, IEnumerable<Service>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(Service) Adds the specified service. Declaration public void Add(Service service) Parameters Type Name Description Service service The service. Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(Service) Declaration public bool Contains(Service service) Parameters Type Name Description Service service Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string serviceId) Parameters Type Name Description System.String serviceId Returns Type Description System.Boolean CopyTo(Service[], Int32) Declaration public void CopyTo(Service[] array, int arrayIndex) Parameters Type Name Description Service [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<Service> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Service > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() GetServiceById(String) Gets the Service by the case-insensitive identifier. Declaration public Service GetServiceById(string serviceId) Parameters Type Name Description System.String serviceId The service identifier. Returns Type Description Service Remove(Service) Declaration public bool Remove(Service service) Parameters Type Name Description Service service Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Remove(String) Removes a Service by ID. Declaration public bool Remove(string serviceId) Parameters Type Name Description System.String serviceId Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.VA.Collections.html": {
    "href": "api/Syn.VA.Collections.html",
    "title": "Namespace Syn.VA.Collections - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Collections Classes ChoiceCollection A collection class to hold all known choices for interacting with the VirtualAssistant . ChoiceItem PluginCollection ServiceCollection A Service management class that helps interact with added Service"
  },
  "api/Syn.VA.Component.ComponentManager.html": {
    "href": "api/Syn.VA.Component.ComponentManager.html",
    "title": "Class ComponentManager - Syn Developer Network",
    "keywords": "Class ComponentManager Container class for external component interactions. Inheritance System.Object ComponentManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Component Assembly :Syn.VA.dll Syntax public class ComponentManager Constructors ComponentManager() Declaration public ComponentManager() Methods Add(Object) Declaration public void Add(object component) Parameters Type Name Description System.Object component Add(String, Object) Declaration public void Add(string componentName, object component) Parameters Type Name Description System.String componentName System.Object component Contains(String) Declaration public bool Contains(string componentName) Parameters Type Name Description System.String componentName Returns Type Description System.Boolean Contains<T>() Declaration public bool Contains<T>() Returns Type Description System.Boolean Type Parameters Name Description T Get<T>() Declaration public T Get<T>() Returns Type Description T Type Parameters Name Description T Get<T>(String) Declaration public T Get<T>(string componentName) Parameters Type Name Description System.String componentName Returns Type Description T Type Parameters Name Description T Remove(String) Declaration public void Remove(string componentName) Parameters Type Name Description System.String componentName Remove<T>() Declaration public void Remove<T>() Type Parameters Name Description T"
  },
  "api/Syn.VA.Component.html": {
    "href": "api/Syn.VA.Component.html",
    "title": "Namespace Syn.VA.Component - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Component Classes ComponentManager Container class for external component interactions."
  },
  "api/Syn.VA.Events.HintReceivedEventArgs.html": {
    "href": "api/Syn.VA.Events.HintReceivedEventArgs.html",
    "title": "Class HintReceivedEventArgs - Syn Developer Network",
    "keywords": "Class HintReceivedEventArgs Inheritance System.Object HintReceivedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class HintReceivedEventArgs Properties Hint Declaration public string Hint { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.VA.Events.MessageReceivedEventArgs.html": {
    "href": "api/Syn.VA.Events.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs - Syn Developer Network",
    "keywords": "Class MessageReceivedEventArgs Inheritance System.Object MessageReceivedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class MessageReceivedEventArgs Properties Handled Gets or sets a value indicating whether this MessageReceivedEventArgs is handled. Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean true if handled; otherwise, false . Message Declaration public Message Message { get; set; } Property Value Type Description Message"
  },
  "api/Syn.VA.Events.RecognizerChangedEventArgs.html": {
    "href": "api/Syn.VA.Events.RecognizerChangedEventArgs.html",
    "title": "Class RecognizerChangedEventArgs - Syn Developer Network",
    "keywords": "Class RecognizerChangedEventArgs Inheritance System.Object System.EventArgs RecognizerChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class RecognizerChangedEventArgs : EventArgs Properties Recognizer Declaration public ISpeechRecognizer Recognizer { get; set; } Property Value Type Description ISpeechRecognizer"
  },
  "api/Syn.VA.Events.ResponseGeneratedEventArgs.html": {
    "href": "api/Syn.VA.Events.ResponseGeneratedEventArgs.html",
    "title": "Class ResponseGeneratedEventArgs - Syn Developer Network",
    "keywords": "Class ResponseGeneratedEventArgs Inheritance System.Object ResponseGeneratedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class ResponseGeneratedEventArgs Properties Response Declaration public Response Response { get; set; } Property Value Type Description Response"
  },
  "api/Syn.VA.Events.SettingsChangedAction.html": {
    "href": "api/Syn.VA.Events.SettingsChangedAction.html",
    "title": "Enum SettingsChangedAction - Syn Developer Network",
    "keywords": "Enum SettingsChangedAction Describes the action that caused a SettingsChanged event. Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public enum SettingsChangedAction Fields Name Description Add A new variable added. Remove An existing variable is removed. Replace Value or Values part of an existing variable is updated. Reset Settings cleared."
  },
  "api/Syn.VA.Speech.ISpeechSynthesizer.html": {
    "href": "api/Syn.VA.Speech.ISpeechSynthesizer.html",
    "title": "Interface ISpeechSynthesizer - Syn Developer Network",
    "keywords": "Interface ISpeechSynthesizer Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public interface ISpeechSynthesizer Properties AvailableVoices Declaration IEnumerable<string> AvailableVoices { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > CurrentVoice Declaration string CurrentVoice { get; } Property Value Type Description System.String Gender Declaration Gender Gender { get; } Property Value Type Description Gender IsEnabled Declaration bool IsEnabled { get; set; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Methods Pause() Declaration void Pause() Resume() Declaration void Resume() SelectVoice(String) Declaration void SelectVoice(string voiceName) Parameters Type Name Description System.String voiceName Speak(String) Declaration void Speak(string message) Parameters Type Name Description System.String message Stop() Declaration void Stop() Events SpeakCompleted Declaration event EventHandler SpeakCompleted Event Type Type Description System.EventHandler VisemeReached Declaration event EventHandler<VisemeArrivedEventArgs> VisemeReached Event Type Type Description System.EventHandler < VisemeArrivedEventArgs >"
  },
  "api/Syn.VA.Speech.MorphingEventArgs.html": {
    "href": "api/Syn.VA.Speech.MorphingEventArgs.html",
    "title": "Class MorphingEventArgs - Syn Developer Network",
    "keywords": "Class MorphingEventArgs Inheritance System.Object System.EventArgs MorphingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class MorphingEventArgs : EventArgs Properties Duration Declaration public TimeSpan Duration { get; set; } Property Value Type Description System.TimeSpan MorphId Declaration public string MorphId { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.VA.Speech.RecognizerStatus.html": {
    "href": "api/Syn.VA.Speech.RecognizerStatus.html",
    "title": "Enum RecognizerStatus - Syn Developer Network",
    "keywords": "Enum RecognizerStatus Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public enum RecognizerStatus Fields Name Description Listening Started Stopped"
  },
  "api/Syn.VA.Speech.SpeechManager.html": {
    "href": "api/Syn.VA.Speech.SpeechManager.html",
    "title": "Class SpeechManager - Syn Developer Network",
    "keywords": "Class SpeechManager Inheritance System.Object SpeechManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class SpeechManager Constructors SpeechManager() Declaration public SpeechManager() Properties Recognizers Declaration public SpeechRecognizerCollection Recognizers { get; } Property Value Type Description SpeechRecognizerCollection Synthesizers Declaration public SpeechSynthesizerCollection Synthesizers { get; } Property Value Type Description SpeechSynthesizerCollection"
  },
  "api/Syn.VA.Speech.SpeechRecognizerCollection.html": {
    "href": "api/Syn.VA.Speech.SpeechRecognizerCollection.html",
    "title": "Class SpeechRecognizerCollection - Syn Developer Network",
    "keywords": "Class SpeechRecognizerCollection Inheritance System.Object SpeechRecognizerCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class SpeechRecognizerCollection : ICollection<ISpeechRecognizer>, IEnumerable<ISpeechRecognizer>, IEnumerable Constructors SpeechRecognizerCollection() Declaration public SpeechRecognizerCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count Current Declaration public ISpeechRecognizer Current { get; } Property Value Type Description ISpeechRecognizer IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(ISpeechRecognizer) Declaration public void Add(ISpeechRecognizer item) Parameters Type Name Description ISpeechRecognizer item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ISpeechRecognizer) Declaration public bool Contains(ISpeechRecognizer item) Parameters Type Name Description ISpeechRecognizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(ISpeechRecognizer[], Int32) Declaration public void CopyTo(ISpeechRecognizer[] array, int arrayIndex) Parameters Type Name Description ISpeechRecognizer [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<ISpeechRecognizer> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ISpeechRecognizer > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(ISpeechRecognizer) Declaration public bool Remove(ISpeechRecognizer item) Parameters Type Name Description ISpeechRecognizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Select(String) Declaration public bool Select(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Events RecognizerChanged Declaration public event EventHandler<RecognizerChangedEventArgs> RecognizerChanged Event Type Type Description System.EventHandler < RecognizerChangedEventArgs > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.VA.Speech.SpeechSynthesizerCollection.html": {
    "href": "api/Syn.VA.Speech.SpeechSynthesizerCollection.html",
    "title": "Class SpeechSynthesizerCollection - Syn Developer Network",
    "keywords": "Class SpeechSynthesizerCollection Inheritance System.Object SpeechSynthesizerCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class SpeechSynthesizerCollection : ICollection<ISpeechSynthesizer>, IEnumerable<ISpeechSynthesizer>, IEnumerable Constructors SpeechSynthesizerCollection() Declaration public SpeechSynthesizerCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count Current Declaration public ISpeechSynthesizer Current { get; } Property Value Type Description ISpeechSynthesizer IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Methods Add(ISpeechSynthesizer) Declaration public void Add(ISpeechSynthesizer item) Parameters Type Name Description ISpeechSynthesizer item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ISpeechSynthesizer) Declaration public bool Contains(ISpeechSynthesizer item) Parameters Type Name Description ISpeechSynthesizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(ISpeechSynthesizer[], Int32) Declaration public void CopyTo(ISpeechSynthesizer[] array, int arrayIndex) Parameters Type Name Description ISpeechSynthesizer [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<ISpeechSynthesizer> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ISpeechSynthesizer > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(ISpeechSynthesizer) Declaration public bool Remove(ISpeechSynthesizer item) Parameters Type Name Description ISpeechSynthesizer item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Select(String) Declaration public bool Select(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Events SynthesizerChanged Declaration public event EventHandler<SynthesizerChangedEventArgs> SynthesizerChanged Event Type Type Description System.EventHandler < SynthesizerChangedEventArgs > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.VA.Speech.UtteranceRecognizedEventArgs.html": {
    "href": "api/Syn.VA.Speech.UtteranceRecognizedEventArgs.html",
    "title": "Class UtteranceRecognizedEventArgs - Syn Developer Network",
    "keywords": "Class UtteranceRecognizedEventArgs Inheritance System.Object System.EventArgs UtteranceRecognizedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class UtteranceRecognizedEventArgs : EventArgs Constructors UtteranceRecognizedEventArgs() Declaration public UtteranceRecognizedEventArgs() Properties Confidence Declaration public float Confidence { get; set; } Property Value Type Description System.Single Text Declaration public string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.VA.Speech.VisemeArrivedEventArgs.html": {
    "href": "api/Syn.VA.Speech.VisemeArrivedEventArgs.html",
    "title": "Class VisemeArrivedEventArgs - Syn Developer Network",
    "keywords": "Class VisemeArrivedEventArgs Inheritance System.Object System.EventArgs VisemeArrivedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Speech Assembly :Syn.VA.dll Syntax public class VisemeArrivedEventArgs : EventArgs Properties Duration Declaration public TimeSpan Duration { get; set; } Property Value Type Description System.TimeSpan Viseme Declaration public int Viseme { get; set; } Property Value Type Description System.Int32"
  },
  "api/Syn.VA.Speech.html": {
    "href": "api/Syn.VA.Speech.html",
    "title": "Namespace Syn.VA.Speech - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Speech Classes MorphingEventArgs SpeechManager SpeechRecognizerCollection SpeechSynthesizerCollection UtteranceRecognizedEventArgs VisemeArrivedEventArgs Interfaces ISpeechRecognizer ISpeechSynthesizer Enums RecognizerStatus"
  },
  "api/Syn.VA.Timing.ServiceTimer.html": {
    "href": "api/Syn.VA.Timing.ServiceTimer.html",
    "title": "Class ServiceTimer - Syn Developer Network",
    "keywords": "Class ServiceTimer Inheritance System.Object ServiceTimer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Timing Assembly :Syn.VA.dll Syntax public class ServiceTimer Methods PerformTick() Function that should be called by the Service Timer once every 1 second. Declaration public void PerformTick() Events Tick Event that is fired when a tick is performed. Declaration public event EventHandler Tick Event Type Type Description System.EventHandler"
  },
  "api/Syn.VA.Timing.html": {
    "href": "api/Syn.VA.Timing.html",
    "title": "Namespace Syn.VA.Timing - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Timing Classes ServiceTimer"
  },
  "api/Syn.VA.User.html": {
    "href": "api/Syn.VA.User.html",
    "title": "Class User - Syn Developer Network",
    "keywords": "Class User Inheritance System.Object User BotUser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class User Constructors User(String) Initializes a new instance of the User class. Declaration public User(string uniqueId) Parameters Type Name Description System.String uniqueId The unique identifier. Properties ID Gets the identifier of this user. Declaration public string ID { get; } Property Value Type Description System.String The identifier. IsMain Gets a value indicating whether this instance is MainUser . Declaration public virtual bool IsMain { get; } Property Value Type Description System.Boolean true if this instance is MainUser ; otherwise, false ."
  },
  "api/Syn.VA.Utility.Extensions.SettingsExtensions.html": {
    "href": "api/Syn.VA.Utility.Extensions.SettingsExtensions.html",
    "title": "Class SettingsExtensions - Syn Developer Network",
    "keywords": "Class SettingsExtensions Inheritance System.Object SettingsExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.VA.Utility.Extensions Assembly :Syn.VA.Utility.dll Syntax public static class SettingsExtensions Methods ApplyToProperties(Settings, Object, String[]) Applies values to the proper public properties of the object specified using this Settings instance. Declaration public static void ApplyToProperties(this Settings settings, object mainObject, params string[] settingNames) Parameters Type Name Description Settings settings System.Object mainObject The object whose properties are to be set. System.String [] settingNames List of variable names to apply. Remarks Settings are only applied to Properties that have public setters. If list of names are provided then the character '-' is ignored. GetDocument(Settings) Declaration public static XDocument GetDocument(this Settings settings) Parameters Type Name Description Settings settings Returns Type Description System.Xml.Linq.XDocument"
  },
  "api/Syn.VA.Utility.Extensions.SettingsManagerExtensions.html": {
    "href": "api/Syn.VA.Utility.Extensions.SettingsManagerExtensions.html",
    "title": "Class SettingsManagerExtensions - Syn Developer Network",
    "keywords": "Class SettingsManagerExtensions Inheritance System.Object SettingsManagerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.VA.Utility.Extensions Assembly :Syn.VA.Utility.dll Syntax public static class SettingsManagerExtensions Methods LoadFromDirectory(SettingsManager, String) Loads Settings from directory. Declaration public static void LoadFromDirectory(this SettingsManager settingsManager, string settingsDirectory) Parameters Type Name Description SettingsManager settingsManager The settings manager. System.String settingsDirectory The settings directory. LoadFromFile(SettingsManager, String) Loads Settings from file. Declaration public static void LoadFromFile(this SettingsManager settingsManager, string settingsFile) Parameters Type Name Description SettingsManager settingsManager The settings manager. System.String settingsFile The settings file path. Save(SettingsManager, Settings, String) Saves the specified Settings to its Settings file path. Declaration public static void Save(this SettingsManager settingsManager, Settings settings, string message = \"\") Parameters Type Name Description SettingsManager settingsManager The settings manager. Settings settings The settings. System.String message"
  },
  "api/Syn.VA.Utility.Extensions.StringConstructor.html": {
    "href": "api/Syn.VA.Utility.Extensions.StringConstructor.html",
    "title": "Class StringConstructor - Syn Developer Network",
    "keywords": "Class StringConstructor Inheritance System.Object StringConstructor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.VA.Utility.Extensions Assembly :Syn.VA.Utility.dll Syntax public class StringConstructor Constructors StringConstructor(String) Declaration public StringConstructor(string value) Parameters Type Name Description System.String value"
  },
  "api/Syn.VA.Utility.Extensions.html": {
    "href": "api/Syn.VA.Utility.Extensions.html",
    "title": "Namespace Syn.VA.Utility.Extensions - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Utility.Extensions Classes SettingsExtensions SettingsManagerExtensions StringConstructor"
  },
  "api/Syn.Bot.Assistant.Telegram.TelegramQuery.html": {
    "href": "api/Syn.Bot.Assistant.Telegram.TelegramQuery.html",
    "title": "Class TelegramQuery - Syn Developer Network",
    "keywords": "Class TelegramQuery Inheritance System.Object TelegramQuery Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Assistant.Telegram Assembly :Syn.Bot.Assistant.dll Syntax public class TelegramQuery Constructors TelegramQuery(CallbackQuery) Declaration public TelegramQuery(CallbackQuery callbackQuery) Parameters Type Name Description Telegram.Bot.Types.CallbackQuery callbackQuery TelegramQuery(Message) Declaration public TelegramQuery(Message message) Parameters Type Name Description Telegram.Bot.Types.Message message Properties CallbackData Declaration public string CallbackData { get; set; } Property Value Type Description System.String CallbackId Declaration public string CallbackId { get; set; } Property Value Type Description System.String ChatId Declaration public long ChatId { get; set; } Property Value Type Description System.Int64 IsCallback Declaration public bool IsCallback { get; } Property Value Type Description System.Boolean Message Declaration public string Message { get; set; } Property Value Type Description System.String MessageId Declaration public int MessageId { get; set; } Property Value Type Description System.Int32 User Declaration public User User { get; } Property Value Type Description Telegram.Bot.Types.User"
  },
  "api/Syn.Bot.Assistant.Web.WebAssistant.html": {
    "href": "api/Syn.Bot.Assistant.Web.WebAssistant.html",
    "title": "Class WebAssistant - Syn Developer Network",
    "keywords": "Class WebAssistant Tailored class for adding Syn Web Assistant widget to ASP.NET websites. Inheritance System.Object WebAssistant Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Assistant.Web Assembly :Syn.Bot.Assistant.dll Syntax public class WebAssistant Constructors WebAssistant() Initializes a new instance of WebAssistant class. Declaration public WebAssistant() Properties Bot Instance of the Bot used by this Agent. Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot Footer Text of the footer. Declaration public string Footer { get; set; } Property Value Type Description System.String FooterLink Link to open when the footer text is clicked. Declaration public string FooterLink { get; set; } Property Value Type Description System.String InputText Default text for input box. Declaration public string InputText { get; set; } Property Value Type Description System.String Intro Default Web Assistant's message. Declaration public string Intro { get; set; } Property Value Type Description System.String Name Name of the Web Assistant. Declaration public string Name { get; set; } Property Value Type Description System.String PackageFileName Package File name with extension. Example \"Package.txt\". Declaration public string PackageFileName { get; set; } Property Value Type Description System.String ResourceUrl URL Directory location to look for image files and SIML package. Declaration public string ResourceUrl { get; set; } Property Value Type Description System.String RestartId Value of the Get URL variable to reload the SIML Package. Declaration public string RestartId { get; set; } Property Value Type Description System.String ServiceUrl Full URL path to the Chat Service. Declaration public string ServiceUrl { get; set; } Property Value Type Description System.String Title Web Assistant's title displayed below the Web Assistant's name. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Process(HttpRequest, HttpResponse) Processes the given request and writes the appropriate response. Declaration public void Process(HttpRequest request, HttpResponse response) Parameters Type Name Description System.Web.HttpRequest request Html request to process. System.Web.HttpResponse response Html response to write to."
  },
  "api/Syn.Bot.Oscova.Attributes.ContextAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.ContextAttribute.html",
    "title": "Class ContextAttribute - Syn Developer Network",
    "keywords": "Class ContextAttribute Represents a user session conversation context. Inheritance System.Object System.Attribute ContextAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class ContextAttribute : Attribute Constructors ContextAttribute(Object) Declaration public ContextAttribute(object value) Parameters Type Name Description System.Object value ContextAttribute(Object, Int32) Declaration public ContextAttribute(object value, int lifespan) Parameters Type Name Description System.Object value System.Int32 lifespan ContextAttribute(String) Declaration public ContextAttribute(string name) Parameters Type Name Description System.String name Properties Lifespan Gets the lifespan. Declaration public int Lifespan { get; } Property Value Type Description System.Int32 The lifespan. Name Gets the context name. Declaration public string Name { get; } Property Value Type Description System.String The context name. See Also System.Attribute"
  },
  "api/Syn.Bot.Oscova.Attributes.ExpressionAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.ExpressionAttribute.html",
    "title": "Class ExpressionAttribute - Syn Developer Network",
    "keywords": "Class ExpressionAttribute Represents a user input expression. Inheritance System.Object System.Attribute ExpressionAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class ExpressionAttribute : Attribute Constructors ExpressionAttribute() Declaration public ExpressionAttribute() ExpressionAttribute(String) Initializes a new instance of the ExpressionAttribute class. Declaration public ExpressionAttribute(string expression) Parameters Type Name Description System.String expression The user input expression. ExpressionAttribute(String, String[]) Initializes a new instance of the ExpressionAttribute class. Declaration public ExpressionAttribute(string expression, params string[] entityTypes) Parameters Type Name Description System.String expression The user input expression. System.String [] entityTypes The entity types. Properties TemplateEntities Declaration public string[] TemplateEntities { get; } Property Value Type Description System.String [] Value Declaration public string Value { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Attributes.IntentAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.IntentAttribute.html",
    "title": "Class IntentAttribute - Syn Developer Network",
    "keywords": "Class IntentAttribute Inheritance System.Object System.Attribute IntentAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax public class IntentAttribute : Attribute Constructors IntentAttribute(String) Declaration public IntentAttribute(string intentName) Parameters Type Name Description System.String intentName Properties Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Attributes.PromptAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.PromptAttribute.html",
    "title": "Class PromptAttribute - Syn Developer Network",
    "keywords": "Class PromptAttribute Represents a Prompt message that is returned when the specified entity is missing. Inheritance System.Object System.Attribute PromptAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class PromptAttribute : Attribute Constructors PromptAttribute(String, String) Declaration public PromptAttribute(string missingEntityType, string promptMessage) Parameters Type Name Description System.String missingEntityType System.String promptMessage Properties MissingEntityType Declaration public string MissingEntityType { get; } Property Value Type Description System.String PromptMessage Declaration public string PromptMessage { get; } Property Value Type Description System.String See Also System.Attribute"
  },
  "api/Syn.Bot.Oscova.Attributes.SynonymsAttribute.html": {
    "href": "api/Syn.Bot.Oscova.Attributes.SynonymsAttribute.html",
    "title": "Class SynonymsAttribute - Syn Developer Network",
    "keywords": "Class SynonymsAttribute Inheritance System.Object System.Attribute SynonymsAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Attributes Assembly :Syn.Bot.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class SynonymsAttribute : Attribute Constructors SynonymsAttribute(String[]) Declaration public SynonymsAttribute(params string[] stringList) Parameters Type Name Description System.String [] stringList Properties Alternatives Declaration public string[] Alternatives { get; } Property Value Type Description System.String []"
  },
  "api/Syn.Bot.Oscova.BotConfiguration.html": {
    "href": "api/Syn.Bot.Oscova.BotConfiguration.html",
    "title": "Class BotConfiguration - Syn Developer Network",
    "keywords": "Class BotConfiguration Represents the Bot configuration used by various components. Inheritance System.Object BotConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class BotConfiguration Constructors BotConfiguration() Initializes a new instance of the BotConfiguration class. Declaration public BotConfiguration() Properties ContextLifespan Gets or sets the default context request lifespan. Declaration public int ContextLifespan { get; set; } Property Value Type Description System.Int32 The context request lifespan. Remarks A ContextItem is removed after being idle for the specified lifespan. MachineLearningRate Gets or sets the machine learning rate. Declaration public double MachineLearningRate { get; set; } Property Value Type Description System.Double The machine learning rate. Remarks Default is 0.25 MaxIntentCount Gets or sets the maximum number of intents to return after evaluation. Declaration public int MaxIntentCount { get; set; } Property Value Type Description System.Int32 The maximum intent count. Remarks Default is 5 MaxMachineLearningLoss Gets or sets the maximum machine learning loss. Declaration public double MaxMachineLearningLoss { get; set; } Property Value Type Description System.Double The maximum machine learning loss. ProcessingMode Gets or sets the processing mode. Declaration public ProcessingMode ProcessingMode { get; set; } Property Value Type Description ProcessingMode The processing mode. Remarks Default is Rule RequiredRecognizersOnly Gets or sets a value indicating whether OscovaBot should load only required entity recognizers. Declaration public bool RequiredRecognizersOnly { get; set; } Property Value Type Description System.Boolean true if required parsers only; otherwise, false . Remarks Default is false Scoring Gets the scoring configuration. Declaration public ScoreConfiguration Scoring { get; } Property Value Type Description ScoreConfiguration The scoring configuration ShowIntentInterpretation Gets or sets a value indicating whether intent interpretation must be serialized. Declaration public bool ShowIntentInterpretation { get; set; } Property Value Type Description System.Boolean true if intent interpretation must be serialized; otherwise, false . Remarks Defautl is false UseFullIntentName Gets or sets a value indicating whether to use full intent name. Declaration public bool UseFullIntentName { get; set; } Property Value Type Description System.Boolean true if use full intent name; otherwise, false . Remarks A full intent name combines the dialog class name and intent method name. Default is true"
  },
  "api/Syn.Bot.Oscova.Collection.BotUserCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.BotUserCollection.html",
    "title": "Class BotUserCollection - Syn Developer Network",
    "keywords": "Class BotUserCollection Inheritance System.Object BotUserCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class BotUserCollection : ICollection<BotUser>, IEnumerable<BotUser>, IEnumerable Constructors BotUserCollection() Declaration public BotUserCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public BotUser this[string userId] { get; } Parameters Type Name Description System.String userId Property Value Type Description BotUser Methods Add(BotUser) Declaration public void Add(BotUser item) Parameters Type Name Description BotUser item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(BotUser) Declaration public bool Contains(BotUser item) Parameters Type Name Description BotUser item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string userId) Parameters Type Name Description System.String userId Returns Type Description System.Boolean CopyTo(BotUser[], Int32) Declaration public void CopyTo(BotUser[] array, int arrayIndex) Parameters Type Name Description BotUser [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<BotUser> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < BotUser > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(BotUser) Declaration public bool Remove(BotUser item) Parameters Type Name Description BotUser item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.ContextParameterCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.ContextParameterCollection.html",
    "title": "Class ContextParameterCollection - Syn Developer Network",
    "keywords": "Class ContextParameterCollection Inheritance System.Object ContextParameterCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class ContextParameterCollection : ICollection<ContextParameter>, IEnumerable<ContextParameter>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[String] Declaration public ContextParameter this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description ContextParameter Methods Add(ContextParameter) Declaration public void Add(ContextParameter item) Parameters Type Name Description ContextParameter item Implements System.Collections.Generic.ICollection<T>.Add(T) Add(String, String) Declaration public void Add(string parameterName, string parameterValue) Parameters Type Name Description System.String parameterName System.String parameterValue Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(ContextParameter) Declaration public bool Contains(ContextParameter item) Parameters Type Name Description ContextParameter item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains(String) Declaration public bool Contains(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean CopyTo(ContextParameter[], Int32) Declaration public void CopyTo(ContextParameter[] array, int arrayIndex) Parameters Type Name Description ContextParameter [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<ContextParameter> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ContextParameter > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(ContextParameter) Declaration public bool Remove(ContextParameter item) Parameters Type Name Description ContextParameter item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.GenericCollection-1.html": {
    "href": "api/Syn.Bot.Oscova.Collection.GenericCollection-1.html",
    "title": "Class GenericCollection<T> - Syn Developer Network",
    "keywords": "Class GenericCollection<T> Inheritance System.Object GenericCollection<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class GenericCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : class Type Parameters Name Description T Constructors GenericCollection() Declaration public GenericCollection() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count DataList Declaration protected List<T> DataList { get; set; } Property Value Type Description System.Collections.Generic.List <T> IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description T Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item Implements System.Collections.Generic.ICollection<T>.Add(T) AddRange(IEnumerable<T>) Declaration public void AddRange(IEnumerable<T> itemList) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> itemList AllOfType<TR>() Declaration public List<TR> AllOfType<TR>()where TR : T Returns Type Description System.Collections.Generic.List <TR> Type Parameters Name Description TR Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) Contains<TR>() Declaration public bool Contains<TR>()where TR : class, T Returns Type Description System.Boolean Type Parameters Name Description TR CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() OfType<TR>() Declaration public TR OfType<TR>()where TR : class, T Returns Type Description TR Type Parameters Name Description TR Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.IntentCollection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.IntentCollection.html",
    "title": "Class IntentCollection - Syn Developer Network",
    "keywords": "Class IntentCollection Inheritance System.Object IntentCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class IntentCollection : ICollection<IntentResult>, IEnumerable<IntentResult>, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly Item[Int32] Declaration public IntentResult this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IntentResult Methods Add(IntentResult) Declaration public void Add(IntentResult item) Parameters Type Name Description IntentResult item Implements System.Collections.Generic.ICollection<T>.Add(T) Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() Contains(IntentResult) Declaration public bool Contains(IntentResult item) Parameters Type Name Description IntentResult item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) CopyTo(IntentResult[], Int32) Declaration public void CopyTo(IntentResult[] array, int arrayIndex) Parameters Type Name Description IntentResult [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) GetEnumerator() Declaration public IEnumerator<IntentResult> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IntentResult > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() Remove(IntentResult) Declaration public bool Remove(IntentResult item) Parameters Type Name Description IntentResult item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Syn.Bot.Oscova.Collection.WordToken.html": {
    "href": "api/Syn.Bot.Oscova.Collection.WordToken.html",
    "title": "Class WordToken - Syn Developer Network",
    "keywords": "Class WordToken Inheritance System.Object WordToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Collection Assembly :Syn.Bot.dll Syntax public class WordToken Constructors WordToken() Declaration public WordToken() Fields Empty Declaration public static readonly WordToken Empty Field Value Type Description WordToken Properties Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 Stem Declaration public string Stem { get; set; } Property Value Type Description System.String Value Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Collection.html": {
    "href": "api/Syn.Bot.Oscova.Collection.html",
    "title": "Namespace Syn.Bot.Oscova.Collection - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Collection Classes BotUserCollection ContextParameterCollection DialogCollection EntityCollection Entry EntryCollection GenericCollection<T> IntentCollection RecognizerCollection Word WordToken"
  },
  "api/Syn.Bot.Siml.Helper.ComparisonAlgorithm.html": {
    "href": "api/Syn.Bot.Siml.Helper.ComparisonAlgorithm.html",
    "title": "Enum ComparisonAlgorithm - Syn Developer Network",
    "keywords": "Enum ComparisonAlgorithm Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public enum ComparisonAlgorithm Fields Name Description Default HammingDistance JaccardDistance JaroDistance JaroWinklerDistance LevenshteinDistance LongestCommonSubsequence LongestCommonSubstring NormalizedLevenshteinDistance OverlapCoefficient RatcliffObershelpSimilarity SorensenDiceDistance TanimotoCoefficient"
  },
  "api/Syn.Bot.Siml.Information.PatternInfo.html": {
    "href": "api/Syn.Bot.Siml.Information.PatternInfo.html",
    "title": "Class PatternInfo - Syn Developer Network",
    "keywords": "Class PatternInfo Inheritance System.Object InfoBase PatternInfo Inherited Members InfoBase.Element InfoBase.ID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class PatternInfo : InfoBase Constructors PatternInfo(XElement) Declaration public PatternInfo(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element"
  },
  "api/Syn.Bot.Siml.Information.ResponseInfo.html": {
    "href": "api/Syn.Bot.Siml.Information.ResponseInfo.html",
    "title": "Class ResponseInfo - Syn Developer Network",
    "keywords": "Class ResponseInfo Inheritance System.Object InfoBase ResponseInfo Inherited Members InfoBase.Element InfoBase.ID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class ResponseInfo : InfoBase Constructors ResponseInfo(XElement) Declaration public ResponseInfo(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element"
  },
  "api/Syn.Bot.Siml.Information.SimlInfo.html": {
    "href": "api/Syn.Bot.Siml.Information.SimlInfo.html",
    "title": "Class SimlInfo - Syn Developer Network",
    "keywords": "Class SimlInfo Inheritance System.Object SimlInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class SimlInfo Constructors SimlInfo(XDocument, String) Declaration public SimlInfo(XDocument simlDocument, string fileName = \"\") Parameters Type Name Description System.Xml.Linq.XDocument simlDocument System.String fileName Properties Concepts Declaration public List<ConceptInfo> Concepts { get; } Property Value Type Description System.Collections.Generic.List < ConceptInfo > Document Declaration public XDocument Document { get; } Property Value Type Description System.Xml.Linq.XDocument FileName Declaration public string FileName { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Information.html": {
    "href": "api/Syn.Bot.Siml.Information.html",
    "title": "Namespace Syn.Bot.Siml.Information - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Information Classes ConceptInfo InfoBase ModelInfo PatternInfo ResponseInfo SimlInfo"
  },
  "api/Syn.Bot.Siml.Interfaces.IAdapter.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IAdapter.html",
    "title": "Interface IAdapter - Syn Developer Network",
    "keywords": "Interface IAdapter The default interaface for all Tag Handlers. Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IAdapter Properties IsRecursive Gets a value indicating whether the children of this element will be processed prior to this. Declaration bool IsRecursive { get; } Property Value Type Description System.Boolean true if this instance is recursive; otherwise, false . TagName Gets the name of the tag. Declaration XName TagName { get; } Property Value Type Description System.Xml.Linq.XName The name of the tag. Methods Evaluate(Context) Processes the specified Context . Declaration string Evaluate(Context context) Parameters Type Name Description Context context The Context . Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Interfaces.ICacheManager.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.ICacheManager.html",
    "title": "Interface ICacheManager - Syn Developer Network",
    "keywords": "Interface ICacheManager Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface ICacheManager Properties IsEmpty Declaration bool IsEmpty { get; } Property Value Type Description System.Boolean Size Declaration int Size { get; } Property Value Type Description System.Int32 Methods Add(Object) Declaration int Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Clear() Declaration void Clear() GetValue<T>(Int32) Declaration T GetValue<T>(int key) Parameters Type Name Description System.Int32 key Returns Type Description T Type Parameters Name Description T Remove(Int32) Declaration bool Remove(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Siml.Interfaces.IContextProcessor.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IContextProcessor.html",
    "title": "Interface IContextProcessor - Syn Developer Network",
    "keywords": "Interface IContextProcessor An interface to be implemented by all compatible adapter processors. Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IContextProcessor Methods Process(Context) Processes the given Context . Declaration string Process(Context context) Parameters Type Name Description Context context Returns Type Description System.String ProcessAndReplaceAll(XElement, String, Context) Processes the inner elements and replaces them with their values. Declaration void ProcessAndReplaceAll(XElement elementNode, string tagName, Context parameter) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node. System.String tagName Name of the tag. Context parameter The context. ProcessInnerElements(XElement, Context) Processes the inner elements of the specified System.Xml.Linq.XElement . Declaration string ProcessInnerElements(XElement elementNode, Context parameter) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node. Context parameter The context. Returns Type Description System.String SaveToGraph(XElement, Context, GraphNode) Saves content to GraphNode Declaration XDocument SaveToGraph(XElement elementNode, Context parameter, GraphNode graphNode) Parameters Type Name Description System.Xml.Linq.XElement elementNode The element node containing the content to save. Usually the Model element. Context parameter Parameter. GraphNode graphNode GraphNode. Returns Type Description System.Xml.Linq.XDocument"
  },
  "api/Syn.Bot.Siml.Interfaces.IMap.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IMap.html",
    "title": "Interface IMap - Syn Developer Network",
    "keywords": "Interface IMap An interface that represents an SIML Map Inherited Members System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.Add(Syn.Bot.Siml.Interfaces.IMapItem) System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.Clear() System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.Contains(Syn.Bot.Siml.Interfaces.IMapItem) System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.CopyTo(Syn.Bot.Siml.Interfaces.IMapItem[], System.Int32) System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.Remove(Syn.Bot.Siml.Interfaces.IMapItem) System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.Count System.Collections.Generic.ICollection<Syn.Bot.Siml.Interfaces.IMapItem>.IsReadOnly System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Interfaces.IMapItem>.GetEnumerator() Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IMap : ICollection<IMapItem>, IEnumerable<IMapItem>, IEnumerable Properties Contents Declaration IEnumerable<string> Contents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Item[String] Declaration IMapItem this[string content] { get; set; } Parameters Type Name Description System.String content Property Value Type Description IMapItem Name Gets the name of the Map Declaration string Name { get; } Property Value Type Description System.String The unique name of the Map. Methods Add(String, String) Declaration void Add(string content, string value) Parameters Type Name Description System.String content System.String value Contains(String) Declaration bool Contains(string content) Parameters Type Name Description System.String content Returns Type Description System.Boolean Remove(String) Declaration bool Remove(string content) Parameters Type Name Description System.String content Returns Type Description System.Boolean Events Changed Declaration event EventHandler<MapChangedEventArgs> Changed Event Type Type Description System.EventHandler < MapChangedEventArgs > Extension Methods MapExtensions.ToElement(IMap)"
  },
  "api/Syn.Bot.Siml.Performance.html": {
    "href": "api/Syn.Bot.Siml.Performance.html",
    "title": "Namespace Syn.Bot.Siml.Performance - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Performance Classes PerformanceWatch Contains functionality to compare internal function performance. SpeedStats"
  },
  "api/Syn.Bot.Siml.RepeatManager.html": {
    "href": "api/Syn.Bot.Siml.RepeatManager.html",
    "title": "Class RepeatManager - Syn Developer Network",
    "keywords": "Class RepeatManager Represents a repeat management system. Inheritance System.Object RepeatManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class RepeatManager Methods AddRepeat(XElement) Adds the repeat element to this manager. Declaration public void AddRepeat(XElement repeatElement) Parameters Type Name Description System.Xml.Linq.XElement repeatElement The repeat element. CheckRepetition(ChatResult, ChatRequest) Checks the repetition of non-repeatable Models. Declaration public void CheckRepetition(ChatResult chatResult, ChatRequest chatRequest) Parameters Type Name Description ChatResult chatResult The chat result. ChatRequest chatRequest The chat request."
  },
  "api/Syn.Bot.Siml.Scripting.IScriptEngine.html": {
    "href": "api/Syn.Bot.Siml.Scripting.IScriptEngine.html",
    "title": "Interface IScriptEngine - Syn Developer Network",
    "keywords": "Interface IScriptEngine Namespace :Syn.Bot.Siml.Scripting Assembly :Syn.Bot.dll Syntax public interface IScriptEngine Properties Extension Declaration string Extension { get; } Property Value Type Description System.String ScriptType Declaration string ScriptType { get; } Property Value Type Description System.String Methods Evaluate(String) Declaration object Evaluate(string script) Parameters Type Name Description System.String script Returns Type Description System.Object LoadScript(XElement) Declaration void LoadScript(XElement scriptElement) Parameters Type Name Description System.Xml.Linq.XElement scriptElement"
  },
  "api/Syn.Bot.Siml.Scripting.html": {
    "href": "api/Syn.Bot.Siml.Scripting.html",
    "title": "Namespace Syn.Bot.Siml.Scripting - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Scripting Interfaces IScriptEngine"
  },
  "api/Syn.Bot.Siml.ScriptManager.html": {
    "href": "api/Syn.Bot.Siml.ScriptManager.html",
    "title": "Class ScriptManager - Syn Developer Network",
    "keywords": "Class ScriptManager Provides functionality to interact with internal Scripting Engines. Inheritance System.Object ScriptManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public class ScriptManager Properties JavaScriptEngine Declaration public Engine JavaScriptEngine { get; } Property Value Type Description Jint.Engine KnownScriptExtensions Gets a list of all known script extensions. Declaration public HashSet<string> KnownScriptExtensions { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > Methods AddEngine(IScriptEngine) Declaration public void AddEngine(IScriptEngine scriptEngine) Parameters Type Name Description IScriptEngine scriptEngine EvaluateJavaScript(String) Executes the JavaScript provided and returns the result Declaration public string EvaluateJavaScript(string javaScript) Parameters Type Name Description System.String javaScript The JavaScript. Returns Type Description System.String LoadScript(ScriptType, String) Declaration public void LoadScript(ScriptType type, string script) Parameters Type Name Description ScriptType type System.String script LoadScript(XElement) Declaration public void LoadScript(XElement scriptElement) Parameters Type Name Description System.Xml.Linq.XElement scriptElement"
  },
  "api/Syn.Bot.Siml.ScriptType.html": {
    "href": "api/Syn.Bot.Siml.ScriptType.html",
    "title": "Enum ScriptType - Syn Developer Network",
    "keywords": "Enum ScriptType Provides enumerated values to represent a Script. Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum ScriptType Fields Name Description CSharp Represents a C# code JavaScript Represents a JavaScript Lua Represents a Lua script"
  },
  "api/Syn.Bot.Siml.Search.ISearchEngine.html": {
    "href": "api/Syn.Bot.Siml.Search.ISearchEngine.html",
    "title": "Interface ISearchEngine - Syn Developer Network",
    "keywords": "Interface ISearchEngine Interface for Search Engine mechanism. Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public interface ISearchEngine Methods GetSearchResult(SearchQuery, SearchItem) Gets the search result. Declaration SearchResult GetSearchResult(SearchQuery searchQuery, SearchItem searchItem) Parameters Type Name Description SearchQuery searchQuery The search query. SearchItem searchItem The search item. Returns Type Description SearchResult"
  },
  "api/Syn.EmotionML.Category.html": {
    "href": "api/Syn.EmotionML.Category.html",
    "title": "Class Category - Syn Developer Network",
    "keywords": "Class Category A class that describes an emotion or a related state using a category. Inheritance System.Object EmotionRelatedState Category Inherited Members EmotionRelatedState.Name EmotionRelatedState.Value EmotionRelatedState.Confidence EmotionRelatedState.Trace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Category : EmotionRelatedState Constructors Category(String) Initializes a new instance of the Category class. Declaration public Category(string name) Parameters Type Name Description System.String name The name of the category, which must be contained in the declared category vocabulary. Category(String, Nullable<Double>) Initializes a new instance of the Category class. Declaration public Category(string name, double ? value) Parameters Type Name Description System.String name The name of the category, which must be contained in the declared category vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. Category(String, Nullable<Double>, Nullable<Double>) Initializes a new instance of the Category class. Declaration public Category(string name, double ? value, double ? confidence) Parameters Type Name Description System.String name The name of the category, which must be contained in the declared category vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. System.Nullable < System.Double > confidence The degree of confidence or probability that the emotion representation carrying this attribute is correct. Properties CategoryBig6 Gets the Ekman's \"big six\" basic emotions vocabulary URI Declaration public static string CategoryBig6 { get; } Property Value Type Description System.String CategoryEveryday Gets the Everyday emotion vocabulary URI Declaration public static string CategoryEveryday { get; } Property Value Type Description System.String CategoryFrijda Gets the Frijda's categories vocabulary URI Declaration public static string CategoryFrijda { get; } Property Value Type Description System.String CategoryFsre Gets the FSRE categories vocabulary URI Declaration public static string CategoryFsre { get; } Property Value Type Description System.String CategoryOcc Gets the OCC categories vocabulary URI Declaration public static string CategoryOcc { get; } Property Value Type Description System.String"
  },
  "api/Syn.License.html": {
    "href": "api/Syn.License.html",
    "title": "Namespace Syn.License - Syn Developer Network",
    "keywords": "Namespace Syn.License Classes LicenseActivationException The exception that is thrown when license activation fails. LicenseDiscrepancyException LicenseTypeException The exception that is thrown when requested feature in unavailable in the current license type."
  },
  "api/Syn.Log.LogLevel.html": {
    "href": "api/Syn.Log.LogLevel.html",
    "title": "Enum LogLevel - Syn Developer Network",
    "keywords": "Enum LogLevel Namespace :Syn.Log Assembly :Syn.Log.dll Syntax public enum LogLevel : byte Fields Name Description Debug Error Fatal Info Trace Warn"
  },
  "api/Syn.Log.LogReceivedEventArgs.html": {
    "href": "api/Syn.Log.LogReceivedEventArgs.html",
    "title": "Class LogReceivedEventArgs - Syn Developer Network",
    "keywords": "Class LogReceivedEventArgs Inheritance System.Object System.EventArgs LogReceivedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Log Assembly :Syn.Log.dll Syntax public class LogReceivedEventArgs : EventArgs Constructors LogReceivedEventArgs(Type, LogLevel, String) Declaration public LogReceivedEventArgs(Type type, LogLevel level, string message) Parameters Type Name Description System.Type type LogLevel level System.String message Properties ClassName Declaration public string ClassName { get; set; } Property Value Type Description System.String Level Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Message Declaration public string Message { get; set; } Property Value Type Description System.String Time Declaration public DateTime Time { get; } Property Value Type Description System.DateTime Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Log.SynLogger.html": {
    "href": "api/Syn.Log.SynLogger.html",
    "title": "Class SynLogger - Syn Developer Network",
    "keywords": "Class SynLogger Log Helper Class for Syn Products. Inheritance System.Object SynLogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Log Assembly :Syn.Log.dll Syntax public class SynLogger Constructors SynLogger() Declaration public SynLogger() Properties Enabled Determines if this Logger is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean Methods Debug(String, Object[]) Declaration public void Debug(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Debug<T>(String, Object[]) Declaration public void Debug<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Error(Exception) Declaration public void Error(Exception exception) Parameters Type Name Description System.Exception exception Error(String, Object[]) Declaration public void Error(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Error<T>(Exception) Declaration public void Error<T>(Exception exception) Parameters Type Name Description System.Exception exception Type Parameters Name Description T Error<T>(String, Object[]) Declaration public void Error<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Fatal(String, Object[]) Declaration public void Fatal(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Fatal<T>(String, Object[]) Declaration public void Fatal<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Info(String, Object[]) Declaration public void Info(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Info<T>(String, Object[]) Declaration public void Info<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Log(LogLevel, String, Object[]) Declaration public void Log(LogLevel level, string message, params object[] args) Parameters Type Name Description LogLevel level System.String message System.Object [] args Log<T>(LogLevel, String, Object[]) Declaration public void Log<T>(LogLevel level, string message, params object[] args)where T : class Parameters Type Name Description LogLevel level System.String message System.Object [] args Type Parameters Name Description T Trace(String, Object[]) Declaration public void Trace(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Trace<T>(String, Object[]) Declaration public void Trace<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Warn(String, Object[]) Declaration public void Warn(string message, params object[] args) Parameters Type Name Description System.String message System.Object [] args Warn<T>(String, Object[]) Declaration public void Warn<T>(string message, params object[] args)where T : class Parameters Type Name Description System.String message System.Object [] args Type Parameters Name Description T Events LogReceived Event that is fired every time a log is generated. Declaration public event EventHandler<LogReceivedEventArgs> LogReceived Event Type Type Description System.EventHandler < LogReceivedEventArgs >"
  },
  "api/Syn.Log.html": {
    "href": "api/Syn.Log.html",
    "title": "Namespace Syn.Log - Syn Developer Network",
    "keywords": "Namespace Syn.Log Classes LogReceivedEventArgs SynLogger Log Helper Class for Syn Products. Enums LogLevel"
  },
  "api/Syn.Utility.Enumerations.LanguageType.html": {
    "href": "api/Syn.Utility.Enumerations.LanguageType.html",
    "title": "Enum LanguageType - Syn Developer Network",
    "keywords": "Enum LanguageType Namespace :Syn.Utility.Enumerations Assembly :Syn.Utility.dll Syntax public enum LanguageType Fields Name Description Afrikaans Afrikaans Language Albanian Albanian Language Arabic Arabic Language Armenian Armenian Language Azerbaijani Azerbaijani Language Basque Basque Language Belarusian Belarusian Language Bengali Bengali Language Bulgarian Bulgarian Language Catalan Catalan Language Chinese Chinese Language Creole Creole Language Croatian Croatian Language Czech Czech Language Danish Danish Language Dutch Dutch Language English English Language Esperanto Esperanto Language Estonian Estonian Language Filipino Filipino Language Finnish Finnish Language French French Language Galician Galician Language Georgian Georgian Language German German Language Greek Greek Language Haitian Haitian Language Hebrew Hebrew Language Hindi Hindi Language Hungarian Hungarian Language Icelandic Icelandic Language Indonesian Indonesian Language Irish Irish Language Italian Italian Language Japanese Japanese Language Korean Korean Language Lao Lao Language Latin Latin Language Latvian Latvian Language Lithuanian Lithuanian Language Macedonian Macedonian Language Malay Malay Language Maltese Maltese Language Norwegian Norwegian Language Persian Persian Language Polish Polish Language Portuguese Portuguese Language Romanian Romanian Language Russian Russian Language Serbian Serbian Language Slovak Slovak Language Slovenian Slovenian Language Spanish Spanish Language Swahili Swahili Language Swedish Swedish Language Tamil Tamil Language Telugu Telugu Language Thai Thai Language Turkish Turkish Language Ukrainian Ukrainian Language Urdu Urdu Language Vietnamese Vietnamese Language Welsh Welsh Language Yiddish Yiddish Language"
  },
  "api/Syn.Utility.Enumerations.SpecialFolders.html": {
    "href": "api/Syn.Utility.Enumerations.SpecialFolders.html",
    "title": "Enum SpecialFolders - Syn Developer Network",
    "keywords": "Enum SpecialFolders Namespace :Syn.Utility.Enumerations Assembly :Syn.Utility.dll Syntax public enum SpecialFolders Fields Name Description Desktop MyDocuments MyMusic MyPictures MyVideos Program ProgramFiles Wallpaper"
  },
  "api/Syn.Utility.Enumerations.html": {
    "href": "api/Syn.Utility.Enumerations.html",
    "title": "Namespace Syn.Utility.Enumerations - Syn Developer Network",
    "keywords": "Namespace Syn.Utility.Enumerations Enums LanguageType SpecialFolders"
  },
  "api/Syn.Utility.Extensions.DictionaryExtensions.html": {
    "href": "api/Syn.Utility.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions - Syn Developer Network",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class DictionaryExtensions Methods Put<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Declaration public static void Put<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue item) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary TKey key TValue item Type Parameters Name Description TKey TValue"
  },
  "api/Syn.Utility.Extensions.DoubleExtensions.html": {
    "href": "api/Syn.Utility.Extensions.DoubleExtensions.html",
    "title": "Class DoubleExtensions - Syn Developer Network",
    "keywords": "Class DoubleExtensions Inheritance System.Object DoubleExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class DoubleExtensions Methods IsEqualTo(Double, Double) Declaration public static bool IsEqualTo(this double firstValue, double secondValue) Parameters Type Name Description System.Double firstValue System.Double secondValue Returns Type Description System.Boolean IsNotEqualTo(Double, Double) Declaration public static bool IsNotEqualTo(this double firstValue, double secondValue) Parameters Type Name Description System.Double firstValue System.Double secondValue Returns Type Description System.Boolean IsZero(Double) Declaration public static bool IsZero(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean"
  },
  "api/Syn.Utility.Extensions.ImageExtensions.html": {
    "href": "api/Syn.Utility.Extensions.ImageExtensions.html",
    "title": "Class ImageExtensions - Syn Developer Network",
    "keywords": "Class ImageExtensions Inheritance System.Object ImageExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class ImageExtensions Methods SetSource(Image, String, BitmapCacheOption) Declaration public static void SetSource(this Image sourceImage, string filePath, BitmapCacheOption cacheOption = BitmapCacheOption.OnLoad) Parameters Type Name Description System.Windows.Controls.Image sourceImage System.String filePath System.Windows.Media.Imaging.BitmapCacheOption cacheOption"
  },
  "api/Syn.Utility.Extensions.IntegerExtensions.html": {
    "href": "api/Syn.Utility.Extensions.IntegerExtensions.html",
    "title": "Class IntegerExtensions - Syn Developer Network",
    "keywords": "Class IntegerExtensions Inheritance System.Object IntegerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class IntegerExtensions Methods Parse(String, Int32) Declaration public static int Parse(string value, int defaultValue) Parameters Type Name Description System.String value System.Int32 defaultValue Returns Type Description System.Int32"
  },
  "api/Syn.Utility.Extensions.ObservableCollectionExtensions.html": {
    "href": "api/Syn.Utility.Extensions.ObservableCollectionExtensions.html",
    "title": "Class ObservableCollectionExtensions - Syn Developer Network",
    "keywords": "Class ObservableCollectionExtensions Inheritance System.Object ObservableCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class ObservableCollectionExtensions Methods AddRange<T>(ObservableCollection<T>, IEnumerable<T>) Declaration public static void AddRange<T>(this ObservableCollection<T> source, IEnumerable<T> values) Parameters Type Name Description System.Collections.ObjectModel.ObservableCollection <T> source System.Collections.Generic.IEnumerable <T> values Type Parameters Name Description T"
  },
  "api/Syn.Utility.Extensions.StringExtensions.html": {
    "href": "api/Syn.Utility.Extensions.StringExtensions.html",
    "title": "Class StringExtensions - Syn Developer Network",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Extensions Assembly :Syn.Utility.dll Syntax public static class StringExtensions Methods Substring(String, String, String, StringComparison) Declaration public static string Substring(this string sourceString, string fromValue = null, string toValue = null, StringComparison comparison = StringComparison.InvariantCulture) Parameters Type Name Description System.String sourceString System.String fromValue System.String toValue System.StringComparison comparison Returns Type Description System.String"
  },
  "api/Syn.Utility.Extensions.html": {
    "href": "api/Syn.Utility.Extensions.html",
    "title": "Namespace Syn.Utility.Extensions - Syn Developer Network",
    "keywords": "Namespace Syn.Utility.Extensions Classes DictionaryExtensions DoubleExtensions ImageExtensions IntegerExtensions ObservableCollectionExtensions StringExtensions"
  },
  "api/Syn.VA.Events.html": {
    "href": "api/Syn.VA.Events.html",
    "title": "Namespace Syn.VA.Events - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Events Classes HintReceivedEventArgs MessageReceivedEventArgs RecognizerChangedEventArgs ResponseGeneratedEventArgs SettingsChangedEventArgs Provides data for the SettingsChanged event. SettingsSavedEventArgs SynthesizerChangedEventArgs UserIdChangedEventArgs VariableChangedEventArgs Provides data for the Changed event. Enums SettingsChangedAction Describes the action that caused a SettingsChanged event. VariableChangedAction Describes the action that caused a Changed event."
  },
  "api/Syn.VA.EventType.html": {
    "href": "api/Syn.VA.EventType.html",
    "title": "Enum EventType - Syn Developer Network",
    "keywords": "Enum EventType Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public enum EventType Fields Name Description Closing Event type that is fired when the VA is shutting down. FirstLoad Event type that is fired when the VA starts for the first time. Loaded Event type that is fired when the VA has loaded of all necessary components. Resetting Event type that is fired when the VA is requested to reset its settings to default values."
  },
  "api/Syn.VA.Extensions.DictionaryExtensions.html": {
    "href": "api/Syn.VA.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions - Syn Developer Network",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Extensions Assembly :Syn.VA.dll Syntax public static class DictionaryExtensions Methods Get<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Declaration public static TValue Get<TKey, TValue>(this IDictionary<TKey, TValue> source, TKey key) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source TKey key Returns Type Description TValue Type Parameters Name Description TKey TValue Put<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Declaration public static void Put<TKey, TValue>(this IDictionary<TKey, TValue> source, TKey key, TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source TKey key TValue value Type Parameters Name Description TKey TValue Remove<TKey, TValue>(IDictionary<TKey, TValue>, TValue) Declaration public static bool Remove<TKey, TValue>(this IDictionary<TKey, TValue> source, TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> source TValue value Returns Type Description System.Boolean Type Parameters Name Description TKey TValue"
  },
  "api/Syn.VA.Extensions.StringExtensions.html": {
    "href": "api/Syn.VA.Extensions.StringExtensions.html",
    "title": "Class StringExtensions - Syn Developer Network",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Extensions Assembly :Syn.VA.dll Syntax public static class StringExtensions Methods ContainsWithoutCase(String, String) Declaration public static bool ContainsWithoutCase(this string value, string text) Parameters Type Name Description System.String value System.String text Returns Type Description System.Boolean EqualsWithoutCase(String, String) Declaration public static bool EqualsWithoutCase(this string value, string text) Parameters Type Name Description System.String value System.String text Returns Type Description System.Boolean"
  },
  "api/Syn.VA.Extensions.VariableExtensions.html": {
    "href": "api/Syn.VA.Extensions.VariableExtensions.html",
    "title": "Class VariableExtensions - Syn Developer Network",
    "keywords": "Class VariableExtensions Inheritance System.Object VariableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Extensions Assembly :Syn.VA.dll Syntax public static class VariableExtensions Methods Add<T1, T2>(IVariable, Tuple<T1, T2>) Declaration public static void Add<T1, T2>(this IVariable source, Tuple<T1, T2> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2> tupleValue Type Parameters Name Description T1 T2 Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) Declaration public static void Add<T1, T2, T3>(this IVariable source, Tuple<T1, T2, T3> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3> tupleValue Type Parameters Name Description T1 T2 T3 Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) Declaration public static void Add<T1, T2, T3, T4>(this IVariable source, Tuple<T1, T2, T3, T4> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3, T4> tupleValue Type Parameters Name Description T1 T2 T3 T4 Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) Declaration public static void Add<T1, T2, T3, T4, T5>(this IVariable source, Tuple<T1, T2, T3, T4, T5> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3, T4, T5> tupleValue Type Parameters Name Description T1 T2 T3 T4 T5 GetTuple<T1, T2>(IVariable) Declaration public static Tuple<T1, T2> GetTuple<T1, T2>(this IVariable source) Parameters Type Name Description IVariable source Returns Type Description System.Tuple <T1, T2> Type Parameters Name Description T1 T2 GetTuple<T1, T2>(IVariable, String) Declaration public static Tuple<T1, T2> GetTuple<T1, T2>(this IVariable source, string value) Parameters Type Name Description IVariable source System.String value Returns Type Description System.Tuple <T1, T2> Type Parameters Name Description T1 T2 GetTuple<T1, T2, T3>(IVariable) Declaration public static Tuple<T1, T2, T3> GetTuple<T1, T2, T3>(this IVariable source) Parameters Type Name Description IVariable source Returns Type Description System.Tuple <T1, T2, T3> Type Parameters Name Description T1 T2 T3 GetTuple<T1, T2, T3>(IVariable, String) Declaration public static Tuple<T1, T2, T3> GetTuple<T1, T2, T3>(this IVariable source, string value) Parameters Type Name Description IVariable source System.String value Returns Type Description System.Tuple <T1, T2, T3> Type Parameters Name Description T1 T2 T3 GetTuple<T1, T2, T3, T4>(IVariable) Declaration public static Tuple<T1, T2, T3, T4> GetTuple<T1, T2, T3, T4>(this IVariable source) Parameters Type Name Description IVariable source Returns Type Description System.Tuple <T1, T2, T3, T4> Type Parameters Name Description T1 T2 T3 T4 GetTuple<T1, T2, T3, T4>(IVariable, String) Declaration public static Tuple<T1, T2, T3, T4> GetTuple<T1, T2, T3, T4>(this IVariable source, string value) Parameters Type Name Description IVariable source System.String value Returns Type Description System.Tuple <T1, T2, T3, T4> Type Parameters Name Description T1 T2 T3 T4 GetTuple<T1, T2, T3, T4, T5>(IVariable) Declaration public static Tuple<T1, T2, T3, T4, T5> GetTuple<T1, T2, T3, T4, T5>(this IVariable source) Parameters Type Name Description IVariable source Returns Type Description System.Tuple <T1, T2, T3, T4, T5> Type Parameters Name Description T1 T2 T3 T4 T5 GetTuple<T1, T2, T3, T4, T5>(IVariable, String) Declaration public static Tuple<T1, T2, T3, T4, T5> GetTuple<T1, T2, T3, T4, T5>(this IVariable source, string value) Parameters Type Name Description IVariable source System.String value Returns Type Description System.Tuple <T1, T2, T3, T4, T5> Type Parameters Name Description T1 T2 T3 T4 T5 GetTuples<T1, T2>(IVariable) Declaration public static IEnumerable<Tuple<T1, T2>> GetTuples<T1, T2>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple <T1, T2>> Type Parameters Name Description T1 T2 GetTuples<T1, T2, T3>(IVariable) Declaration public static IEnumerable<Tuple<T1, T2, T3>> GetTuples<T1, T2, T3>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple <T1, T2, T3>> Type Parameters Name Description T1 T2 T3 GetTuples<T1, T2, T3, T4>(IVariable) Declaration public static IEnumerable<Tuple<T1, T2, T3, T4>> GetTuples<T1, T2, T3, T4>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple <T1, T2, T3, T4>> Type Parameters Name Description T1 T2 T3 T4 GetTuples<T1, T2, T3, T4, T5>(IVariable) Declaration public static IEnumerable<Tuple<T1, T2, T3, T4, T5>> GetTuples<T1, T2, T3, T4, T5>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple <T1, T2, T3, T4, T5>> Type Parameters Name Description T1 T2 T3 T4 T5 GetValue<T>(IVariable) Declaration public static T GetValue<T>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description T Type Parameters Name Description T GetValue<T>(IVariable, T) Declaration public static T GetValue<T>(this IVariable variable, T defaultValue) Parameters Type Name Description IVariable variable T defaultValue Returns Type Description T Type Parameters Name Description T GetValues<T>(IVariable) Declaration public static IEnumerable<T> GetValues<T>(this IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T Remove<T1, T2>(IVariable, Tuple<T1, T2>) Declaration public static void Remove<T1, T2>(this IVariable source, Tuple<T1, T2> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2> tupleValue Type Parameters Name Description T1 T2 Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) Declaration public static void Remove<T1, T2, T3>(this IVariable source, Tuple<T1, T2, T3> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3> tupleValue Type Parameters Name Description T1 T2 T3 Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) Declaration public static void Remove<T1, T2, T3, T4>(this IVariable source, Tuple<T1, T2, T3, T4> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3, T4> tupleValue Type Parameters Name Description T1 T2 T3 T4 Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) Declaration public static void Remove<T1, T2, T3, T4, T5>(this IVariable source, Tuple<T1, T2, T3, T4, T5> tupleValue) Parameters Type Name Description IVariable source System.Tuple <T1, T2, T3, T4, T5> tupleValue Type Parameters Name Description T1 T2 T3 T4 T5 SetValue<T>(IVariable, T) Declaration public static void SetValue<T>(this IVariable variable, T value) Parameters Type Name Description IVariable variable T value Type Parameters Name Description T ValueAs<T>(IVariable) Declaration public static T ValueAs<T>(this IVariable source) Parameters Type Name Description IVariable source Returns Type Description T Type Parameters Name Description T ValueAs<T>(IVariable, T) Returns the Value as the specified. Declaration public static T ValueAs<T>(this IVariable source, T defaultValue) Parameters Type Name Description IVariable source The source IVariable . T defaultValue The default value. Returns Type Description T Type Parameters Name Description T Return Type"
  },
  "api/Syn.VA.Extensions.html": {
    "href": "api/Syn.VA.Extensions.html",
    "title": "Namespace Syn.VA.Extensions - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Extensions Classes DictionaryExtensions StringExtensions VariableExtensions"
  },
  "api/Syn.VA.FunctionalVariable.html": {
    "href": "api/Syn.VA.FunctionalVariable.html",
    "title": "Class FunctionalVariable - Syn Developer Network",
    "keywords": "Class FunctionalVariable Inheritance System.Object FunctionalVariable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class FunctionalVariable : IFunctionalVariable, IVariable, IVolatile Constructors FunctionalVariable(String, Func<String>) Initializes a new instance of the FunctionalVariable class. Declaration public FunctionalVariable(string name, Func<string> function) Parameters Type Name Description System.String name The name of the variable. System.Func < System.String > function The function that returns a System.String value. Properties Clone Declaration public IVariable Clone { get; } Property Value Type Description IVariable Implements IVariable.Clone Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements IVariable.Count List Declaration public List<string> List { get; } Property Value Type Description System.Collections.Generic.List < System.String > Implements IVariable.List Name Declaration public string Name { get; } Property Value Type Description System.String Implements IVariable.Name Owner Declaration public Settings Owner { get; set; } Property Value Type Description Settings Implements IVariable.Owner Value Declaration public string Value { get; set; } Property Value Type Description System.String Implements IVariable.Value Methods Add(String) Declaration public void Add(string value) Parameters Type Name Description System.String value Implements IVariable.Add(String) Clear() Declaration public void Clear() Implements IVariable.Clear() Contains(String) Declaration public bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Implements IVariable.Contains(String) Remove(String) Declaration public bool Remove(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Implements IVariable.Remove(String) Events Changed This event is not triggered in FunctionalVariable . Declaration public event EventHandler<VariableChangedEventArgs> Changed Event Type Type Description System.EventHandler < VariableChangedEventArgs > Implements IVariable.Changed Extension Methods VariableExtensions.GetValue<T>(IVariable) VariableExtensions.GetValue<T>(IVariable, T) VariableExtensions.SetValue<T>(IVariable, T) VariableExtensions.GetValues<T>(IVariable) VariableExtensions.GetTuple<T1, T2>(IVariable, String) VariableExtensions.GetTuple<T1, T2>(IVariable) VariableExtensions.GetTuples<T1, T2>(IVariable) VariableExtensions.Add<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.Remove<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.GetTuple<T1, T2, T3>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3>(IVariable) VariableExtensions.GetTuples<T1, T2, T3>(IVariable) VariableExtensions.Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4>(IVariable) VariableExtensions.Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.ValueAs<T>(IVariable) VariableExtensions.ValueAs<T>(IVariable, T)"
  },
  "api/Syn.VA.FunctionManager.html": {
    "href": "api/Syn.VA.FunctionManager.html",
    "title": "Class FunctionManager - Syn Developer Network",
    "keywords": "Class FunctionManager Inheritance System.Object FunctionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class FunctionManager Constructors FunctionManager() Declaration public FunctionManager() Methods AddAction(String, Action<Object, Object>) Declaration public void AddAction(string actionName, Action<object, object> action) Parameters Type Name Description System.String actionName System.Action < System.Object , System.Object > action Execute(String, Object, Object) Declaration public void Execute(string actionName, object firstParameter, object secondParameter) Parameters Type Name Description System.String actionName System.Object firstParameter System.Object secondParameter"
  },
  "api/Syn.VA.Gender.html": {
    "href": "api/Syn.VA.Gender.html",
    "title": "Enum Gender - Syn Developer Network",
    "keywords": "Enum Gender Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public enum Gender Fields Name Description Female Male Neutral NotSet"
  },
  "api/Syn.VA.Interaction.InteractionManager.html": {
    "href": "api/Syn.VA.Interaction.InteractionManager.html",
    "title": "Class InteractionManager - Syn Developer Network",
    "keywords": "Class InteractionManager A class for managing interations with the VirtualAssistant . Inheritance System.Object InteractionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Interaction Assembly :Syn.VA.dll Syntax public class InteractionManager Constructors InteractionManager() Initializes a new instance of the InteractionManager class. Declaration public InteractionManager() Properties Choices Declaration public ChoiceCollection Choices { get; } Property Value Type Description ChoiceCollection LastMessage Gets the last message received by the VirtualAssistant . Declaration public Message LastMessage { get; } Property Value Type Description Message The last message. Remarks The initial value of this property is Empty . Methods Respond(Response) Declaration public void Respond(Response response) Parameters Type Name Description Response response SendMessage(Message) Sends the specified Message to the Virtual Assistant. Declaration public void SendMessage(Message message) Parameters Type Name Description Message message The message. Remarks This method raises the MessageReceived event. SendMessage(String) Sends the message to the Virtual Assistant. Declaration public void SendMessage(string message) Parameters Type Name Description System.String message The message. Remarks This method raises the MessageReceived event. Events MessageReceived Occurs when the VirtualAssistant receives a message. Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description System.EventHandler < MessageReceivedEventArgs > ResponseReceived Occurs when a response is generated by a component in relation to the previously received message. Declaration public event EventHandler<ResponseGeneratedEventArgs> ResponseReceived Event Type Type Description System.EventHandler < ResponseGeneratedEventArgs >"
  },
  "api/Syn.VA.Utility.SettingsConverter.html": {
    "href": "api/Syn.VA.Utility.SettingsConverter.html",
    "title": "Class SettingsConverter - Syn Developer Network",
    "keywords": "Class SettingsConverter Inheritance System.Object System.Windows.Markup.MarkupExtension SettingsConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.VA.Utility Assembly :Syn.VA.Utility.dll Syntax public class SettingsConverter : MarkupExtension, IValueConverter Methods Convert(Object, Type, Object, CultureInfo) Declaration public object Convert(object value, Type targetType, object parameter, CultureInfo culture) Parameters Type Name Description System.Object value System.Type targetType System.Object parameter System.Globalization.CultureInfo culture Returns Type Description System.Object Implements System.Windows.Data.IValueConverter.Convert(System.Object, System.Type, System.Object, System.Globalization.CultureInfo) ConvertBack(Object, Type, Object, CultureInfo) Declaration public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Parameters Type Name Description System.Object value System.Type targetType System.Object parameter System.Globalization.CultureInfo culture Returns Type Description System.Object Implements System.Windows.Data.IValueConverter.ConvertBack(System.Object, System.Type, System.Object, System.Globalization.CultureInfo) ProvideValue(IServiceProvider) Declaration public override object ProvideValue(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description System.Object Overrides System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"
  },
  "api/Syn.VA.Utility.html": {
    "href": "api/Syn.VA.Utility.html",
    "title": "Namespace Syn.VA.Utility - Syn Developer Network",
    "keywords": "Namespace Syn.VA.Utility Classes SettingsConverter"
  },
  "api/Syn.VA.Variable.html": {
    "href": "api/Syn.VA.Variable.html",
    "title": "Class Variable - Syn Developer Network",
    "keywords": "Class Variable Represents an SIML variable. Inheritance System.Object Variable VolatileVariable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class Variable : IVariable Constructors Variable(String) Initializes a new instance of the Variable class. Declaration public Variable(string name) Parameters Type Name Description System.String name Name of the Variable Variable(String, String) Declaration public Variable(string name, string value) Parameters Type Name Description System.String name System.String value Properties Clone Gets the copy of this Variable . Declaration public IVariable Clone { get; } Property Value Type Description IVariable Deep copy of Variable Implements IVariable.Clone Count Gets the number of values held by this variable. Declaration public int Count { get; } Property Value Type Description System.Int32 Implements IVariable.Count List Gets a list of all the values stored within this Variable Declaration public List<string> List { get; } Property Value Type Description System.Collections.Generic.List < System.String > Implements IVariable.List Name Gets the name of this variable. Declaration public string Name { get; } Property Value Type Description System.String Implements IVariable.Name Owner Gets or sets the Settings that owns this IVariable . Declaration public Settings Owner { get; set; } Property Value Type Description Settings The owner Settings Implements IVariable.Owner Value Gets or sets the main value of this variable. Declaration public string Value { get; set; } Property Value Type Description System.String Implements IVariable.Value Methods Add(String) Adds the specified value to this Variable Declaration public void Add(string value) Parameters Type Name Description System.String value The value to add. Implements IVariable.Add(String) Clear() Clears all values of this Variable Declaration public void Clear() Implements IVariable.Clear() Contains(String) Determines whether this Variable contains the specified value. Declaration public bool Contains(string value) Parameters Type Name Description System.String value The value to search. Returns Type Description System.Boolean true if this Variable contains the specified value; otherwise, false. Implements IVariable.Contains(String) Remove(String) Removes the specified value from this Variable Declaration public bool Remove(string value) Parameters Type Name Description System.String value The value to remove. Returns Type Description System.Boolean Implements IVariable.Remove(String) ToString() Returns a System.String that represents the value of this variable. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the value of this variable. Overrides System.Object.ToString() Events Changed Occurs when the value of this IVariable is changed. Declaration public event EventHandler<VariableChangedEventArgs> Changed Event Type Type Description System.EventHandler < VariableChangedEventArgs > Implements IVariable.Changed Extension Methods VariableExtensions.GetValue<T>(IVariable) VariableExtensions.GetValue<T>(IVariable, T) VariableExtensions.SetValue<T>(IVariable, T) VariableExtensions.GetValues<T>(IVariable) VariableExtensions.GetTuple<T1, T2>(IVariable, String) VariableExtensions.GetTuple<T1, T2>(IVariable) VariableExtensions.GetTuples<T1, T2>(IVariable) VariableExtensions.Add<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.Remove<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.GetTuple<T1, T2, T3>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3>(IVariable) VariableExtensions.GetTuples<T1, T2, T3>(IVariable) VariableExtensions.Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4>(IVariable) VariableExtensions.Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.ValueAs<T>(IVariable) VariableExtensions.ValueAs<T>(IVariable, T)"
  },
  "api/Syn.VA.VirtualAssistant.html": {
    "href": "api/Syn.VA.VirtualAssistant.html",
    "title": "Class VirtualAssistant - Syn Developer Network",
    "keywords": "Class VirtualAssistant Inheritance System.Object VirtualAssistant Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class VirtualAssistant Properties Architecture Gets or sets the name of the Architecture used by this Virtual Assistant. Declaration public string Architecture { get; set; } Property Value Type Description System.String Avatar Declaration public AvatarManager Avatar { get; } Property Value Type Description AvatarManager Components Declaration public ComponentManager Components { get; } Property Value Type Description ComponentManager Instance Declaration public static VirtualAssistant Instance { get; } Property Value Type Description VirtualAssistant Interaction Declaration public InteractionManager Interaction { get; } Property Value Type Description InteractionManager Logger Declaration public SynLogger Logger { get; } Property Value Type Description SynLogger MainUser Gets or sets the main user. Declaration public User MainUser { get; } Property Value Type Description User The main user. Name Gets or sets the name of this Virtual Assistant. Declaration public string Name { get; set; } Property Value Type Description System.String Plugins Declaration public PluginCollection Plugins { get; } Property Value Type Description PluginCollection Services Declaration public ServiceCollection Services { get; } Property Value Type Description ServiceCollection SettingsManager Gets the SettingsManager . Declaration public SettingsManager SettingsManager { get; } Property Value Type Description SettingsManager Speech Declaration public SpeechManager Speech { get; } Property Value Type Description SpeechManager Timer Declaration public ServiceTimer Timer { get; } Property Value Type Description ServiceTimer Version Gets the version of the VA Framework used by this Virtual Assistant. Declaration public string Version { get; } Property Value Type Description System.String Methods RaiseEvent(EventType) Raises VA events using the specified. Declaration public void RaiseEvent(EventType eventType) Parameters Type Name Description EventType eventType Events Closing Occurs when the Virtual Assistant application is shutting down. Declaration public event EventHandler Closing Event Type Type Description System.EventHandler FirstLoad Occurs when the Virtual Assistant application starts for the first time in user machine. Declaration public event EventHandler FirstLoad Event Type Type Description System.EventHandler Remarks This event occurs after the Loaded event. Loaded Occurs when the Virtual Assistant application has loaded successfully. Declaration public event EventHandler Loaded Event Type Type Description System.EventHandler Resetting Occurs when the Virtual Assistant is requested to reset its settings to default values. Declaration public event EventHandler Resetting Event Type Type Description System.EventHandler"
  },
  "api/Syn.VA.VolatileVariable.html": {
    "href": "api/Syn.VA.VolatileVariable.html",
    "title": "Class VolatileVariable - Syn Developer Network",
    "keywords": "Class VolatileVariable Inheritance System.Object Variable VolatileVariable Inherited Members Variable.Name Variable.Value Variable.Owner Variable.List Variable.Add(String) Variable.Remove(String) Variable.Count Variable.Contains(String) Variable.Clear() Variable.Clone Variable.ToString() Variable.Changed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.VA Assembly :Syn.VA.dll Syntax public class VolatileVariable : Variable, IVariable, IVolatile Constructors VolatileVariable(String) Declaration public VolatileVariable(string name) Parameters Type Name Description System.String name VolatileVariable(String, String) Declaration public VolatileVariable(string name, string value) Parameters Type Name Description System.String name System.String value Extension Methods VariableExtensions.GetValue<T>(IVariable) VariableExtensions.GetValue<T>(IVariable, T) VariableExtensions.SetValue<T>(IVariable, T) VariableExtensions.GetValues<T>(IVariable) VariableExtensions.GetTuple<T1, T2>(IVariable, String) VariableExtensions.GetTuple<T1, T2>(IVariable) VariableExtensions.GetTuples<T1, T2>(IVariable) VariableExtensions.Add<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.Remove<T1, T2>(IVariable, Tuple<T1, T2>) VariableExtensions.GetTuple<T1, T2, T3>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3>(IVariable) VariableExtensions.GetTuples<T1, T2, T3>(IVariable) VariableExtensions.Add<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.Remove<T1, T2, T3>(IVariable, Tuple<T1, T2, T3>) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4>(IVariable) VariableExtensions.Add<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.Remove<T1, T2, T3, T4>(IVariable, Tuple<T1, T2, T3, T4>) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable, String) VariableExtensions.GetTuple<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.GetTuples<T1, T2, T3, T4, T5>(IVariable) VariableExtensions.Add<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.Remove<T1, T2, T3, T4, T5>(IVariable, Tuple<T1, T2, T3, T4, T5>) VariableExtensions.ValueAs<T>(IVariable) VariableExtensions.ValueAs<T>(IVariable, T)"
  },
  "api/Syn.VA.html": {
    "href": "api/Syn.VA.html",
    "title": "Namespace Syn.VA - Syn Developer Network",
    "keywords": "Namespace Syn.VA Classes AvatarManager FunctionalVariable FunctionManager Plugin Service Settings SettingsManager Container class that holds Settings instances of components and plugins. User Variable Represents an SIML variable. VirtualAssistant VolatileVariable Enums EventType Gender ResponseRank A Rank given to a Response to reflect its priority of reaching a user."
  },
  "tutorial/va/plugins/speech.html": {
    "href": "tutorial/va/plugins/speech.html",
    "title": "Speech Plugin - Syn Developer Network",
    "keywords": "Speech Plugin Provides speech recognition and speech synthesis feature to the Virtual Assistant. SIML Adapters Speech Annotation <o:Speech> Definition Helps interact with the Speech Synthesis engine. Children Must contain a Task attribute that specifies that type of function to perform. The value of the Task attribute can be Stop , Pause , Resume , Enable , Disable or Speak . Usage <o:Speech Task=\"Disable\"/> Disables speech synthesis. <o:Speech Task=\"Enable\"/> Enables speech synthesis. <o:Speech Task=\"Pause\"/> Pauses speech synthesis. <o:Speech Task=\"Resume\"/> Resumes the previously paused speech synthesis process. <o:Speech Task=\"Speak\">How are you?</o:Speech> Speaks the given value. This method can be used in Low ranking responses to explicitly speak selected values. This adapter returns an empty string . Speak Annotation <o:Speak> Definition Speaks the given value using the current Speech Synthesizer. Children Must contain an an arbitrary text or Value attribute that specifies that content to speak. Usage <o:Speak Value=\"How are you?\"/> Or <o:Speak>How are you?</o:Speak> Speaks the given value. This adapter returns the string provided. For Example in the above adapter call the returned value will be How are you? Settings Name Description Speech-Rate The speaking rate of the speech synthesizer. Default value for this variable is 0 . Any value above or below the default value increases or decreases the speech synthesis rate respectively. Speech-Volume The output volume of speech synthesis. Speech-Confidence The minimum confidence for a synthesized speech to be sent to the Virtual Assistant for processing. A value of 1 means 100% confidence and a value of 0.5 means 50% confidence. Speech-Rank The minimum rank of a response to consider when synthesizing speech. Synthesizer The name of the speech synthesizer to use for speech synthesis. Recognizer The name of speech recognized to use for speech recognition. Voice The name of the voice to be used by the speech synthesizer. Gender The gender of the currently selected voice. This plugin also uses the values in the ChoiceList.xml settings file to provide speech choices to the currently selected Speech Synthesizer for command-mode speech recognition. Requirements A Windows OS version that support Speech Synthesis and Speech Recognition ."
  },
  "tutorial/toc.html": {
    "href": "tutorial/toc.html",
    "title": "Table of Content - Syn Developer Network",
    "keywords": ""
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content - Syn Developer Network",
    "keywords": ""
  },
  "toc.html": {
    "href": "toc.html",
    "title": "Table of Content - Syn Developer Network",
    "keywords": ""
  },
  "note/toc.html": {
    "href": "note/toc.html",
    "title": "Table of Content - Syn Developer Network",
    "keywords": ""
  },
  "api/Syn.Bot.Assistant.Telegram.TelegramAssistant.html": {
    "href": "api/Syn.Bot.Assistant.Telegram.TelegramAssistant.html",
    "title": "Class TelegramAssistant - Syn Developer Network",
    "keywords": "Class TelegramAssistant Tailored class for deploying SIML based Bot on Telegram. Inheritance System.Object TelegramAssistant Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Assistant.Telegram Assembly :Syn.Bot.Assistant.dll Syntax public class TelegramAssistant Constructors TelegramAssistant(String) Initializes a new instance of the TelegramAssistant class. Declaration public TelegramAssistant(string accessToken) Parameters Type Name Description System.String accessToken The Bot access token. TelegramAssistant(String, SimlBot) Initializes a new instance of the TelegramAssistant class. Declaration public TelegramAssistant(string accessToken, SimlBot bot) Parameters Type Name Description System.String accessToken The Bot access token. SimlBot bot The SimlBot instance. Properties AccessToken Gets the access token. Declaration public string AccessToken { get; } Property Value Type Description System.String The access token. Bot Gets the bot. Declaration public SimlBot Bot { get; } Property Value Type Description SimlBot The bot. Client Gets the client. Declaration public TelegramBotClient Client { get; } Property Value Type Description Telegram.Bot.TelegramBotClient The client. KeyboardAlignment Gets or sets the keyboard alignment. Declaration public KeyboardAlignment KeyboardAlignment { get; set; } Property Value Type Description KeyboardAlignment The keyboard alignment. ParseMode Gets or sets the parse mode. Declaration public ParseMode ParseMode { get; set; } Property Value Type Description Telegram.Bot.Types.Enums.ParseMode The parse mode. ServiceTimer Gets the service timer. Declaration public Timer ServiceTimer { get; } Property Value Type Description System.Timers.Timer The service timer. Methods HandleQuery(TelegramQuery) Handles the query received by the Telegram Bot. Declaration public void HandleQuery(TelegramQuery query) Parameters Type Name Description TelegramQuery query The query. RemoveQueryHandlers() Removes the automatically added query handlers. Declaration public void RemoveQueryHandlers() Remarks The developer should manually handle all queries after calling this method."
  },
  "api/Syn.Bot.Assistant.Web.html": {
    "href": "api/Syn.Bot.Assistant.Web.html",
    "title": "Namespace Syn.Bot.Assistant.Web - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Assistant.Web Classes WebAssistant Tailored class for adding Syn Web Assistant widget to ASP.NET websites."
  },
  "api/Syn.Bot.Oscova.Dialog.html": {
    "href": "api/Syn.Bot.Oscova.Dialog.html",
    "title": "Class Dialog - Syn Developer Network",
    "keywords": "Class Dialog Represent an OscovaBot dialog system with Intents. Inheritance System.Object Dialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public abstract class Dialog Constructors Dialog() Initializes a new instance of the Dialog class. Declaration protected Dialog()"
  },
  "api/Syn.Bot.Oscova.Entities.AgeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.AgeEntity.html",
    "title": "Class AgeEntity - Syn Developer Network",
    "keywords": "Class AgeEntity Inheritance System.Object AmountUnitEntity AgeEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class AgeEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors AgeEntity() Declaration public AgeEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.CountryEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.CountryEntity.html",
    "title": "Class CountryEntity - Syn Developer Network",
    "keywords": "Class CountryEntity Inheritance System.Object Entity CountryEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class CountryEntity : Entity, IEntity Constructors CountryEntity(String, String) Declaration public CountryEntity(string value, string country) Parameters Type Name Description System.String value System.String country Properties Country Declaration [Resolution(\"country\")] public string Country { get; set; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.DayEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.DayEntity.html",
    "title": "Class DayEntity - Syn Developer Network",
    "keywords": "Class DayEntity Inheritance System.Object Entity DayEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class DayEntity : Entity, IEntity Constructors DayEntity(String, DateTime) Declaration public DayEntity(string value, DateTime dateTime) Parameters Type Name Description System.String value System.DateTime dateTime Properties Date Declaration [Resolution(\"date\")] public string Date { get; } Property Value Type Description System.String DateTime Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.EmailEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.EmailEntity.html",
    "title": "Class EmailEntity - Syn Developer Network",
    "keywords": "Class EmailEntity Inheritance System.Object Entity EmailEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class EmailEntity : Entity, IEntity Constructors EmailEntity(String) Declaration public EmailEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.LanguageEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.LanguageEntity.html",
    "title": "Class LanguageEntity - Syn Developer Network",
    "keywords": "Class LanguageEntity Inheritance System.Object Entity LanguageEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class LanguageEntity : Entity, IEntity Constructors LanguageEntity(String, String) Declaration public LanguageEntity(string value, string language) Parameters Type Name Description System.String value System.String language Properties Language Declaration [Resolution(\"language\")] public string Language { get; set; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.MusicGenreEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.MusicGenreEntity.html",
    "title": "Class MusicGenreEntity - Syn Developer Network",
    "keywords": "Class MusicGenreEntity Inheritance System.Object Entity MusicGenreEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class MusicGenreEntity : Entity, IEntity Constructors MusicGenreEntity(String, String) Declaration public MusicGenreEntity(string value, string genre) Parameters Type Name Description System.String value System.String genre Properties Genre Declaration [Resolution(\"genre\")] public string Genre { get; set; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.NegativeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.NegativeEntity.html",
    "title": "Class NegativeEntity - Syn Developer Network",
    "keywords": "Class NegativeEntity Inheritance System.Object Entity NegativeEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class NegativeEntity : Entity, IEntity Constructors NegativeEntity(String) Declaration public NegativeEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.PostiveEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.PostiveEntity.html",
    "title": "Class PostiveEntity - Syn Developer Network",
    "keywords": "Class PostiveEntity Inheritance System.Object Entity PostiveEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class PostiveEntity : Entity, IEntity Constructors PostiveEntity(String) Declaration public PostiveEntity(string value) Parameters Type Name Description System.String value Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.StateNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.StateNameEntity.html",
    "title": "Class StateNameEntity - Syn Developer Network",
    "keywords": "Class StateNameEntity Inheritance System.Object Entity StateNameEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class StateNameEntity : Entity, IEntity Constructors StateNameEntity(String, String) Declaration public StateNameEntity(string value, string stateName) Parameters Type Name Description System.String value System.String stateName Properties State Declaration [Resolution(\"state\")] public string State { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.TimeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.TimeEntity.html",
    "title": "Class TimeEntity - Syn Developer Network",
    "keywords": "Class TimeEntity Inheritance System.Object Entity TimeEntity Inherited Members Entity.Value Entity.Type Entity.Index Entity.ValueAs<T>() Entity.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public sealed class TimeEntity : Entity, IEntity Constructors TimeEntity(String, DateTime) Declaration public TimeEntity(string value, DateTime dateTime) Parameters Type Name Description System.String value System.DateTime dateTime Properties DateTime Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime Time Declaration [Resolution(\"time\")] public string Time { get; } Property Value Type Description System.String Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitAreaEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitAreaEntity.html",
    "title": "Class UnitAreaEntity - Syn Developer Network",
    "keywords": "Class UnitAreaEntity Inheritance System.Object AmountUnitEntity UnitAreaEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitAreaEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors UnitAreaEntity() Declaration public UnitAreaEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitTemperatureNameEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitTemperatureNameEntity.html",
    "title": "Class UnitTemperatureNameEntity - Syn Developer Network",
    "keywords": "Class UnitTemperatureNameEntity Inheritance System.Object UnitEntity UnitTemperatureNameEntity Inherited Members UnitEntity.Value UnitEntity.Unit UnitEntity.Type UnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitTemperatureNameEntity : UnitEntity, IEntity Constructors UnitTemperatureNameEntity(String, String) Declaration public UnitTemperatureNameEntity(string value, string resolution) Parameters Type Name Description System.String value System.String resolution Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Entities.UnitVolumeEntity.html": {
    "href": "api/Syn.Bot.Oscova.Entities.UnitVolumeEntity.html",
    "title": "Class UnitVolumeEntity - Syn Developer Network",
    "keywords": "Class UnitVolumeEntity Inheritance System.Object AmountUnitEntity UnitVolumeEntity Inherited Members AmountUnitEntity.Value AmountUnitEntity.Amount AmountUnitEntity.Unit AmountUnitEntity.Type AmountUnitEntity.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Entities Assembly :Syn.Bot.dll Syntax public class UnitVolumeEntity : AmountUnitEntity, INumberUnitEntity, IEntity Constructors UnitVolumeEntity() Declaration public UnitVolumeEntity() Extension Methods EntityExtensions.IsSystem(IEntity) EntityExtensions.IsDeveloper(IEntity) EntityExtensions.IsSystemTemp(IEntity) EntityExtensions.IsOverlappedBy(IEntity, IEntity) EntityExtensions.EndIndex(IEntity)"
  },
  "api/Syn.Bot.Oscova.Extensions.EntityExtensions.html": {
    "href": "api/Syn.Bot.Oscova.Extensions.EntityExtensions.html",
    "title": "Class EntityExtensions - Syn Developer Network",
    "keywords": "Class EntityExtensions Inheritance System.Object EntityExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Extensions Assembly :Syn.Bot.dll Syntax public static class EntityExtensions Methods EndIndex(IEntity) Declaration public static int EndIndex(this IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Int32 IsDeveloper(IEntity) Declaration public static bool IsDeveloper(this IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Boolean IsOverlappedBy(IEntity, IEntity) Declaration public static bool IsOverlappedBy(this IEntity source, IEntity target) Parameters Type Name Description IEntity source IEntity target Returns Type Description System.Boolean IsSystem(IEntity) Declaration public static bool IsSystem(this IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Boolean IsSystemTemp(IEntity) Declaration public static bool IsSystemTemp(this IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.Extensions.EntryExtensions.html": {
    "href": "api/Syn.Bot.Oscova.Extensions.EntryExtensions.html",
    "title": "Class EntryExtensions - Syn Developer Network",
    "keywords": "Class EntryExtensions Inheritance System.Object EntryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Extensions Assembly :Syn.Bot.dll Syntax public static class EntryExtensions Methods HasReferenceValue(Entry) Declaration public static bool HasReferenceValue(this Entry entry) Parameters Type Name Description Entry entry Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Oscova.FilterType.html": {
    "href": "api/Syn.Bot.Oscova.FilterType.html",
    "title": "Enum FilterType - Syn Developer Network",
    "keywords": "Enum FilterType Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public enum FilterType Fields Name Description Text Word"
  },
  "api/Syn.Bot.Oscova.IntentResult.html": {
    "href": "api/Syn.Bot.Oscova.IntentResult.html",
    "title": "Class IntentResult - Syn Developer Network",
    "keywords": "Class IntentResult Represents the returned value of intent evaluation. Inheritance System.Object IntentResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class IntentResult Constructors IntentResult() Initializes a new instance of the IntentResult class. Declaration public IntentResult() Fields Empty Represents an empty IntentResult . This field is read-only. Declaration public static readonly IntentResult Empty Field Value Type Description IntentResult Properties Interpretation Gets the interpretated value. Declaration public string Interpretation { get; } Property Value Type Description System.String The interpretated value. Name Gets the full name of this intent. Declaration public string Name { get; } Property Value Type Description System.String The full name. Remarks Dialog name and Method name. PromptMessage Gets the prompt message. Declaration public string PromptMessage { get; } Property Value Type Description System.String The prompt message. Score Gets the calibrated intent result score. Declaration public double Score { get; set; } Property Value Type Description System.Double The score. Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Oscova.Interfaces.IEntityRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.IEntityRecognizer.html",
    "title": "Interface IEntityRecognizer - Syn Developer Network",
    "keywords": "Interface IEntityRecognizer Interface for Oscova Entity Recognizers. Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface IEntityRecognizer Properties Type Gets the IEntity type parsed by this recognizer. Declaration string Type { get; } Property Value Type Description System.String The type. Methods Parse(Request) Parses the specified request and returns a collection of recognized entities. Declaration EntityCollection Parse(Request request) Parameters Type Name Description Request request The request. Returns Type Description EntityCollection Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Interfaces.ILexicalDatabase.html": {
    "href": "api/Syn.Bot.Oscova.Interfaces.ILexicalDatabase.html",
    "title": "Interface ILexicalDatabase - Syn Developer Network",
    "keywords": "Interface ILexicalDatabase Namespace :Syn.Bot.Oscova.Interfaces Assembly :Syn.Bot.dll Syntax public interface ILexicalDatabase Methods GetWordSimilarity(String, String) Declaration double GetWordSimilarity(string sourceWord, string targetWord) Parameters Type Name Description System.String sourceWord System.String targetWord Returns Type Description System.Double"
  },
  "api/Syn.Bot.Oscova.Internal.html": {
    "href": "api/Syn.Bot.Oscova.Internal.html",
    "title": "Namespace Syn.Bot.Oscova.Internal - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Internal Classes ResolutionItem"
  },
  "api/Syn.Bot.Oscova.Language.html": {
    "href": "api/Syn.Bot.Oscova.Language.html",
    "title": "Class Language - Syn Developer Network",
    "keywords": "Class Language Represents the Human Language Model used for Natural Language Processing by OscovaBot . Inheritance System.Object Language EnglishLanguage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class Language Constructors Language(CultureInfo) Initializes a new instance of the Language class. Declaration protected Language(CultureInfo cultureInfo) Parameters Type Name Description System.Globalization.CultureInfo cultureInfo The culture information. Properties Culture Gets the culture. Declaration public CultureInfo Culture { get; } Property Value Type Description System.Globalization.CultureInfo The culture. Detokenizer Gets or sets the detokenizer. Declaration public IDetokenizer Detokenizer { get; set; } Property Value Type Description IDetokenizer The detokenizer. Filters Gets the filters. Declaration public List<FilterItem> Filters { get; } Property Value Type Description System.Collections.Generic.List < FilterItem > The filters. Punctuations Gets or sets the punctuations. Declaration public char[] Punctuations { get; set; } Property Value Type Description System.Char [] The punctuations. Stemmer Gets or sets the stemmer. Declaration public IStemmer Stemmer { get; set; } Property Value Type Description IStemmer The stemmer. Remarks When external Lexical Database is connected. Oscova treats the stemmer as a lemmatizer. StopWords Gets or sets the stop words. Declaration public HashSet<string> StopWords { get; set; } Property Value Type Description System.Collections.Generic.HashSet < System.String > The stop words. Remarks Stop words are commonly used words which are filtered or ignored during text processing. Tokenizer Gets or sets the tokenizer. Declaration public ITokenizer Tokenizer { get; set; } Property Value Type Description ITokenizer The tokenizer. Remarks External implementations must consider curly braces as single tokens. WordNet Gets the WordNet engine. Declaration public WordNetEngine WordNet { get; } Property Value Type Description Syn.WordNet.WordNetEngine The WordNet engine. WordSpacing Gets or sets the word spacing. Declaration public int WordSpacing { get; set; } Property Value Type Description System.Int32 The word spacing. Remarks Number of characters separating each word. Methods AddFilter(FilterType, String, String) Adds the filter. Declaration public void AddFilter(FilterType type, string input, string output) Parameters Type Name Description FilterType type The filter type. System.String input The input. System.String output The output. LoadWordVectors(Stream, FileFormat) Loads word vectors from stream of binary of text file. Declaration public void LoadWordVectors(Stream stream, FileFormat fileFormat) Parameters Type Name Description System.IO.Stream stream The stream. FileFormat fileFormat The file format. Normalize(String) Normalizes the specified input by applying filters and removing punctuations. Declaration public virtual string Normalize(string input) Parameters Type Name Description System.String input The input. Returns Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Recognizers.DateRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.DateRecognizer.html",
    "title": "Class DateRecognizer - Syn Developer Network",
    "keywords": "Class DateRecognizer Inheritance System.Object DateRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class DateRecognizer : IEntityRecognizer Constructors DateRecognizer(OscovaBot) Declaration public DateRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.DateTimeRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.DateTimeRecognizer.html",
    "title": "Class DateTimeRecognizer - Syn Developer Network",
    "keywords": "Class DateTimeRecognizer Inheritance System.Object DateTimeRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class DateTimeRecognizer : IEntityRecognizer Constructors DateTimeRecognizer(OscovaBot) Declaration public DateTimeRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.DayRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.DayRecognizer.html",
    "title": "Class DayRecognizer - Syn Developer Network",
    "keywords": "Class DayRecognizer Inheritance System.Object EntryRecognizer DayRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class DayRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors DayRecognizer() Declaration public DayRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.DurationRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.DurationRecognizer.html",
    "title": "Class DurationRecognizer - Syn Developer Network",
    "keywords": "Class DurationRecognizer Inheritance System.Object BaseRegexRecognizer DurationRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class DurationRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors DurationRecognizer() Declaration public DurationRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.MonthRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.MonthRecognizer.html",
    "title": "Class MonthRecognizer - Syn Developer Network",
    "keywords": "Class MonthRecognizer Inheritance System.Object EntryRecognizer MonthRecognizer Inherited Members EntryRecognizer.Type EntryRecognizer.Entries EntryRecognizer.EntriesRegex EntryRecognizer.IsBaked EntryRecognizer.Parse(Request) EntryRecognizer.Bake() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class MonthRecognizer : EntryRecognizer, IBakableRecognizer, IEntityRecognizer Constructors MonthRecognizer() Declaration public MonthRecognizer() Methods CreateEntity(MatchItem) Declaration protected override IEntity CreateEntity(MatchItem match) Parameters Type Name Description MatchItem match Returns Type Description IEntity Overrides EntryRecognizer.CreateEntity(MatchItem) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.NumberRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.NumberRecognizer.html",
    "title": "Class NumberRecognizer - Syn Developer Network",
    "keywords": "Class NumberRecognizer Inheritance System.Object NumberRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class NumberRecognizer : IEntityRecognizer Constructors NumberRecognizer(OscovaBot) Declaration public NumberRecognizer(OscovaBot bot) Parameters Type Name Description OscovaBot bot Properties Regex Declaration public Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.NumberSequenceRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.NumberSequenceRecognizer.html",
    "title": "Class NumberSequenceRecognizer - Syn Developer Network",
    "keywords": "Class NumberSequenceRecognizer Inheritance System.Object BaseRegexRecognizer NumberSequenceRecognizer Inherited Members BaseRegexRecognizer.Type BaseRegexRecognizer.Parse(Request) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public sealed class NumberSequenceRecognizer : BaseRegexRecognizer, IEntityRecognizer Constructors NumberSequenceRecognizer() Declaration public NumberSequenceRecognizer() Properties Regex Declaration public override Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Overrides BaseRegexRecognizer.Regex Methods CreateEntity(Match) Declaration public override IEntity CreateEntity(Match match) Parameters Type Name Description System.Text.RegularExpressions.Match match Returns Type Description IEntity Overrides BaseRegexRecognizer.CreateEntity(Match) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.OrdinalRecognizer.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.OrdinalRecognizer.html",
    "title": "Class OrdinalRecognizer - Syn Developer Network",
    "keywords": "Class OrdinalRecognizer Inheritance System.Object OrdinalRecognizer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Recognizers Assembly :Syn.Bot.dll Syntax public class OrdinalRecognizer : IEntityRecognizer Constructors OrdinalRecognizer() Declaration public OrdinalRecognizer() Properties Regex Declaration public Regex Regex { get; } Property Value Type Description System.Text.RegularExpressions.Regex Type Declaration public string Type { get; } Property Value Type Description System.String Implements IEntityRecognizer.Type Methods Parse(Request) Declaration public EntityCollection Parse(Request request) Parameters Type Name Description Request request Returns Type Description EntityCollection Implements IEntityRecognizer.Parse(Request) Extension Methods ParserExtensions.IsSystem(IEntityRecognizer)"
  },
  "api/Syn.Bot.Oscova.Recognizers.html": {
    "href": "api/Syn.Bot.Oscova.Recognizers.html",
    "title": "Namespace Syn.Bot.Oscova.Recognizers - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Recognizers Classes AgeRecognizer BaseRegexRecognizer CountryRecognizer CurrencyNameRecognizer DateRecognizer DateTimeRecognizer DayRecognizer DurationRecognizer EntityRecognizer EntryRecognizer Abstract Entries Recognizer. FunctionalRecognizer IndianPhoneNumberRecognizer IndianPostalCodeRecognizer IndianStateRecognizer IntegerRecognizer IpAddressRecognizer MonthRecognizer NumberRecognizer NumberSequenceRecognizer OrdinalRecognizer PercentageRecognizer RegexRecognizer TemperatureNameRecognizer TemperatureRecognizer TimeRecognizer UkPostalCodeRecognizer UnitAreaNameRecognizer UnitAreaRecognizer UnitLengthNameRecognizer UnitLengthRecognizer UnitSpeedNameRecognizer UnitSpeedRecognizer UnitVolumeNameRecognizer UnitVolumeRecognizer UnitWeightNameRecognizer UnitWeightRecognizer UrlRecognizer UsPhoneNumberRecognizer UsPostalCodeRecognizer UsStateRecognizer"
  },
  "api/Syn.Bot.Oscova.Request.html": {
    "href": "api/Syn.Bot.Oscova.Request.html",
    "title": "Class Request - Syn Developer Network",
    "keywords": "Class Request Represents a user query. Inheritance System.Object Request Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public sealed class Request Properties Bot Gets the bot. Declaration public OscovaBot Bot { get; } Property Value Type Description OscovaBot The bot. NormalizedText Gets the normalized text. Declaration public string NormalizedText { get; } Property Value Type Description System.String The normalized text. Text Gets or sets the original user request text. Declaration public string Text { get; set; } Property Value Type Description System.String The text. User Gets the user. Declaration public BotUser User { get; } Property Value Type Description BotUser The user."
  },
  "api/Syn.Bot.Oscova.Response.html": {
    "href": "api/Syn.Bot.Oscova.Response.html",
    "title": "Class Response - Syn Developer Network",
    "keywords": "Class Response Represents a Bot response. Inheritance System.Object Response Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax [DataContract(Name = \"response\")] public class Response Constructors Response() Initializes a new instance of the Response class. Declaration public Response() Properties Format Gets or sets the response format. Declaration [DataMember(Name = \"format\")] public string Format { get; set; } Property Value Type Description System.String The format. Hint Gets or sets the response hint. Declaration [DataMember(Name = \"hint\")] public string Hint { get; set; } Property Value Type Description System.String The hint. Remarks A hint is the next user input sequence expected by the bot. Text Gets or sets the text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description System.String The text. Type Gets or sets the response type. Declaration [DataMember(Name = \"type\")] public string Type { get; set; } Property Value Type Description System.String The type. Methods Serialize() Serializes this response into JSON. Declaration public string Serialize() Returns Type Description System.String"
  },
  "api/Syn.Bot.Oscova.ResponseFormat.html": {
    "href": "api/Syn.Bot.Oscova.ResponseFormat.html",
    "title": "Class ResponseFormat - Syn Developer Network",
    "keywords": "Class ResponseFormat Inheritance System.Object ResponseFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova Assembly :Syn.Bot.dll Syntax public class ResponseFormat Fields Html Declaration public const string Html = \"html\" Field Value Type Description System.String Markdown Declaration public const string Markdown = \"markdown\" Field Value Type Description System.String Plain Declaration public const string Plain = \"plain\" Field Value Type Description System.String Xml Declaration public const string Xml = \"xml\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Oscova.Utilities.EntryData.html": {
    "href": "api/Syn.Bot.Oscova.Utilities.EntryData.html",
    "title": "Class EntryData - Syn Developer Network",
    "keywords": "Class EntryData Inheritance System.Object EntryData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Oscova.Utilities Assembly :Syn.Bot.dll Syntax public static class EntryData Methods GetAgeUnits() Declaration public static EntryCollection GetAgeUnits() Returns Type Description EntryCollection GetAreaUnits() Declaration public static EntryCollection GetAreaUnits() Returns Type Description EntryCollection GetCurrencyUnits() Declaration public static EntryCollection GetCurrencyUnits() Returns Type Description EntryCollection GetDayOfWeekNames() Declaration public static EntryCollection GetDayOfWeekNames() Returns Type Description EntryCollection GetIndianStates() Declaration public static EntryCollection GetIndianStates() Returns Type Description EntryCollection GetLengthUnits() Declaration public static EntryCollection GetLengthUnits() Returns Type Description EntryCollection GetMonthNames() Declaration public static EntryCollection GetMonthNames() Returns Type Description EntryCollection GetPercentage() Declaration public static EntryCollection GetPercentage() Returns Type Description EntryCollection GetSpeedUnits() Declaration public static EntryCollection GetSpeedUnits() Returns Type Description EntryCollection GetTemperatureUnits() Declaration public static EntryCollection GetTemperatureUnits() Returns Type Description EntryCollection GetTimeUnits() Declaration public static EntryCollection GetTimeUnits() Returns Type Description EntryCollection GetVolumeUnits() Declaration public static EntryCollection GetVolumeUnits() Returns Type Description EntryCollection GetWeightUnits() Declaration public static EntryCollection GetWeightUnits() Returns Type Description EntryCollection"
  },
  "api/Syn.Bot.Oscova.Utilities.html": {
    "href": "api/Syn.Bot.Oscova.Utilities.html",
    "title": "Namespace Syn.Bot.Oscova.Utilities - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova.Utilities Classes EnglishNumberParser EnglishNumberResult EntryData"
  },
  "api/Syn.Bot.Oscova.html": {
    "href": "api/Syn.Bot.Oscova.html",
    "title": "Namespace Syn.Bot.Oscova - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Oscova Classes BotConfiguration Represents the Bot configuration used by various components. BotUser Represents an Oscova user. Context Represents a conversion context. ContextItem Represents the state of a Chat Session. ContextParameter Represents a ContextItem parameter. Dialog Represent an OscovaBot dialog system with Intents. EvaluationResult Represents an evaluation result generated by OscovaBot . FilterItem IntentResult Represents the returned value of intent evaluation. Language Represents the Human Language Model used for Natural Language Processing by OscovaBot . MatchItem OscovaBot Represents the Oscova Bot system. Request Represents a user query. Response Represents a Bot response. ResponseFormat ResponseType Result Represents a result generated by OscovaBot after evaluation of a Syn.Bot.Oscova.Result.Request . ScoreConfiguration Holds scoring values. Statistic Sys List of all known System Entity types. Trainer Represents an Oscova bot training system. Enums FileFormat FilterType ProcessingMode Expression processing modes."
  },
  "api/Syn.Bot.Siml.Analysis.AnalysisFrame.html": {
    "href": "api/Syn.Bot.Siml.Analysis.AnalysisFrame.html",
    "title": "Class AnalysisFrame - Syn Developer Network",
    "keywords": "Class AnalysisFrame Inheritance System.Object AnalysisFrame Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Analysis Assembly :Syn.Bot.dll Syntax public class AnalysisFrame Properties Message Declaration public string Message { get; } Property Value Type Description System.String Severity Declaration public Severity Severity { get; set; } Property Value Type Description Severity SourceFile Declaration public string SourceFile { get; set; } Property Value Type Description System.String SourceLine Declaration public string SourceLine { get; } Property Value Type Description System.String TargetFile Declaration public string TargetFile { get; set; } Property Value Type Description System.String TargetLine Declaration public string TargetLine { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Classes.Deprecated.ResultType.html": {
    "href": "api/Syn.Bot.Siml.Classes.Deprecated.ResultType.html",
    "title": "Enum ResultType - Syn Developer Network",
    "keywords": "Enum ResultType Provides enumerated values used to determine the type of Result. Namespace :Syn.Bot.Siml.Classes.Deprecated Assembly :Syn.Bot.dll Syntax public enum ResultType Fields Name Description Empty Denotes an Empty Response Normal Denotes a Response that is generated after a ChatRequest is successfully evaluated. Timedout Denotes a response that is generated when the ChatRequest is timed out."
  },
  "api/Syn.Bot.Siml.Classes.Deprecated.html": {
    "href": "api/Syn.Bot.Siml.Classes.Deprecated.html",
    "title": "Namespace Syn.Bot.Siml.Classes.Deprecated - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Classes.Deprecated Enums ResultType Provides enumerated values used to determine the type of Result."
  },
  "api/Syn.Bot.Siml.Classes.RegexNormalized.html": {
    "href": "api/Syn.Bot.Siml.Classes.RegexNormalized.html",
    "title": "Class RegexNormalized - Syn Developer Network",
    "keywords": "Class RegexNormalized Inheritance System.Object RegexNormalized Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Classes Assembly :Syn.Bot.dll Syntax public class RegexNormalized Constructors RegexNormalized(String) Declaration public RegexNormalized(string message) Parameters Type Name Description System.String message Properties GlobalMessage Declaration public string GlobalMessage { get; set; } Property Value Type Description System.String Normalizations Declaration public Dictionary<string, string> Normalizations { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > NormalizedMessage Declaration public string NormalizedMessage { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Graph.Token.html": {
    "href": "api/Syn.Bot.Siml.Graph.Token.html",
    "title": "Struct Token - Syn Developer Network",
    "keywords": "Struct Token Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public struct Token Fields Element Declaration public XElement Element Field Value Type Description System.Xml.Linq.XElement Key Declaration public string Key Field Value Type Description System.String Type Declaration public TokenType Type Field Value Type Description TokenType Value Declaration public string Value Field Value Type Description System.String Extension Methods TokenExtensions.IsPrecision(Token)"
  },
  "api/Syn.Bot.Siml.Graph.TokenType.html": {
    "href": "api/Syn.Bot.Siml.Graph.TokenType.html",
    "title": "Enum TokenType - Syn Developer Network",
    "keywords": "Enum TokenType Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public enum TokenType : byte Fields Name Description Concept ConceptWord ConditionElement End Event None Pattern PatternWord Previous PreviousWord ScriptElement"
  },
  "api/Syn.Bot.Siml.Interfaces.IMapItem.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IMapItem.html",
    "title": "Interface IMapItem - Syn Developer Network",
    "keywords": "Interface IMapItem An interface representation of an SIML MapItem element. Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IMapItem Properties Content Gets or sets the content. Declaration string Content { get; set; } Property Value Type Description System.String The content. Value Gets or sets the value. Declaration string Value { get; set; } Property Value Type Description System.String The value."
  },
  "api/Syn.Bot.Siml.Interfaces.IParser.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IParser.html",
    "title": "Interface IParser - Syn Developer Network",
    "keywords": "Interface IParser Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IParser Properties TagName Declaration XName TagName { get; } Property Value Type Description System.Xml.Linq.XName Methods Parse(XElement) Declaration void Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element"
  },
  "api/Syn.Bot.Siml.Interfaces.IProcessingInstruction.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IProcessingInstruction.html",
    "title": "Interface IProcessingInstruction - Syn Developer Network",
    "keywords": "Interface IProcessingInstruction Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IProcessingInstruction Properties Target Declaration string Target { get; } Property Value Type Description System.String Methods Process(XProcessingInstruction) Declaration XElement Process(XProcessingInstruction instruction) Parameters Type Name Description System.Xml.Linq.XProcessingInstruction instruction Returns Type Description System.Xml.Linq.XElement"
  },
  "api/Syn.Bot.Siml.Interfaces.IRegexItem.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IRegexItem.html",
    "title": "Interface IRegexItem - Syn Developer Network",
    "keywords": "Interface IRegexItem Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IRegexItem Properties IsStrict Gets or sets a value indicating whether this Regex takes part in normalization. Declaration bool IsStrict { get; set; } Property Value Type Description System.Boolean true if this Regex is strict; otherwise, false . Name Declaration string Name { get; } Property Value Type Description System.String Regex Declaration Regex Regex { get; set; } Property Value Type Description System.Text.RegularExpressions.Regex"
  },
  "api/Syn.Bot.Siml.Interfaces.ISet.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.ISet.html",
    "title": "Interface ISet - Syn Developer Network",
    "keywords": "Interface ISet A interface for SIML sets. Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface ISet Properties Name Unique name of the Set. Declaration string Name { get; } Property Value Type Description System.String Methods Contains(String, String) Gets a value indicating if this Set contains the specified item. Declaration bool Contains(string value, string parameter = \"\") Parameters Type Name Description System.String value System.String parameter Returns Type Description System.Boolean GetValues(String) All enumerable values held within this Set. Declaration IEnumerable<string> GetValues(string parameter = \"\") Parameters Type Name Description System.String parameter Returns Type Description System.Collections.Generic.IEnumerable < System.String >"
  },
  "api/Syn.Bot.Siml.Interfaces.ISuggestionFormatter.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.ISuggestionFormatter.html",
    "title": "Interface ISuggestionFormatter - Syn Developer Network",
    "keywords": "Interface ISuggestionFormatter Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface ISuggestionFormatter Methods Format(Suggestion) Declaration string Format(Suggestion suggestion) Parameters Type Name Description Suggestion suggestion Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Interfaces.ITokenizer.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.ITokenizer.html",
    "title": "Interface ITokenizer - Syn Developer Network",
    "keywords": "Interface ITokenizer Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface ITokenizer Properties Type Gets the type of this Tokenizer Declaration TokenizerType Type { get; } Property Value Type Description TokenizerType Value Gets the splitter value. Declaration string Value { get; } Property Value Type Description System.String Methods Tokenize(List<String>) Splits the specified source string. Declaration List<string> Tokenize(List<string> sourceList) Parameters Type Name Description System.Collections.Generic.List < System.String > sourceList The source string. Returns Type Description System.Collections.Generic.List < System.String > List of string split using this Tokenizer 's value."
  },
  "api/Syn.Bot.Siml.Interfaces.IVariableFormatter.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IVariableFormatter.html",
    "title": "Interface IVariableFormatter - Syn Developer Network",
    "keywords": "Interface IVariableFormatter Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IVariableFormatter Methods GetValue<T>(IVariable) Declaration T GetValue<T>(IVariable variable)where T : class Parameters Type Name Description IVariable variable Returns Type Description T Type Parameters Name Description T GetValueList<T>(IVariable) Declaration IEnumerable<T> GetValueList<T>(IVariable variable)where T : class Parameters Type Name Description IVariable variable Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Syn.Bot.Siml.Search.SearchItem.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchItem.html",
    "title": "Class SearchItem - Syn Developer Network",
    "keywords": "Class SearchItem Inheritance System.Object SearchItem ExampleItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public class SearchItem Constructors SearchItem(SimlBot, String) Initializes a new instance of the SearchItem class. Declaration public SearchItem(SimlBot bot, string pattern) Parameters Type Name Description SimlBot bot The bot. System.String pattern The pattern. Properties IsAtomic Gets a value indicating whether the Pattern is atomic. Declaration public bool IsAtomic { get; } Property Value Type Description System.Boolean true if this Pattern is atomic; otherwise, false . Pattern Gets the actual search pattern. Declaration public string Pattern { get; } Property Value Type Description System.String The pattern. Tokens Gets the SearchToken list. Declaration public List<SearchToken> Tokens { get; } Property Value Type Description System.Collections.Generic.List < SearchToken > The tokens."
  },
  "api/Syn.Bot.Siml.Search.SearchMode.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchMode.html",
    "title": "Enum SearchMode - Syn Developer Network",
    "keywords": "Enum SearchMode Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public enum SearchMode Fields Name Description Hard The hard search scheme. Soft The soft search scheme. This is the default search mode."
  },
  "api/Syn.Bot.Siml.Search.SearchQuery.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchQuery.html",
    "title": "Class SearchQuery - Syn Developer Network",
    "keywords": "Class SearchQuery Inheritance System.Object SearchQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public class SearchQuery Constructors SearchQuery(ChatRequest, String) Declaration public SearchQuery(ChatRequest request, string query) Parameters Type Name Description ChatRequest request System.String query Fields DefaultBaseScore Declaration public const double DefaultBaseScore = 0.4 Field Value Type Description System.Double DefaultDisorderPenalty Declaration public const double DefaultDisorderPenalty = 0.4 Field Value Type Description System.Double DefaultMaxCount Declaration public const int DefaultMaxCount = 5 Field Value Type Description System.Int32 Properties BaseScore Gets or sets the minimum score required for a SearchResult to be accepted. Declaration public double BaseScore { get; set; } Property Value Type Description System.Double The minimum score. CommonWords Gets the common words used to process tolerance of missing words. Declaration public HashSet<string> CommonWords { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > The common words. DisorderPenalty Gets or sets the disorder penalty that is applied when word order is not matched. Declaration public double DisorderPenalty { get; set; } Property Value Type Description System.Double The disorder penalty. MaxCount Gets or sets the maximum number of items allowed in a SearchResult . Declaration public int MaxCount { get; set; } Property Value Type Description System.Int32 The gate. Mode Declaration public SearchMode Mode { get; set; } Property Value Type Description SearchMode Query Gets the query string. Declaration public string Query { get; } Property Value Type Description System.String The query. Request Gets the ChatRequest for this search query. Declaration public ChatRequest Request { get; } Property Value Type Description ChatRequest The request. WordCount Gets the number of words in Query . Declaration public int WordCount { get; } Property Value Type Description System.Int32 The word count."
  },
  "api/Syn.Bot.Siml.Search.SearchResult.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchResult.html",
    "title": "Class SearchResult - Syn Developer Network",
    "keywords": "Class SearchResult Represents the returned value of a search result. Inheritance System.Object SearchResult ExampleResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public class SearchResult Constructors SearchResult() Initializes a new instance of the SearchResult class. Declaration public SearchResult() SearchResult(SearchResult) Initializes a new instance of the SearchResult class. Declaration public SearchResult(SearchResult searchResult) Parameters Type Name Description SearchResult searchResult The search result. Fields Empty Represents an empty SearchResult . This field is read-only. Declaration public static readonly SearchResult Empty Field Value Type Description SearchResult Properties InputMatchList Gets the input match list. Declaration public List<string> InputMatchList { get; } Property Value Type Description System.Collections.Generic.List < System.String > The input match list. Query Gets the query against which this search result was generated. Declaration public string Query { get; set; } Property Value Type Description System.String The query. Score Gets the search result score. Declaration public double Score { get; set; } Property Value Type Description System.Double The score. Value Gets the generated value for the tokens that were processed for this search result. Declaration public string Value { get; set; } Property Value Type Description System.String The value. Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.Search.SearchToken.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchToken.html",
    "title": "Class SearchToken - Syn Developer Network",
    "keywords": "Class SearchToken Inheritance System.Object SearchToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public sealed class SearchToken Constructors SearchToken(String, String, SearchTokenType) Declaration public SearchToken(string value, string format, SearchTokenType type) Parameters Type Name Description System.String value System.String format SearchTokenType type Properties Type Gets the type of search token. Declaration public SearchTokenType Type { get; } Property Value Type Description SearchTokenType The type. Value Gets the value without symbols being stripped. Declaration public string Value { get; } Property Value Type Description System.String The value. Methods GetFormatted(String) Declaration public string GetFormatted(string value) Parameters Type Name Description System.String value Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Search.SearchTokenType.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchTokenType.html",
    "title": "Enum SearchTokenType - Syn Developer Network",
    "keywords": "Enum SearchTokenType Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public enum SearchTokenType Fields Name Description ChunkBackWord ChunkFrontWord PriorityWord Regex Set Word"
  },
  "api/Syn.EmotionML.Info.html": {
    "href": "api/Syn.EmotionML.Info.html",
    "title": "Class Info - Syn Developer Network",
    "keywords": "Class Info A class used to annotate arbitrary metadata. Inheritance System.Object Info Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Info Constructors Info() Initializes a new instance of the Info class. Declaration public Info() Properties Element Gets or sets the Info element node. Declaration public XElement Element { get; set; } Property Value Type Description System.Xml.Linq.XElement The Info element node. ID Gets or sets the unique identifier for this Info element. Declaration public string ID { get; set; } Property Value Type Description System.String Methods Parse(XElement) Loads an Info from the specified System.Xml.Linq.XElement . Declaration public static Info Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description Info"
  },
  "api/Syn.EmotionML.Item.html": {
    "href": "api/Syn.EmotionML.Item.html",
    "title": "Class Item - Syn Developer Network",
    "keywords": "Class Item Represents the definition of one vocabulary item, associated with a value which can be used in the \"name\" attribute of Category , Dimension , Appraisal or ActionTendency . Inheritance System.Object Item Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Item Constructors Item(String) Initializes a new instance of the Item class. Declaration public Item(string name) Parameters Type Name Description System.String name The name of the Item . Properties Info Gets or sets the Info element used to annotate arbitrary metadata.. Declaration public Info Info { get; set; } Property Value Type Description Info Name Gets or sets the name for the Item , used to refer to this Item . Declaration public string Name { get; set; } Property Value Type Description System.String Methods GetElement() Gets an System.Xml.Linq.XElement that represents this Item . Declaration public XElement GetElement() Returns Type Description System.Xml.Linq.XElement Parse(XElement) Loads an Item from the specified System.Xml.Linq.XElement . Declaration public static Item Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description Item"
  },
  "api/Syn.Utility.File.ShortcutFile.IPersistFile.html": {
    "href": "api/Syn.Utility.File.ShortcutFile.IPersistFile.html",
    "title": "Interface ShortcutFile.IPersistFile - Syn Developer Network",
    "keywords": "Interface ShortcutFile.IPersistFile Namespace :Syn.Utility.File Assembly :Syn.Utility.dll Syntax [Guid(\"0000010b-0000-0000-C000-000000000046\")] [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] public interface IPersistFile : ShortcutFile.IPersist Methods GetClassID(out Guid) Declaration void GetClassID(out Guid pClassID) Parameters Type Name Description System.Guid pClassID GetCurFile(String) Declaration void GetCurFile(string ppszFileName) Parameters Type Name Description System.String ppszFileName IsDirty() Declaration int IsDirty() Returns Type Description System.Int32 Load(String, UInt32) Declaration void Load(string pszFileName, uint dwMode) Parameters Type Name Description System.String pszFileName System.UInt32 dwMode Save(String, Boolean) Declaration void Save(string pszFileName, bool fRemember) Parameters Type Name Description System.String pszFileName System.Boolean fRemember SaveCompleted(String) Declaration void SaveCompleted(string pszFileName) Parameters Type Name Description System.String pszFileName"
  },
  "api/Syn.Utility.File.ShortcutFile.ShellLink.html": {
    "href": "api/Syn.Utility.File.ShortcutFile.ShellLink.html",
    "title": "Class ShortcutFile.ShellLink - Syn Developer Network",
    "keywords": "Class ShortcutFile.ShellLink Inheritance System.Object ShortcutFile.ShellLink Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.File Assembly :Syn.Utility.dll Syntax [Guid(\"00021401-0000-0000-C000-000000000046\")] public class ShellLink"
  },
  "api/Syn.Utility.File.ShortcutFile.html": {
    "href": "api/Syn.Utility.File.ShortcutFile.html",
    "title": "Class ShortcutFile - Syn Developer Network",
    "keywords": "Class ShortcutFile Inheritance System.Object ShortcutFile Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.File Assembly :Syn.Utility.dll Syntax public class ShortcutFile Methods ResolveShortcut(String) Declaration public static string ResolveShortcut(string filename) Parameters Type Name Description System.String filename Returns Type Description System.String"
  },
  "api/Syn.Utility.File.html": {
    "href": "api/Syn.Utility.File.html",
    "title": "Namespace Syn.Utility.File - Syn Developer Network",
    "keywords": "Namespace Syn.Utility.File Classes ShortcutFile ShortcutFile.ShellLink Interfaces ShortcutFile.IPersist ShortcutFile.IPersistFile"
  },
  "api/Syn.Utility.Internal.JsBeautifyOptions.html": {
    "href": "api/Syn.Utility.Internal.JsBeautifyOptions.html",
    "title": "Class JsBeautifyOptions - Syn Developer Network",
    "keywords": "Class JsBeautifyOptions Inheritance System.Object JsBeautifyOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Internal Assembly :Syn.Utility.dll Syntax public class JsBeautifyOptions Properties IndentChar Declaration public char ? IndentChar { get; set; } Property Value Type Description System.Nullable < System.Char > IndentLevel Declaration public int ? IndentLevel { get; set; } Property Value Type Description System.Nullable < System.Int32 > IndentSize Declaration public int ? IndentSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > PreserveNewlines Declaration public bool ? PreserveNewlines { get; set; } Property Value Type Description System.Nullable < System.Boolean >"
  },
  "api/Syn.Utility.Internal.html": {
    "href": "api/Syn.Utility.Internal.html",
    "title": "Namespace Syn.Utility.Internal - Syn Developer Network",
    "keywords": "Namespace Syn.Utility.Internal Classes JsBeautifyOptions"
  },
  "api/Syn.Utility.SynUtility.html": {
    "href": "api/Syn.Utility.SynUtility.html",
    "title": "Class SynUtility - Syn Developer Network",
    "keywords": "Class SynUtility Inheritance System.Object SynUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility Assembly :Syn.Utility.dll Syntax public static class SynUtility Properties Asp Declaration public static AspUtility Asp { get; } Property Value Type Description AspUtility Computer Declaration public static ComputerUtility Computer { get; } Property Value Type Description ComputerUtility Convert Declaration public static ConvertUtility Convert { get; } Property Value Type Description ConvertUtility Date Declaration public static DateUtility Date { get; } Property Value Type Description DateUtility Directory Declaration public static DirectoryUtility Directory { get; } Property Value Type Description DirectoryUtility File Declaration public static FileUtility File { get; } Property Value Type Description FileUtility Image Declaration public static ImageUtility Image { get; } Property Value Type Description ImageUtility JavaScript Declaration public static JavaScriptUtility JavaScript { get; } Property Value Type Description JavaScriptUtility List Declaration public static ListUtility List { get; } Property Value Type Description ListUtility Math Declaration public static MathUtility Math { get; } Property Value Type Description MathUtility Memory Declaration public static MemoryUtility Memory { get; } Property Value Type Description MemoryUtility Network Declaration public static NetworkUtility Network { get; } Property Value Type Description NetworkUtility Performance Declaration public static PerformanceUtility Performance { get; } Property Value Type Description PerformanceUtility Process Declaration public static ProcessUtility Process { get; } Property Value Type Description ProcessUtility Regex Declaration public static RegexUtility Regex { get; } Property Value Type Description RegexUtility Screen Declaration public static ScreenUtility Screen { get; } Property Value Type Description ScreenUtility Security Declaration public static SecurityUtility Security { get; } Property Value Type Description SecurityUtility Text Declaration public static TextUtility Text { get; } Property Value Type Description TextUtility Timing Declaration public static TimingUtility Timing { get; } Property Value Type Description TimingUtility Win32 Declaration public static Win32Utility Win32 { get; } Property Value Type Description Win32Utility Wpf Declaration public static WpfUtility Wpf { get; } Property Value Type Description WpfUtility Xml Declaration public static XmlUtility Xml { get; } Property Value Type Description XmlUtility"
  },
  "api/Syn.Utility.Utilities.AspUtility.Headers.html": {
    "href": "api/Syn.Utility.Utilities.AspUtility.Headers.html",
    "title": "Enum AspUtility.Headers - Syn Developer Network",
    "keywords": "Enum AspUtility.Headers Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum Headers Fields Name Description Css Html JavaScript Json Xml"
  },
  "api/Syn.Utility.Utilities.JavaScriptUtility.html": {
    "href": "api/Syn.Utility.Utilities.JavaScriptUtility.html",
    "title": "Class JavaScriptUtility - Syn Developer Network",
    "keywords": "Class JavaScriptUtility Inheritance System.Object JavaScriptUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class JavaScriptUtility Methods Beautify(String) Declaration public string Beautify(string value) Parameters Type Name Description System.String value Returns Type Description System.String Beautify(String, JsBeautifyOptions) Declaration public string Beautify(string value, JsBeautifyOptions options) Parameters Type Name Description System.String value JsBeautifyOptions options Returns Type Description System.String"
  },
  "api/Syn.Utility.Utilities.ListUtility.html": {
    "href": "api/Syn.Utility.Utilities.ListUtility.html",
    "title": "Class ListUtility - Syn Developer Network",
    "keywords": "Class ListUtility Inheritance System.Object ListUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ListUtility Methods Arrange<T>(List<T>, Func<T, String>, IEnumerable<String>) Declaration public List<T> Arrange<T>(List<T> list, Func<T, string> stringProvider, IEnumerable<string> orderStrings) Parameters Type Name Description System.Collections.Generic.List <T> list System.Func <T, System.String > stringProvider System.Collections.Generic.IEnumerable < System.String > orderStrings Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T Shuffle<T>(IList<T>) Declaration public void Shuffle<T>(IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list Type Parameters Name Description T"
  },
  "api/Syn.Utility.Utilities.MathUtility.html": {
    "href": "api/Syn.Utility.Utilities.MathUtility.html",
    "title": "Class MathUtility - Syn Developer Network",
    "keywords": "Class MathUtility Inheritance System.Object MathUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class MathUtility Properties Random Declaration public Random Random { get; } Property Value Type Description System.Random Methods Randomise(Int32, Int32) Declaration public int Randomise(int startPoint, int endPoint) Parameters Type Name Description System.Int32 startPoint System.Int32 endPoint Returns Type Description System.Int32"
  },
  "api/Syn.Utility.Utilities.MemoryUtility.html": {
    "href": "api/Syn.Utility.Utilities.MemoryUtility.html",
    "title": "Class MemoryUtility - Syn Developer Network",
    "keywords": "Class MemoryUtility Inheritance System.Object MemoryUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class MemoryUtility Methods Flush() Flushes the Memory used by this Process and calls the Garbage Collector. Declaration public void Flush()"
  },
  "api/Syn.Utility.Utilities.NetworkUtility.html": {
    "href": "api/Syn.Utility.Utilities.NetworkUtility.html",
    "title": "Class NetworkUtility - Syn Developer Network",
    "keywords": "Class NetworkUtility Inheritance System.Object NetworkUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class NetworkUtility Methods GetExternalIp() Declaration public string GetExternalIp() Returns Type Description System.String GetIpAddress() Declaration public string GetIpAddress() Returns Type Description System.String IsInternetAvailable() Declaration public bool IsInternetAvailable() Returns Type Description System.Boolean"
  },
  "api/Syn.Utility.Utilities.PatternsUtility.html": {
    "href": "api/Syn.Utility.Utilities.PatternsUtility.html",
    "title": "Class PatternsUtility - Syn Developer Network",
    "keywords": "Class PatternsUtility Inheritance System.Object PatternsUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class PatternsUtility Properties Colors Returns a pattern for different colors. Declaration public string Colors { get; } Property Value Type Description System.String Day Returns a pattern for all days in a week. Declaration public string Day { get; } Property Value Type Description System.String Genre Returns a pattern that represents music genres. Declaration public string Genre { get; } Property Value Type Description System.String IntegerNumber Returns a pattern for extracting integer numbers. Declaration public string IntegerNumber { get; } Property Value Type Description System.String Languages Returns a pattern for different languages. Declaration public string Languages { get; } Property Value Type Description System.String Meridiem Returns a pattern that represents a meridiem. Declaration public string Meridiem { get; } Property Value Type Description System.String No Returns a pattern for extracting negative boolean data. Declaration public string No { get; } Property Value Type Description System.String Number Returns a pattern for extracting numbers. Declaration public string Number { get; } Property Value Type Description System.String Path Returns a pattern for extracting file paths. Declaration public string Path { get; } Property Value Type Description System.String Percentage Returns a pattern that represents a percentage value. Declaration public string Percentage { get; } Property Value Type Description System.String Time Returns a pattern that represents time. Declaration public string Time { get; } Property Value Type Description System.String TimeUnit Returns a pattern for extracting time units. Declaration public string TimeUnit { get; } Property Value Type Description System.String Today Returns a pattern that represents the current day. Declaration public string Today { get; } Property Value Type Description System.String Tomorrow Returns a pattern that represents the next day. Declaration public string Tomorrow { get; } Property Value Type Description System.String Url Returns a pattern that represents a URL. Declaration public string Url { get; } Property Value Type Description System.String Yes Returns a pattern for extracting positive boolean data. Declaration public string Yes { get; } Property Value Type Description System.String Methods AddPattern(String, List<String>) Adds a list of patterns to the pattern ist Declaration public void AddPattern(string key, List<string> patternList) Parameters Type Name Description System.String key Pattern key. System.Collections.Generic.List < System.String > patternList List of patterns to add. AddPattern(String, String) Adds a pattern to the pattern list. Declaration public void AddPattern(string key, string pattern) Parameters Type Name Description System.String key Pattern key. System.String pattern Pattern to add. GetAllPatterns(String) Gets the list of patterns added to the pattern list with the specified key. Declaration public List<string> GetAllPatterns(string key) Parameters Type Name Description System.String key Pattern key. Returns Type Description System.Collections.Generic.List < System.String > GetPattern(String) Gets the first pattern added to the pattern list with the specified key. Declaration public string GetPattern(string key) Parameters Type Name Description System.String key Pattern key. Returns Type Description System.String"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to API Documentation - Syn Developer Network",
    "keywords": "Welcome to API Documentation Namespace based Categorization Categories are created based on namespace used by each Class Library. Therefore it is not necessary that each item in the Table of Content represents a different component. Internal Libraries Some API Documentation on internal libraries used by the developers at Synthetic Intelligence Network have also been exposed to assist in software development."
  },
  "note/assistant/release-notes.html": {
    "href": "note/assistant/release-notes.html",
    "title": "Release Notes - Syn Virtual Assistant - Syn Developer Network",
    "keywords": "Release Notes - Syn Virtual Assistant Thank you for installing Syn Virtual Assistant . Version 8.5.6 Commit Date External plugins folder option in VA Settings Created Reset and Shutdown command Added Plugin License text in VA License directory 29/08/16 22:27 Maximum Width set for Separator 15/9/2016 16:24 Add Copy option for InfoPanel 12/9/2016 9:45 Reset Button in VA Settings 2/9/2016 13:53 General KB Added 27/8/2016 Additional licenses added 27/8/2016 20:05 Messaging plugin optimized for Telegram API 23/8/2015 10:05 Manual introduction 22/8/2016 18:53 License and Help index order 22/8/2016 18:59 Added Panel for Translator Plugin 22/8/2016 12:44 Translator Plugin upgraded 21/8/2016 18:34 Added Application Icon 21/8/2016 15:45 UI Culture variable in VA Settings 21/8/2016 13:11 Created markdown help files for all plugins 20/8/2016 21:37 Credit label in InfoPanel with link option 20/8/2016 17:40 Exception Proof coding on all Plugins 20/8/2016 16:21 Speech Synthesis confidence and Volume implementation 19/8/2016 23:50 Feed Time interval in VA Settings 19/8/2016 Added Edit Choice Window in Speech Plugin 19/8/2016 18:28 Default value of Variable in extension 18/8/2016 18:01 Note Logs information during VA initialization 17/8/2016 22:06 Play music by album, artist or song name 17/8/2016 21:17 List rearrange mechanism 17/8/2016 20:01 Cache folder and Cache system for Multimedia plugin 17/8/2016 19:00 Added logging of Unhandled exception 17/8/2016 17:20 Open Plugin Manager command added 16/8/2016 22:48 Added load time variable and Event 16/8/2016 22:28 Resetting event in VA Library 16/8/2016 AutoComplete list in VA Interaction 16/8/2016 21:49 Address HTML emails in Email Plugin 15/8/2016 Added TimeFormat support for InfoPanel 15/8/2016 17:51 Renamed external plugins to official 15/8/2016 17:30 Option to prevent window close 13/8/2016 19:38 Common language extension system 13/8/2016 16:22 Password protection for settings panel 12/8/2016 15:32 External Bot Knowledge-base path option 10/8/2016 Persistant SIML Bot and User variables 10/8/2016 19:49 Save Bot's Learnt and Memorized model to disk 10/8/2016 Added SplashScreen 10/8/2016 17:10 Renamed Channel to Web API 8/8/2016 Transferred all Plugins to GitHub Repository 8/8/2016 11:33 Fixed layout for Windows plugin panel 5/8/2016 10:48 Created separated Speech Plugin 4/8/2016 2:42 Intro welcome message and Speech Recognition Test added 21/7/2016 Dictionary plugin optimized 21/7/2016 Launcher plugin optimized 21/7/2016 Added Github Markdown style to Help Window 21/7/2016 20:34 New Markdown based Help Window 21/7/2016 17:21 Weather report every 1 hour service 20/7/2016 17:53 Add service to automatically check new Emails 20/7/2016 17:42 Create Plugin Manager application to install SVA plug-ins. 19/7/2016 18:51 Create Panel for News, Weather, Horoscope and Media Info 18/7/2016 20:50 Plugin arrangement based on Priority 18/7/2016 14:01 Tool or function to automatically create SRGS Grammar from list of string 10/7/2016 20:20 Receive news updates from Syn Feed Service 8/7/2016 11:33 Log file viewer 8/7/2016 09:14 Fix spacing for controls in Settings Panel 8/7/2016 07:54 Display UserName 8/7/2016 06:30 Notify user if any internal error occurs (Low Priority) 7/7/2016 05:01 Create Credits Window to display all external licenses 7/7/2016 04:47 Create Movie player 7/7/2016 03:55 Added Pause and resume feature for SongPlayer adapter 6/7/2016 13:17 Fixed BrowserWindow sizing and Manual Link 6/7/2016 12:50 Fixed settings window display location 6/7/2016 12:32 Create new Black theme and Accent 6/7/2016 03:07 Create multiple background selection options with Thumbnails for Avatars 5/7/2016 07:26 Put media icon for SongPlayerControl display 4/7/2016 23:13 Added Next and Previous function to SongPlayer 4/7/2016 22:41 Media plugin control 3/7/2016 3:24 New 3D Avatar Engine with Morph Target support 2/7/2016 3:24 Channel Plugin based on Web API 1/6/2016 18:39 User information plugin upgraded 29/5/2016 13:22 General Plugin declares architecture of the VA 29/5/2016 03:42 Add emotion handling in General Plugin 29/5/2016 03:30 Fix Voice selection on startup 28/5/2016 00:55 Confirm name for the Male 3D Avatar Aryan 21/5/2016 External Interface for Speech Recognition 21/5/2016 Created Syn.VA.Utility to deal with external settings files 21/5/2016 23:56 Media Player plugin classifies song based on Album name, Artist and Genre 10/5/2016 22:37 Transfer architecture to VA Framework"
  },
  "note/assistant/roadmap.html": {
    "href": "note/assistant/roadmap.html",
    "title": "Roadmap - Syn Virtual Assistant - Syn Developer Network",
    "keywords": "Roadmap - Syn Virtual Assistant The following features maybe considered for a future version of Syn Virtual Assistant . Feature Description Bot Version Display the version of the SIML Interpreter used. Plugin Directory Conflict Check if External Plugin directory is not in conflict with the default Plugins directory Title Change option Option to change the Title of the Virtual Assistant Emotions Support for Emotion Expression IDs Desktop ASR Support for Desktop Speech Recognizer Better Feeds Only fetch new feeds from Synthetic Intelligence Network Interval control for Service Service interval option for Weather and Email plugins Translator Adapter update Source attribute in Translate adapter Alarm Plugin Allow users to set alarm Social Plugin Create social posting for Facebook and Twitter Command-Line Arguments Add essential command-line options (Reset, Backup...) Culture Option Options to set the Culture and UI Culture in VA Settings page"
  },
  "note/bot/release-notes.html": {
    "href": "note/bot/release-notes.html",
    "title": "Release Notes - Syn.Bot - Syn Developer Network",
    "keywords": "Release Notes - Syn.Bot Thank you for installing Syn.Bot Framework. Version 2.0.3 [Upcoming] OSCOVA Bot Commit Date Music Genre names comply with ID3 tag. 03/03/2017 Fixed Null exception on empty @sys.text values 28/02/2017 Multiple alias support in Expression 28/02/2017 SIML Bot Commit Date Caching of previously generated Suggestion result based on Search Query. Version 2.0.1 OSCOVA Bot Commit Date Special Trainer class for training the Bot. 01/02/2017 StartTraining method with options for loading pre-trained models. 31/01/2017 Improved Info logging during training. 31/01/2017 TrainingFinished event now returns trained model in ML mode. 31/01/2017 Added support for loading WordVectors from Binary or Text file. 16/01/2017 Unlocked ML match mode. 16/01/2017 Improved code documentation. 16/01/2017 Version 2.0.0 OSCOVA Bot Commit Date Support for multiple context added. 27/12/2016 14:22 Fixed duplicate Prompt configuration. 23/12/2016 10:06 Resolution serialization support on entities. 22/12/2016 14:19 Added Prompt and Contextual Parameter support. 19/12/2016 11:08 Successfully integrated Machine Learning mode. 18/12/2016 11:08 Sys entity types implement common intefaces. 13/12/2016 04:15 Filled override table for Number-Unit types. 13/12/2016 Support creation of composite entity types. Added Unit Length, Weight, Speed and Temperature recognizers. 05/12/2016 18:02 Functional Parser with overridable delegate. 04/12/2016 12:33 Option to explicitly specify overridable entity types. 04/12/2016 12:07 Add only required parsers found in Dialogs. 03/12/2016 18:06 Added parser for Url Entity. 02/12/2016 19:47 Add parsing for integer entity type. 02/12/2016 18:33 Support for adding synonyms for parser entries. 02/12/2016 17:54 Case strict parser values support. 02/12/2016 16:12 Auto improve sys entities if user annotates expression. 01/12/2016 12:39 Enum Entity value conversion support. 29/11/2016 20:34 Context item to consider existence time for removal. 29/11/2016 19:03 Greedy Term match by parser. 29/11/2016 15:45 InvokingIntent Event in Bot when Result is invoked. 29/11/2016 14:27 Auto add Default expression dialog if none found after Training. 29/11/2016 13:06 Added CurrentIntent property to Result class. 28/11/2016 20:49 Conflicting Sys entities overriden by Developer entities. 28/11/2016 19:44 Entities sorted by Start position. 28/11/2016 Addressed invalid Expression declarations. 28/11/2016 18:14 Support for Inline Entity declaration. 28/11/2016 12:03 Support for @ symbol as Template EntityType declaration 28/11/2016 10:53 Multiple expressions of similar Intent should influences Intent score. 28/11/2016 Auto State removal after lifespan is reached. 26/11/2016 9:44 Bot throws exception if Evaluation is called before Training. 26/11/2016 State array support added in Context . 23/11/2016 13:04 One way JSON Serialization support for EvaluationResult class. 23/11/2016 Only unique Intents in Result . 23/11/2016 03:01 Auto extraction of common words during Training. 22/11/2016 15:30 Auto generated SuggestedValue using Tokens. 22/11/2016 11:44 Manual None intent evaluation in Dialog using Result class. 21/11/2016 22:20 typeof option in Entity declaration. 21/11/2016 Tokenizer moved to Language support class. 21/11/2016 User settings based on VA interface added. 21/11/2016 Added support for Terms in Enum values. 20/11/2016 Contextual Data holder for storing objects of all types. 20/11/2016 Response class to hold Intent Results. 19/11/2016 Tokenizer addresses spaced entity words. 18/11/2016 Initial Feature Set completed. 18/11/2016 SIML Bot Commit Date Added Suggestion caching for same chat session. 01/11/2016 Fixed Load(XDocument) method to support Siml root element. 01/11/2016 Version 1.2.6 SIML Bot Commit Date Auto sequencing of multiple SIML Documents in AddSiml method. 26/10/2016 Experimental GotoParent adapter for getting responses from Parent Bot. 26/10/2016 Option for custom ICacheManager implementation in BotConfiguration . 26/10/2016 Ability to explicitly set ParentBot . 26/10/2016 Exposed numerous options in BotConfiguration for Server based operations. 26/10/2016 BotConfiguration in SimlBot constructor. 26/10/2016 Fixed default Suggestion Formatter sequenced output. 18/10/2016 13:30 Version 1.2.5 SIML Bot Commit Date Auto stripping of invalid characters during Example tokenization. 16/10/2016 20:56 Improved Set performance by eliminating empty entries. 16/10/2016 13:06 Fixed internal pattern marker removal from Examples . 14/10/2016 Example tokens in Bot Vocabulary. 14/10/2016 Suggestion score overrides Result.Precision . 14/10/2016 Better Phrase item comparison using Search Engine. 14/10/2016 13:46 Hint value retention on Goto redirection. 11/10/2016 10:42 Support Label and Hint attribute on Response element. 10/10/2016 Real-Time generation of Example inputs. 10/10/2016 Pluggable ISearchEngine interface for custom Example evaluation. 8/10/2016 Added performance stats for Suggestion processing time. 6/10/2016 7:02 Hint Property also returns inner value (Specification Compliance Commit). 1/9/2016 22:40 SimlBot.Main renamed to SimlBot.Instance . Removed Low priority optional entities in Analysis. Support for Late adapter added. (Specification Compliance Commit). All In-Built adapters' modifier changed to Internal. BotUser class derived from User class in Syn.VA . 23/8/2016 07:58 Renamed RequestType to MessageType . 19/8/2016 Removed case-sensitivity in MapCollection (Specification Compliance Commit) 11/8/2016 21:26 Added Raise adapter to trigger events. Added Event support. Version 1.2.4 SIML Bot Commit Integrated library with VA Framework Support for iOS and Android under Xamarin Deprecated LUA Inbuilt Script Engine External library \"Jint\" for JavaScript support Renamed SynBot class to SimlBot Moved SIML Related classes to Syn.Bot.Siml namespace Added support for loading XDocument Settings Version 1.2.3 SIML Bot Commit Proper parsing of Bindings for URL formats IsIdle checks elapsed TimeSpan Fixed Recents count limit in Interaction Default value of \"AllowInteractionsStorage\" set to False Fixed Recent interaction order Proper handling of Null Previous adapter values for Parent Bots Time property on SynBot class to override internal bot time based on UTC Offset Improved pattern based Suggestion system with custom formatting options Regex Adapter now supports \"Strict\" attribute to prevent Tokenization. (Specification Compliance Commit) Added support Chunk Syntax in pattern. (Specification Compliance Commit) Caching disabled on Dynamic objects True Response unity for multiple patterns String Strip list variable support for Suggestion Support for Comma seperated Set values. (Specification Compliance Commit) Support for Keywords adapter in Model. (Specification Compliance Commit) SuggestionCollection class for better Suggestion object handling Version 1.2.2 SIML Bot Commit Caching of Map Caching of Set Cached ExampleCollection added New Previous-Concept variable support Fixed Private Concept retention Fixed null object cache mechanism Fixed Word and Regex split Better Regex handling for matches Better ChatRequest length check Cache Optimizations Version 1.2.1 SIML Bot Commit Context now supports Contextual Data [Experimental Stage] Overloaded Chat method with Data call Math Adapters adds Contextual data on computation GetSuggestions method in ChatResult now enables suggestions of chat inputs.[Experimental Stage] Fixed case-sensitivity for Reserved Bot, User and Map Sets Added Add() method to add Enum types to SetCollection Examples property now returns only pure sentences Current property on DataCollection returns the last Contextual Data added.[Experimental Stage] Analyzer not ignores parameterized Sets Fixed minor redirection bug in Goto Added \"O\" namespace under specification for \"Official\" Adapters (Specification Compliance Commit) Better Cache management Improved KB Load Time Renamed all inbuilt adapters with an \"Adapter\" suffix Breaking Change : User variable Partial-Repeat is now Repeat:Is-Partial Breaking Change : User variable Repeat-Count is now Repeat:Count Version 1.1.8 SIML Bot Commit Added Clear option to Settings Variables Event patterns to be treated as Model patterns. (Experimental Feature) Task adapter added (Experimental Feature) TaskManager and BotTask classes to help add and perform tasks Common Timer property added to SynBot class for Service and Task ticks Support for Global Binds for element attributes added (Specification Compliance Commit) Option to Enable, Disble, On and Off Bindings at Runtime added New User-Reserved variables added (Specification Compliance Commit) Implemented and Reserved Bot, User, Map dynamic sets in Pattern (Specification Compliance Commit) Updated JavaScript Engine Updated Lua Engine Option to disable children settings in GetDocument() method for Bot settings Analyizer now skips analysis of elements with external Namespaces Parameterized Set syntax support added Text adapter returns text value if Get attribute has invalid value Breaking Change : Tuples syntax changed (Update your project by referring Wiki.Syn.co.in-> Syn Bot) Breaking Change : Bot and User adapters no longer encouraged in Pattern. Use Reserved Sets instead. (Specification Compliance Commit) Version 1.1.7 SIML Bot Commit Extended chained Random support added Analyzer now checks every word and Set item in patterns (Specification Compliance Commit) Updated Lua interpreter Updated JavaScript interpreter Exposed JavaScript and Lua interpreters Fixed case-sensitivity in Date adapter Support for external Parsers added Version 1.1.6 SIML Bot Commit Zero Index on Input tag to maintain request index Support for Chained Random added Override-Pattern variable option added to BotSettings Removed ViewModelBase from Classes Version 1.1.5 SIML Bot Commit Fixed minor Bug with Range Wildcard self prioritization Added Zero index option to Input element Version 1.1.4 SIML Bot Commit Fixed minor bug with Set name conflicts Better criterion for determining result success JavaScript Processing-Instruction added Added Lua as a Scripting-Language Moved Context and ContextProcessor to Syn.Bot namespace Added Processing-Instruction interface to Lua Add Variables using Lambda Expressions Is-Main functional Variable added to BotUser User-Strict Concept Support added StoreExamples check added to Example parser Smaller internal Enumeration footprint Ranged Wildcards support added Initial private concept using \"Initial-Concept\" user variable Added static Version property on SynBot Version 1.1.3 SIML Bot Commit Better Culture Support Added HumanReadTime property to result Fixed minor bug found in the 'Process' adapter Functional objects now implement IVolatile interface Access to ContextProcessor added Recursive check of known elements inside Html elements GraphNode timeout check enabled GetDocument added to Set Collection Added Binary function to Text adapter Added Reverse function to Text adapter Added Think namespace on Get, Add and Remove attributes of User and Bot Added Precision Property to ChatResult Fixed minor bug in Zero+ Wildcard matche Added Message variable to User settings Relaxed analysis on external Elements Version 1.1.2 SIML Bot Commit Fixed minor bug - Remove attribute now returns the value removed PluginCollection implements ICollection Added default value support for Variable extension method GetValue Analyzer will now check Concept types before assuming similar patterns Added support for Maps in pattern as per specification Added GetDocument on MapCollection Map implements ICollection FuntionalMapItem class that implements IFunctionalMapItem added Support for Listed User and Bot variables in pattern Upgraded JavaScriptEngine Version 1.1.1 SIML Bot Commit EmotionChanged event for Bot and Users 3 to 5 Argument tuple value support for Variable values True or False variable names will activate conditional elements IsEmpty operator supported Added Vocabulary detail Added and replaced Define element with faster Bind element XML Namespace support added for Adapters Fixed proper namespace as per SIML specification to http://syn.co.in/2014/siml Memory optimization via configuration Version 1.1.0 SIML Bot Commit User and Bot elements can be used within patterns and are now dynamic in nature Settings now has a VariableUpdated event Removed the need to use Load(); function prior to ChatRequest AdapterParameter is now Context Variables can now consume XML Text if no Value element is specified Functional and Custom Variables are now possible with the usage of IVariable interface Response now have Ranks assigned to them Settings can now apply values to properties of arbitrary objects Target and ID added to Settings Variable extensions added Added support for Components Converted reserved variables of Bot and User to IFunctionalVariable type Added support for Map reversal Added Interface to Collection items to allow customization and extension Added experimental element Added event handlers for Bot learning and memorizing Memorized SIML can now be loaded into specified User's Graph Support for weighted random added Variable overlap check added Prefer Bot and User name over IDs while writing logs"
  },
  "note/bot/roadmap.html": {
    "href": "note/bot/roadmap.html",
    "title": "Roadmap - Syn.Bot - Syn Developer Network",
    "keywords": "Roadmap - Syn.Bot The following features maybe considered for a future version of Syn.Bot Framework. OSCOVA Feature Description Test Attribute InBuilt unit testing for expressions invoking right intents. Linked Intent Support Execute linked intents. Events or Activity Add support for Event triggers on Request Import & Export Enable importing and exporting of components (Intents, Entities) Previous intent Use previously executed intent's entities for contextual intents EvaluateJson Evaluate a serialzed json request. Requires Serialize and Deserialize methods in Request class SIML Feature Description Internal StackFrame Add StackFrames for internal Gotos. SimlOptimizer class Helps in optimization of SIML documents. Status or Trace Detailed generation of logs for internal working of the Bot and its adapters."
  },
  "note/bot-assistant/release-notes.html": {
    "href": "note/bot-assistant/release-notes.html",
    "title": "Release Notes - Syn.Bot.Assistant - Syn Developer Network",
    "keywords": "Release Notes - Syn.Bot.Assistant Thank you for installing Syn.Bot.Assistant Framework. Version 1.0.0 Commit Date Initial Release. 27/10/2016"
  },
  "note/bot-studio/release-notes.html": {
    "href": "note/bot-studio/release-notes.html",
    "title": "Release Notes - Syn Bot Studio - Syn Developer Network",
    "keywords": "Release Notes - Syn Bot Studio Thank you for installing Syn Bot Studio . Version 1.56 Commit Add Word Vector builder in Tools . Add Oscova Machine Learning in Tools . Updated Bot library and dependencies. Version 1.55 Beta Commit Date Minor bug fixes. 26/10/2016 Auto sequencing of Project files on Build command. 26/10/2016 Version 1.54 Beta Commit Date Better Indendation of SIML Concept elements. 16/10/2016 Fixed Autocompletion item visibility. 16/10/2016 Fixed Graph generation for Chat results. 15/10/2016 Removed Tree Algorithm option from Graph Explorer. 15/10/2016 Fixed regex selection clearance in Regex Tester window. 14/10/2016 Fixed Analysis clearance on new project. 14/10/2016 Added SIML Snippet conversion option. 13/10/2016 21:10 Fixed Replace All for opened files. 12/10/2016 Fixed excessive spacing in shortcut templates. 12/10/2016 Added Stats for Example Processing Time. 8/10/2016 Added Timer to support Late responses. 8/10/2016 10:48 Added support for SIML Event calls. 8/10/2016 9:08 Updated Interpreter to version 1.2.5 Added support for hosting SIML Projects on Telegram. Learn More 8/10/2016 6:08 Fixed multi-threaded logging. 6/10/2016 New Suggestion support added. 6/10/2016 6:18 Version 1.53 Beta Commit Major Windows 7 Compatibility Fix. Version 1.52 Beta Commit Minor bug-fixes Upgraded Syn Bot library reference. Remove LUA from Scripting Window. Namespace check on Indendation. Syn Chatbot Studio is now Syn Bot Studio. Fixed multiple log generation. Online Feeds control added. Version 1.51 Beta Commit Added String Comparison Tool Input Suggestion based on multiple Algorithms. Smooth scroll on Stack Grid. Fixed minor bugs and performed code clean up. Fixed File delete Trash directory check. Fixed Console Output box clearance. Renamed Syn_Link to Chat_Link (XAGARD Commit) Added Clear logs option. Added Copy to Clipboard option for Logs. Support for Project Notes added. Examples Window added for Project. Fixed sorting of Items in Project Explorer. Fixed Left-Click only for opening files in Editor. Fixed recursive file renaming. Save, Close, Close All, Close All But This options added to Editor tabs. Added support for JavaScript indentation on PI Syntax Enhanced known Attributes and Elements list. Improved Autocompletion on different Tags. New Playground system to explore new features. XAGARD Connect Interface added. Fixed coloring on Regex multiple matches. Version 1.50 Beta Commit Minor bug-fixes. SIML Interpreter upgrade. Version 1.49 Beta Commit Added o namespace for official adapters under Attributes. Optimized AIML to SIML Converter Add New File no longer adds Type and Repeat attributes to Concept Better Font Weight Better Indentation of Concepts in Editor Updated Interpreter to Syn.Bot 1.2.1 Version 1.48 Beta Commit Added Voice Commands (Automatically Enabled if Speech Recognition is supported by user's OS) Average Binding Time in Stats Better and Faster Graph rendering Building Project automatically saves all opened files. New keyboard and voice command shortcuts added Notification if new version Syn.Bot library is available in NuGet. Version 1.46 Beta Commit Minor Bug fixes. Upgraded Syn.Bot engine to 1.1.71 Enabled Experimental Event message. Repeat button added to Console to repeat and test previous input. Version 1.45 Beta Commit Changed Flat Buttons to Round. Adjusted spacing in Script Evaluator. Fixed \"Auto-Completion\" of Processing-Instructions. Upgraded Syn Bot Engine to 1.1.4 with support for Lua. Added Lua Scripting to Script Evaluator with Syntax-Highlighting. LRE Link and water-mark added to Conversation Stage. Community Link added to Main Window. Added Result Precision as a title under Stats tab. Script Evaluator retains the Script Engine and Scripts. Added Rename option on Folder items. Added Interpreter Version under Help menu. Script Evaluator uses project Bot. Version 1.40 Beta Commit Conversation Stage added. 2 Bots, with the same knowledge-base, can now talk to each other. Fixed auto-completion of tags with attributes. Better color scheme for Sets, Regular Expressions, Choices and more... Copy button added to Script Evaluator. Refresh is now Project Build. Version 1.35 Beta Commit Fixed auto-complete for Tags with Namespace Fixed right click bug in Editor Go To Line added to Editor Fixed indendation while document is loaded. Analysis grid now displays folder path if analyzed file(s) are not present in root project directory. Documents will now maintain foldings even after indendation. Automatic log clearance at startup Version 1.3 Beta Commit Fixed add existing files bug. Added splitter to resize the Output Box and the Stack Grid Added Vocabulary Viewer under PROJECT -> Vocabulary Fixed Studio.log file location bug. Added commonly used namespace attributes in Insert context menu. Version 1.2 Beta Commit Adding Graph Master visualization under Project -> Graph Explorer Added Search Tree viewer Added Window options under Window -> Topmost and Toggle FullScreen Added Auto-Complete in ChatBox Fixed de-selection of File when Close All function is called Added Line and Column information to Editor Added Keyboard Shortcuts Window Enchanced visualization for all Graphs Stack order arranged to reflect internal Goto calls Fixed common bugs in Console Added Icons to File Explorer items Enhanced the File Explorer with options for Folders and Files - Forum Suggestion Added safe Drag and Drop mechanism in File Explorer Added resize option to File Explorer Project and Package names will now be displayed on the Title-Bar Added Studio Console under HELP-> Studio Console. Console stats are now directly taken from the Interpreter."
  },
  "note/bot-studio/roadmap.html": {
    "href": "note/bot-studio/roadmap.html",
    "title": "Roadmap - Syn Bot Studio - Syn Developer Network",
    "keywords": "Roadmap - Syn Bot Studio The following features maybe considered for a future version of Syn Bot Studio . Feature Description Re-Enable Graph Display Graph display in Search Tree Tab and Graph Explorer to be re-enabled. Adapter Trace Adapter Trace mechanism for debugging purpose. Remove Top Links Replace top links with DropDown link. Optimize Option Refactor and optimize SIML Documents. Disable ASR Speech recognition must be disabled by default. Options dialog Studio settings and preferences. Remove Indendation Do not indent xml content in saved SIML Files. Support conversion of AIML 2.0 Upgrade convertor to support conversion of AIML 2.0 files to SIML"
  },
  "note/siml/release-notes.html": {
    "href": "note/siml/release-notes.html",
    "title": "Release Notes - SIML - Syn Developer Network",
    "keywords": "Release Notes - SIML Thank you for choosing Synthetic Intelligence Markup Language . Version 1.0.1 Commit Added Late tag for timed evaluation of elements. (Requires the interpreter to provide Timer mechanism. Extended Example tag to support Pattern tokens. Added Raise tag to trigger evaluation of SIML Events from Models. Added Event tag support for creating custom user-specific events. Version 1.0.0 Commit Date Initial Draft-Specification Completed Thursday, June 16, 2014"
  },
  "note/va/release-notes.html": {
    "href": "note/va/release-notes.html",
    "title": "Release Notes - Syn.VA - Syn Developer Network",
    "keywords": "Release Notes - Syn.VA Thank you for installing Syn.VA Framework. Version 1.0.6 Commit Improved class structures to be compatible with Syn.Bot Framework. Setting Variable extensions. Overridable Main user ID. Version 1.0.2 Commit Date Services are Enabled by default 17/9/2016 13:55 Bind method in Settings . Removed ISettings interface 14/9/2016 5:29 Volatile behaviour for non-functional variables 2/9/2016 12:49 IsMain property in User class 23/8/2016 Responses and Messages redirected by User ID 23/8/2016 8:13 Added ValueAs extension 19/8/2016 MessageType added to Message class 18/8/2016, 2016 20:01 User property in Response and Message 14/8/2016 Minor class documentation 14/8/2016 InBuilt User Class 14/8/2016 19:35 Version 1.00 Commit Date Initial Framework Design Completed Thursday, June 16, 2016"
  },
  "reference/enterprise-license.html": {
    "href": "reference/enterprise-license.html",
    "title": "Enterprise License (Reference Template) - Syn Developer Network",
    "keywords": "Enterprise License (Reference Template) 1. Preamble This Agreement governs the relationship between \" COMPANY NAME \", a Business Entity, (hereinafter: Licensee) and Synthetic Intelligence Network , a brand of a duly registered company REVARN Cybernetics LLP whose principal place of business is No. 83, Warsi House, 5th block, Kormangala Industrial Layout Bangalore, Karnataka - 560095, India (hereinafter: Licensor). This Agreement sets the terms, rights, restrictions and obligations on using \" SELECTED FRAMEWORK \" (hereinafter: The Software) created and owned by Licensor, as detailed herein 2. License Grant Licensor hereby grants Licensee an Assignable, Pepetual, Commercial, Royalty free, Including the rights to distribute derivative works, Non-exclusive license, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software. (2.1) Limited: Licensee may use Software for the purpose of: (2.1.1) Running Software on Licensee’s Website[s] and Server[s]; (2.1.2) Allowing 3rd Parties to run Software on Licensee’s Website[s] and Server[s]; (2.1.3) Publishing Software’s output to Licensee and 3rd Parties; (2.1.4) Distribute verbatim copies of Software’s output (including compiled binaries); (2.2) This license is granted perpetually, as long as you do not materially breach it. (2.3) Binary Restricted: Licensee may sublicense Software as a part of a larger work containing more than Software, distributed solely in Object or Binary form under a personal, non-sublicensable, limited license. Such redistribution shall be limited to unlimited codebases. (2.4) Assignable: Licensee may assign his rights and duties under this license as long as the party who Licensee assigns the license accepts the license in full, and provides Licensor with a written confirmation of Assignmentcense. (2.5) Commercial, Royalty Free: Licensee may use Software for any purpose, including paid-services, without any royalties (2.6) Including the right to Distribute Derivative Works: Licensee may create and distribute derivative works based on Software, including integrating it into a larger work as long as the redistribution is made under the terms of this license. (2.7) With support & maintenance: Licensor shall provide Licensee support and maintenance as follows (2.7.1) Bug fixes and all minor version updates. (2.7.2) 90 days of email support. 3. Term & Termination The Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee : (3.1) became insolvent or otherwise entered into any liquidation process; or (3.2) exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or (3.3) Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or (3.4) Licensee in breach of any of the terms of clause 2 to this license; or (3.5) Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License. 4. Payment In consideration of the License granted under clause 2, Licensee shall pay Licensor a fee, via Credit-Card, PayPal or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement. 5. Upgrades, Updates and Fixes Licensor may provide Licensee, from time to time, with Upgrades, Updates or Fixes, as detailed herein and according to his sole discretion. Licensee hereby warrants to keep The Software up-to-date and install all relevant updates and fixes, and may, at his sole discretion, purchase upgrades, according to the rates set by Licensor. Licensor shall provide any update or Fix free of charge; however, nothing in this Agreement shall require Licensor to provide Updates or Fixes. (5.1) Upgrades: for the purpose of this license, an Upgrade shall be a material amendment in The Software, which contains new features and or major performance improvements and shall be marked as a new version number. For example, should Licensee purchase The Software under version 1.X.X, an upgrade shall commence under number 2.0.0. (5.2) Updates: for the purpose of this license, an update shall be a minor amendment in The Software, which may contain new features or minor improvements and shall be marked as a new sub-version number. For example, should Licensee purchase The Software under version 1.1.X, an upgrade shall commence under number 1.2.0. (5.3) Fix: for the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2. 6. Support Software is provided with limited support, as detailed in the Software’s SLA detailed under the License Grant. Licensor shall provide support via the issue tracker and / or electronic mail and on regular business days and hours. (6.1) Bug Notification: Licensee may provide Licensor of details regarding any bug, defect or failure in The Software promptly and with no delay from such event; Licensee shall comply with Licensor's request for information regarding bugs, defects or failures and furnish him with information, screenshots and try to reproduce such bugs, defects or failures. (6.2) Feature Request: Licensee may request additional features in Software, provided, however, that (i) Licensee shall waive any claim or right in such feature should feature be developed by Licensor; (ii) Licensee shall be prohibited from developing the feature, or disclose such feature request, or feature, to any 3rd party directly competing with Licensor or any 3rd party which may be, following the development of such feature, in direct competition with Licensor; (iii) Licensee warrants that feature does not infringe any 3rd party patent, trademark, trade-secret or any other intellectual property right; and (iv) Licensee developed, envisioned or created the feature solely by himself. 7. Liability To the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licensee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software and Licensee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services. Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code. 8. Warranty (8.1) Intellectual Property: Licensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights. (8.2) No-Warranty: The Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server[s] and Website[s]. (8.3) Prior Inspection: Licensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software. 9. No Refunds Licensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws. 10. Indemnification Licensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim. 11. Governing Law, Jurisdiction Licensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full."
  },
  "reference/individual-developer-license.html": {
    "href": "reference/individual-developer-license.html",
    "title": "Individual Developer License (Reference Template) - Syn Developer Network",
    "keywords": "Individual Developer License (Reference Template) 1. Preamble This Agreement governs the relationship between \" INDIVIDUAL DEVELOPER NAME \", a private person, (hereinafter: Licensee) and Synthetic Intelligence Network , a brand of a duly registered company REVARN Cybernetics LLP whose principal place of business is No. 83, Warsi House, 5th block, Kormangala Industrial Layout Bangalore, Karnataka - 560095, India (hereinafter: Licensor). This Agreement sets the terms, rights, restrictions and obligations on using \" SELECTED FRAMEWORK \" (hereinafter: The Software) created and owned by Licensor, as detailed herein 2. License Grant Licensor hereby grants Licensee a Personal, Non-assignable & non-transferable, Pepetual, Commercial, Royalty free, Including the rights to distribute derivative works, Non-exclusive license, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software. (2.1) Limited: Licensee may use Software for the purpose of: (2.1.1) Running Software on Licensee’s Website[s] and Server[s]; (2.1.2) Allowing 3rd Parties to run Software on Licensee’s Website[s] and Server[s]; (2.1.3) Publishing Software’s output to Licensee and 3rd Parties; (2.1.4) Distribute verbatim copies of Software’s output (including compiled binaries); (2.2) This license is granted perpetually, as long as you do not materially breach it. (2.3) Binary Restricted: Licensee may sublicense Software as a part of a larger work containing more than Software, distributed solely in Object or Binary form under a personal, non-sublicensable, limited license. Such redistribution shall be limited to unlimited codebases. (2.4) Non Assignable & Non-Transferable: Licensee may not assign or transfer his rights and duties under this license. (2.5) Commercial, Royalty Free: Licensee may use Software for any purpose, including paid-services, without any royalties (2.6) Including the right to Distribute Derivative Works: Licensee may create and distribute derivative works based on Software, including integrating it into a larger work as long as the redistribution is made under the terms of this license. (2.7) With support & maintenance: Licensor shall provide Licensee support and maintenance as follows (2.7.1) Bug fixes and all minor version updates. (2.7.2) 30 days of email support. 3. Term & Termination The Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee : (3.1) became insolvent or otherwise entered into any liquidation process; or (3.2) exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or (3.3) Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or (3.4) Licensee in breach of any of the terms of clause 2 to this license; or (3.5) Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License. 4. Payment In consideration of the License granted under clause 2, Licensee shall pay Licensor a fee, via Credit-Card, PayPal or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement. 5. Upgrades, Updates and Fixes Licensor may provide Licensee, from time to time, with Upgrades, Updates or Fixes, as detailed herein and according to his sole discretion. Licensee hereby warrants to keep The Software up-to-date and install all relevant updates and fixes, and may, at his sole discretion, purchase upgrades, according to the rates set by Licensor. Licensor shall provide any update or Fix free of charge; however, nothing in this Agreement shall require Licensor to provide Updates or Fixes. (5.1) Upgrades: for the purpose of this license, an Upgrade shall be a material amendment in The Software, which contains new features and or major performance improvements and shall be marked as a new version number. For example, should Licensee purchase The Software under version 1.X.X, an upgrade shall commence under number 2.0.0. (5.2) Updates: for the purpose of this license, an update shall be a minor amendment in The Software, which may contain new features or minor improvements and shall be marked as a new sub-version number. For example, should Licensee purchase The Software under version 1.1.X, an upgrade shall commence under number 1.2.0. (5.3) Fix: for the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2. 6. Support Software is provided with limited support, as detailed in the Software’s SLA detailed under the License Grant. Licensor shall provide support via the issue tracker and / or electronic mail and on regular business days and hours. (6.1) Bug Notification: Licensee may provide Licensor of details regarding any bug, defect or failure in The Software promptly and with no delay from such event; Licensee shall comply with Licensor's request for information regarding bugs, defects or failures and furnish him with information, screenshots and try to reproduce such bugs, defects or failures. (6.2) Feature Request: Licensee may request additional features in Software, provided, however, that (i) Licensee shall waive any claim or right in such feature should feature be developed by Licensor; (ii) Licensee shall be prohibited from developing the feature, or disclose such feature request, or feature, to any 3rd party directly competing with Licensor or any 3rd party which may be, following the development of such feature, in direct competition with Licensor; (iii) Licensee warrants that feature does not infringe any 3rd party patent, trademark, trade-secret or any other intellectual property right; and (iv) Licensee developed, envisioned or created the feature solely by himself. 7. Liability To the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licensee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software and Licensee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services. Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code. 8. Warranty (8.1) Intellectual Property: Licensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights. (8.2) No-Warranty: The Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server[s] and Website[s]. (8.3) Prior Inspection: Licensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software. 9. No Refunds Licensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws. 10. Indemnification Licensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim. 11. Governing Law, Jurisdiction Licensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full."
  },
  "reference/syn-bot-add-license.html": {
    "href": "reference/syn-bot-add-license.html",
    "title": "Adding License Information (Syn Bot) - Syn Developer Network",
    "keywords": "Adding License Information (Syn Bot) If you have acquired an Enterprise , Individual Developer or an Open-Source license, you will also receive a License Key which you can easily add to SIML Bot and Oscova to enable locked features. Essential features that are enabled: Target Feature Description Oscova Multiple user support. Create new users via CreateUser() method. Oscova Machine Learning mode. ProcessingMode can be changed to RuleAndML . Oscova Portable Trained Model Save and Load trained Neural Network model. Oscova Required Recognizers Only. Support for loading only required Named Entity Recognizers. SIML Multiple user support. Create new users via CreateUser() method. Note In the examples below the value of LICENSE_NAMR_OR_EMAIL depends on your license type. For Enterprise license the value is the name of your company and for Individual Developer or Open-Source license the value is your email address mentioned in the License Key Document . Activating License in Oscova In your bot application just before you create an instance of OscovaBot use the static Activate() method to add in your license key. Enterprise License Example OscovaBot.Activate(\"Enterprise\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new OscovaBot(); ... // Rest of your code Individual Developer License Example OscovaBot.Activate(\"Individual-Developer\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new OscovaBot(); ... // Rest of your code Activating License in SIML Bot In your application just before you create an instance of SimlBot use the static Activate() method to add in your license key. Enterprise License Example SimlBot.Activate(\"Enterprise\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new SimlBot(); ... // Rest of your code Individual Developer License Example SimlBot.Activate(\"Individual-Developer\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new SimlBot(); ... // Rest of your code"
  },
  "tutorial/index.html": {
    "href": "tutorial/index.html",
    "title": "Welcome to the Tutorials section - Syn Developer Network",
    "keywords": "Welcome to the Tutorials section Note Our End-User License Agreement (EULA) has been updated. Click here for more details. We have arranged a lot of useful articles for you under this Tutorials section. We regularly update the content of this section (usually on a weekly basis), so do remember to check out for new tutorials every time a new version of a Product or Library is released. Note Multiple projects hosted on different websites but developed by Synthetic Intelligence Network may point to this Tutorials section. Projects In Progress Project titles marked In Progress are projects that are still under development. The tutorial section of these projects are still being updated and will be completed on or before the release date of the respective project. Project Websites Synthetic Intelligence Network SIML & Syn Bot Studio Oscova Syn VA Framework Company Website REVARN Cybernetics"
  },
  "tutorial/bot/activate-license.html": {
    "href": "tutorial/bot/activate-license.html",
    "title": "Activating License - Syn Developer Network",
    "keywords": "Activating License If you have acquired an Enterprise , Individual Developer or an Open-Source license, you will also receive a License Key which you can easily add to SIML Bot and Oscova to enable locked features. Note An unlicensed version of Syn.Bot framework is for personal use only. To read our EULA click here . Essential features that are enabled: Architecture Feature Description Oscova Multiple user support. Create new users via CreateUser() method. Oscova Machine Learning mode. ProcessingMode can be changed to RuleAndML . Oscova Portable Trained Model Save and Load trained Neural Network model. Oscova Required Recognizers Only. Support for loading only required Named Entity Recognizers. SIML Multiple user support. Create new users via CreateUser() method. Note In the examples below the value of LICENSE_NAMR_OR_EMAIL depends on your license type. For Enterprise license the value is the name of your company and for Individual Developer or Open-Source license the value is your email address mentioned in the License Key Document . Activating License in Oscova In your bot project just before you create an instance of OscovaBot use the static Activate() method to add in your license key. Enterprise License Example OscovaBot.Activate(\"Enterprise\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new OscovaBot(); ... // Rest of your code Individual Developer License Example OscovaBot.Activate(\"Individual-Developer\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new OscovaBot(); ... // Rest of your code Open-Source License Example OscovaBot.Activate(\"Open-Source\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new OscovaBot(); ... // Rest of your code Activating License in SIML Bot In your bot project just before you create an instance of SimlBot use the static Activate() method to add in your license key. Enterprise License Example SimlBot.Activate(\"Enterprise\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new SimlBot(); ... // Rest of your code Individual Developer License Example SimlBot.Activate(\"Individual-Developer\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new SimlBot(); ... // Rest of your code Open-Source License Example SimlBot.Activate(\"Open-Source\", \"LICENSEE_NAME_OR_EMAIL\", \"YOUR_LICENSE_KEY\"); var bot = new SimlBot(); ... // Rest of your code"
  },
  "tutorial/bot/oscova/configuration.html": {
    "href": "tutorial/bot/oscova/configuration.html",
    "title": "Bot Configuration - Syn Developer Network",
    "keywords": "Bot Configuration In V1 we have added the most essential configuration options to the BotConfiguration class. Developers can fiddle around these settings to customize their Bot. RequiredRecognizersOnly Gets or sets a value indicating if the Bot should only load required parsers based on the entity types used in declared Expressions. Default: false MinimumScore The absolute minimum score an intent must have to be added to the EvaluationResult . Default: 0.05 MaxIntentCount The maximum number of high scoring intents to collect during request evaluation. Increasing or decreasing the value has no impact on the number of expressions evaluated by the Bot. Default: 5 MatchMode The mode to use for matching expressions to user input. Note DeepLearning mode greatly increases the training time and must only be used in server-client configurations. Default: ProcessingMode.NLP RuleScoreDependency When machine learning is enabled the Bot uses the value of this variable to determine how much of the Rule based score (in percentage) is to be taken into consideration during score calibration. Default: 0.6 (i.e. 60 percent) ContextLifespan The default lifespan of any context item that gets added to the user's context during a user session. *Default: ** *5 MachineLearningRate The machine learning rate to use when the Bot is being trained in RuleAndML match mode. Lower value increase the time to train the Bot but may lead to better results. Default: 0.25 ShowIntentInterpretation During serialization of evaluation result the Bot uses the value of this variable to determine if intent interpretation value is to be included. Default: false UseFullIntentName The value of this property indicates if the name of an intent must be a combination of the name of dialog class and the intent method name. For example if you have an intent WeatherByLocation in a dialog named WeatherDialog the name of the intent becaomes WeatherDialog.WeatherByLocation . It is recommended that the value of this property is set to true to avoid conflicts between similar intent names in different dialogs. Default: true"
  },
  "tutorial/emotionml/loading-document.html": {
    "href": "tutorial/emotionml/loading-document.html",
    "title": "Loading an EmotionML Document - Syn Developer Network",
    "keywords": "Loading an EmotionML Document Since Syn EmotionML is a portable library it does not directly deal with files instead a developer is responsible for loading an EmotionML document. On a typical .Net Framework to load an EmotionML document say emotionml.xml you could write the following code. var emotionDoc = EmotionMLDocument.Parse(XDocument.Load(\"emotionml.xml\")); Once the document has been parsed the library will create all Emotion-related-state objects which can be fetched using properties available on the EmotionMLDocument class."
  },
  "tutorial/emotionml/saving-document.html": {
    "href": "tutorial/emotionml/saving-document.html",
    "title": "Saving an EmotionML Document to File - Syn Developer Network",
    "keywords": "Saving an EmotionML Document to File Apart from reading EmotionML documents, the EmotionMLDocument object can dynamically create an EmotionML XDocument using the information stored within the class object. To create an XDocument from an EmotionMLDocument you can use the GetDocument method as shown below. var changedDocument = emotionDoc.GetDocument(); File.WriteAllText(\"emotionml.xml\",changedDocument.ToString()); In the above code emotionDoc is any initialized EmotionMLDocument the internal values of which will be serialized to XML."
  },
  "tutorial/emotionml/static-properties.html": {
    "href": "tutorial/emotionml/static-properties.html",
    "title": "Static Properties on Emotion Related States - Syn Developer Network",
    "keywords": "Static Properties on Emotion Related States All important URIs and property values used in the EmotionML specification have been added as static properties to their respective emotion related states."
  },
  "tutorial/emotionml/typical-document.html": {
    "href": "tutorial/emotionml/typical-document.html",
    "title": "Typical EmotionML Document with Emotions - Syn Developer Network",
    "keywords": "Typical EmotionML Document with Emotions A typical EmotionML document consisting of a few emotion elements <emotionml version=\"1.0\" xmlns=\"http://www.w3.org/2009/10/emotionml\" xmlns:Siml=\"http://syn.co.in/2014/siml\" dimension-set=\"http://www.w3.org/TR/emotion-voc/xml#pad-dimensions\"> <emotion id=\"pleased\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#everyday-categories\"> <info> <Siml:Emotion Name=\"very pleased\" /> </info> <category name=\"pleased\" /> <dimension name=\"pleasure\" value=\"0.6\" /> <dimension name=\"arousal\" value=\"0.4\" /> <dimension name=\"dominance\" value=\"0.4\" /> </emotion> <emotion id=\"extremely-happy\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"extremely happy\" /> </info> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.9\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> <emotion id=\"very-happy\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"very happy\" /> </info> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.9\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"0.0\" /> </emotion> <emotion id=\"happy3\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.75\" /> <dimension name=\"arousal\" value=\"0.5\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> <emotion id=\"happy\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"happy\" /> </info> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.75\" /> <dimension name=\"arousal\" value=\"0.5\" /> <dimension name=\"dominance\" value=\"0.0\" /> </emotion> <emotion id=\"sad\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"sad\" /> </info> <category name=\"sadness\" /> <dimension name=\"pleasure\" value=\"0.25\" /> <dimension name=\"arousal\" value=\"0.5\" /> <dimension name=\"dominance\" value=\"0.0\" /> </emotion> <emotion id=\"surprised\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"surprised\" /> </info> <category name=\"surprise\" /> <dimension name=\"pleasure\" value=\"0.55\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"0.0\" /> </emotion> <emotion id=\"hope\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#occ-categories\"> <info> <Siml:Emotion Name=\"hopeful\" /> </info> <category name=\"hope\" /> <dimension name=\"pleasure\" value=\"0.0\" /> <dimension name=\"arousal\" value=\"0.5\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> <emotion id=\"relief\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#occ-categories\"> <info> <Siml:Emotion Name=\"relieved\" /> </info> <category name=\"relief\" /> <dimension name=\"pleasure\" value=\"1.0\" /> <dimension name=\"arousal\" value=\"0.85\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> </emotionml> To get the first emotion and its ID from the above document an index value on the Emotions list would suffice as shown below. var firstEmotion = emotionDoc.Emotions[0]; var emotionID = firstEmotion.ID;"
  },
  "tutorial/resources/stop-words.html": {
    "href": "tutorial/resources/stop-words.html",
    "title": "Stop-Words - Syn Developer Network",
    "keywords": "Stop-Words Stop words are words in languages that do not contribute much to the meaning of the document. English Stop-Words a, able, about, across, after, all, almost, also, am, among, an, and, any, are, as, at, be, because, been, but, by, can, cannot, could, dear, did, do, does, either, else, ever, every, for, from, get, got, had, has, have, he, her, hers, him, his, how, however, i, if, in, into, is, it, its, just, least, let, like, likely, may, me, might, most, must, my, neither, no, nor, not, of, off, often, on, only, or, other, our, own, rather, said, say, says, she, should, since, so, some, than, that, the, their, them, then, there, these, they, this, tis, to, too, twas, us, wants, was, we, were, what, when, where, which, while, who, whom, why, will, with, would, yet, you, your"
  },
  "tutorial/siml/best-practices.html": {
    "href": "tutorial/siml/best-practices.html",
    "title": "SIML Best Practices - Syn Developer Network",
    "keywords": "SIML Best Practices Writing an intelligent bot requires planning and optimization. The following tips and tricks should guide you while you develop your bot for any application. Step-by-step migration from Simple to Complex Patterns When writing patterns for SIML Models make sure that you first include the simpler patterns ( without symbols ) and then move towards using SIML Wildcards and finally keyword based patterns. This ensures speed and consistency. Consider filtration while writing Patterns A usual tendency of a developer is to capture every possible pattern of input in doing a developer may flaw into reduandant pattern declartion to avoid such cases use/consider SIML filtration system. If your filters convert the word whats to what is then declaring a Pattern in an SIML Model say Whats the time will never be matched as the input would always be filtered to What is the time. Lower usage of Keywords Always sticking with SIML Keyword based patterns is not encouraged as they are supposed to be the last resort when dealing with Patterns. However keywords in patterns maybe used to enquire the user if he actually meant something that is already known to the bot. Sets instead of Regular Expressions Though SIML supports Regular Expression it is recommended that Sets are used instead of Regex wherever possible. Instead of creating a regular expression say \\b(red|green|blue)\\b a developer should use an SIML Set with items Red, Green and Blue. Doing so, a developer can take advantage of the operations provided SIML Sets that are optimized for such scenarios. Frequent Code-Analysis and Test Small and medium SIML Project should always be analysed before being deployed as production bots. Apart from analysis a developer must test the SIML Concept by using the Console to see if the desired output is being generated. Maintaining the depth of Nested Models Though nesting saves time and eliminates the need of declaring indefinite number of elements care should be taken that the depth of nesting is always kept between 1 and 4. Nesting beyond such depths would make maintenance of code harder and may lead to confusions when debugging your Chatbot. Keep it Clean The best coding style is not just the one that is understood by computers but also the ones that are understood by humans. Try to keep the verbosity of your code to optimal minimum by learning the default values of attributes and elements. Example 1 <Concept Name=\"Some Concept\" Type=\"Public\" Repeat=\"False\">... Can just be <Concept Name=\"Some Concept\">... Example 2 <Map Get=\"Map Name\"><Match/></Map> Can just be <Map Get=\"Map name\"/> And so on... Check your <Goto> <Goto> and its derivative elements are used to reduce the pattern in user input to its minimalistic form but it's upto the developer to check if the value to which the <Goto> element redirects to actually exists within your SIML project. Don’t repeat yourself Declaring multiple Models for multiple patterns would simply defeat the purpose of using an advanced Chatbot architecture. For multiple patterns always use the element within the element and the same should be applied to element. Smaller Dynamic Sets Dynamics sets have very low impact on the performance of your SIML code but for brevity if the dynamic sets are to be used frequently or the size of the dynamic sets are small and constant then the developer should save them as a static Set and give it a unique name. This reduces redundancy and ensures re-usability of your SIML code."
  },
  "tutorial/siml/changes.html": {
    "href": "tutorial/siml/changes.html",
    "title": "Changes in Draft-Specification - Syn Developer Network",
    "keywords": "Changes in Draft-Specification The following changes have been amended in the current draft-specification of SIML. Feature Modification Interpreter Version Repeat:Is-Partial Obsolete : Use Repeat-IsPartial 1.2.5 Repeat:Count Obsolete : Use Repeat-Count 1.2.5 Initial-Concept Obsolete : Use Concept 1.2.5 The above specification changes may slowly reflect in Syn Bot Studio and Syn.Bot Library."
  },
  "tutorial/siml/empty.html": {
    "href": "tutorial/siml/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/siml/index.html": {
    "href": "tutorial/siml/index.html",
    "title": "SIML - Syn Developer Network",
    "keywords": "SIML SIML , or Synthetic Intelligence Markup Language ( pronounced as si mal ) is the next generation Chatbot technology that has been developed with Speed, Simplicity and Power in Mind. The features included in SIML remain unparalleled and have been added after rigorous testing and research work. Research work over SIML began during the development of Syn Engine 2.0 and only the most essential features have made it to SIML 1.0 Draft Specification. The Graph structure of SIML is hybrid in nature and therefore can even support conversion and usage of AIML projects. An official parser for SIML has been developed using pure C# and can run on any Microsoft Platform that supports .Net Framework 4.5 or above even under Linux or Mac using Mono. The Markup Language has been designed to appeal to both Beginner and Hardcore Chatbot developers. For development purposes Synthetic Intelligence Network has also released an official IDE ( Syn Chatbot Studio ) for SIML 1.0. SIML uses state of the art modular programming practices to make sure that the Speed of execution is consistent in all cases and the memory usage is kept at an optimum level. Specification Compliance Extensible Markup Language (XML) 1.0 (Fifth Edition) Emotion Markup Language (EmotionML) 1.0 Standard ECMA-262 5.1 Edition for JavaScript Encoding UTF-8 Encoding Conventions of the document The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC2119 The sections in the main body of this document are normative unless otherwise specified. The appendices in this document are informative unless otherwise indicated explicitly. The examples in the main body are also informative."
  },
  "tutorial/siml/namespace.html": {
    "href": "tutorial/siml/namespace.html",
    "title": "Reserved SIML Namespaces - Syn Developer Network",
    "keywords": "Reserved SIML Namespaces The following namespaces have been reserved by the current SIML specification. Namespace URI Description xmlns:Siml http://syn.co.in/2014/siml The namespace of SIML Specification 1.0 xmlns:Think http://syn.co.in/2014/siml#think Namespace that can be prefixed to the Get and Set attribute of any Settings xmlns:o http://syn.co.in/2014/siml#official Namespace used by official adapters or components xmlns:x http://syn.co.in/2014/siml#external Namespace to be used by external third-party adapters or components"
  },
  "tutorial/siml/quick-start.html": {
    "href": "tutorial/siml/quick-start.html",
    "title": "SIML Quick Start - Syn Developer Network",
    "keywords": "SIML Quick Start Only a few simple SIML features have been touched in this presentation. To get into more details please visit Developer Network Getting Started This is a quick start tutorial on SIML bot creation. By the end of this tutorial you will be able to create your own SIML Bot with simple functionalities. Before you begin your development download Syn Bot Studio. To download Syn Bot Studio please visit SimlBot.com Syn Bot Studio - System Requirements All of the following system requirements should be met in their entirety. Windows 7 or Above .NET Framework 4.5 1 GB RAM 1 GB Free Disk Space Minimum 1024x768 Desktop Resolution New Project Let’s create your first SIML Bot. In Bot Studio , Click File -> New -> Project Fill in the details and select Syn Web Assistant as the base template and click Create Project Type in a filename and select a directory to save your new SIML Project to and click Save You’ve now created your first SIML Project. SIML Files Explorer Settings Bot-Settings EmotionML Maps Normalizations Pattern Reductions Random Responses Regular Expressions Repetition Scripts Sets User-Settings Files Files Hello Assistant We will go through all of the above files in this presentation but the order of evaluation may not be the same. Hello Assistant Now that you have created your Project lets Chat with your new Bot. Click on the Console tab and type Hello Assistant . Output Hello User! Explanation When you type Hello Assistant a simple pattern is matched and a response is generated. SIML Code <Siml> <Concept Name=\"Hello Assistant\"> <Model> <Pattern>HELLO ASSISTANT</Pattern> <Response>Hello User!</Response> </Model> </Concept> </Siml> SIML patterns are case-insensitive therefore if you would have typed hello ASSISTANT the response would still be the same. Writing an SIML Model Click on Hello Assistant file under the Files category. Type in the following SIML Code within the Concept Hello Assistant . <Model> <Pattern> <Item>HOW ARE YOU</Item> <Item>HOW IS IT GOING</Item> </Pattern> <Response>I am doing great!</Response> </Model> Click on the Build Project button on the Toolbar or press F5 . Use Alt+M to insert a Model template Project Build is required to reload your changes and calibrate the Graph that the SIML interpreter uses. Your SIML Code Your new SIML Code should look like the following within the Editor. <Siml> <Concept Name=\"Hello Assistant\"> <Model> <Pattern>HELLO ASSISTANT</Pattern> <Response>Hello User!</Response> </Model> <Model> <Pattern> <Item>HOW ARE YOU</Item> <Item>HOW IS IT GOING</Item> </Pattern> <Response>I am doing great!</Response> </Model> </Concept> </Siml> Testing your Bot Click on the Console tab and type how are you? . Output I am doing great! Explanation The SIML code you just wrote now has a model with patterns how are you and how is it going that yields a response I am doing great! . So when the user types how are you this model is activated and its response is evaluated. Note the <Item> element allows multiple patterns to be declared within the same Pattern element. SIML Concept A Concept is a collection of Models. The aggregation of which is your abstract idea of how the user perceives a topic while interacting with your Bot. Declaring a Concept An SIML has the following attributes. Name Values Description Type Public or Private Models within a public Concept are visible globally and will be activated whenever their patterns match. Models within a private Concept are not visible unless a Response within a public Model activates it. Name Unique name Every Concept in SIML should have a name. A name is what identifies a Concept and tells the Bot what subject is under consideration. A Concept may at times be synonymous to a Topic. Repeat True or False Models within a Concept may or may not repeat themselves. i.e. they may be designed to be evaluated only once. In that case a Concept is declared with an attribute Repeat=\"False\" SIML Model A basic unit of knowledge in SIML is stored within a Model. There are 3 types of Models in SIML. Strict Relaxed Hybrid"
  },
  "tutorial/siml/siml-aiml.html": {
    "href": "tutorial/siml/siml-aiml.html",
    "title": "SIML vs AIML - Syn Developer Network",
    "keywords": "SIML vs AIML The following comparisons has been done just to reflect the architectural differences. We have no intention of proving the opponent architecture as inferior or to degrade any of its features. At Syn we believe in a humble approach to AI and will never criticise any effort towards improving the current state of AI. Both SIML and AIML server their purpose(s) best. If you are a beginner and can live with simple Chatbot features we ourself encourage you to check AIML but if are an experienced Chatbot developer and wish to use advanced Chatbot technologies in your work then you may try SIML. Specification Compliance Extensible Markup Language (XML) 1.0 (Fifth Edition) Emotion Markup Language (EmotionML) 1.0 Standard ECMA-262 5.1 Edition for JavaScript Firstly the Generic Comparison SIML loads 5X faster than AIML SIML Package is extremely small – Network pressure is negligible SIML Set operations are super fast operations – Which implies that larger Sets have no impact on SIML Bot SIML Regular Expression processor uses state of the art computation algorithms for faster string match SIML allows Templates – You can use multiple projects as templates to create Task-Specific Bots SIML Bots can internally share their knowledge – This helps in creating Superior Bots SIML Bot comes with a Cache Manager – Helps in maintaining optimum memory usage. SIML has its own official Bot Studio to help develop multilingual Chatbots SIML is powered by Syn.Bot- Which is a Portable Class Library written in pure C# Markup Language Comparision Multi-Patterns SIML allows pattern grouping using Item tags. Syn Chatbot Studio by default comes with an Analyser to ensure there is no pattern conflicts while developing complicated bots. SIML <Model> <Pattern> <Item>A BIT *</Item> <Item>A BIT OF *</Item> <Item>A GREAT DEAL *</Item> <Item>A LITTLE *</Item> </Pattern> <Response> <GotoMatch /> </Response> </Model> AIML <category> <pattern>A BIT *</pattern> <template> <sr /> </template> </category> <category> <pattern>A BIT OF *</pattern> <template> <sr /> </template> </category> <category> <pattern>A GREAT DEAL *</pattern> <template> <sr /> </template> </category> <category> <pattern>A LITTLE *</pattern> <template> <sr /> </template> </category> Regular Expressions SIML <Model> <!-- STATUS here is a any regular expression --> <Pattern>SWITCH @STATUS</Pattern> <Response>status changed to <Match /></Response> </Model> AIML Does Not Support Regular Expressions Greedy Sets and Regex SIML <Model> <Pattern>I AM FROM [COUNTRY]</Pattern> <Response>I like <Match/></Response> <!--Matches \"United States of America\"--> </Model> AIML <!-- Country is a SET that has \"United States\" and \"United States of America\" --> <category> <pattern> I AM FROM <SET>COUNTRY</SET> </pattern> <template> I like <star/> </template> </category> <!--Matches \"United States\"--> Dynamic Sets SIML Sets can be created within Patterns thereby excluding the need for predefining smaller Sets. SIML <Model> <Pattern>I LIKE THE COLOR (RED|GREEN|BLUE)</Pattern> <Response> I like <Match/> too! </Response> </Model> AIML Does Not Support Dynamic Sets Nested Modelling SIML Models are nestable and extends support for dialogue based chatbot systems. SIML <Model> <Pattern>START APPLICATION</Pattern> <Response>Are you sure ?</Response> <Model> <Pattern>YES</Pattern> <Response>Application started</Response> </Model> </Model> AIML <category> <pattern>START APPLICATION</pattern> <template>Are you sure?</template> </category> <category> <pattern>YES</pattern> <that>Are you sure?</that> <template>Application started</template> </category> Labeling Responses SIML allows random responses to have a Label which helps in reducing redundancy of creating knowledge unit for every random output. SIML <Model> <Pattern>HOW ARE YOU</Pattern> <Response> <Label>I-am-fine</Label> <Random> <Item>I am fine</Item> <Item>I am doing great</Item> <Item>Not bad</Item> <Item>I feel awesome</Item> </Random> </Response> </Model> <Model> <Pattern>GOOD TO HEAR THAT</Pattern> <Previous>I-am-fine</Previous> <Response>Thank you</Response> </Model> AIML <category> <pattern>HOW ARE YOU</pattern> <template> <random> <li>I am fine</li> <li>I am doing great</li> <li>Not bad</li> <li>I feel normal</li> </random> </template> </category> <category> <pattern>GOOD TO HEAR THAT</pattern> <that>I am fine</that> <template>Thank you</template> </category> <category> <pattern>GOOD TO HEAR THAT</pattern> <that>I am doing great</that> <template>Thank you</template> </category> <category> <pattern>GOOD TO HEAR THAT</pattern> <that>Not bad</that> <template>Thank you</template> </category> <category> <pattern>GOOD TO HEAR THAT</pattern> <that>I feel normal</that> <template>Thank you</template> </category> Contextual Memory Every SIML Model represents a unit of knowledge that belongs to a particular Concept. A Concept is SIML is an abstract idea of what the user may input regarding a topic. SIML <!-- Context = \"User likes and dislikes\" --> <Concept Type=\"public\" Name=\"User likes and dislikes\"> <Model> <Pattern>I LIKE BACON</Pattern> <Response>Delicious!</Response> </Model> <Model> <Pattern>RED IS MY FAVORITE COLOR</Pattern> <Response>Me too</Response> </Model> </Concept> AIML <!-- Context = SomeFile.Aiml? --> <category> <pattern>I LIKE BACON</pattern> <template>Delicious!</template> </category> <category> <pattern>RED IS MY FAVORITE COLOR</pattern> <template>Me too</template> </category> Listed Settings SIML stores both Bot and User predicates as list of values. For example: A Bot or a User may like or dislike or may have some interests in varying numbers. SIML stores predicates as a List of items. Example: a User may like more than 1 movie ( which is obvious ) thus SIML allows storing of such values in a list. SIML <Variable Name=\"FavoriteMovies\"> <Value>Contact</Value> <Value>God Father</Value> <Value>Green Miles</Value> <Value>Life Is Beautiful</Value> </Variable > AIML AIML stores Predicates as a single entity –> FavoriteMovie:expendables The Power of Emotions with EmotionML W3C created EmotionML as the upcoming standard for representing emotions and its related states. SIML comes with an in-built EmotionML parser to detect and parse emotions. SIML <Siml> <emotionml version=\"1.0\" xmlns=\"http://www.w3.org/2009/10/emotionml\" dimension-set=\"http://www.w3.org/TR/emotion-voc/xml#pad-dimensions\"> <emotion id=\"happy1\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.9\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> </emotionml> </Siml> AIML AIML bots are emotionless True Respect for JavaScript SIML pushes pattern recognition a step further by creating a Hybrid-Graph system that can support conditions and scripts in place of textual patterns. JavaScript is the world’s favourite Scripting Language and so is ours. With SIML you can use JavaScript for conditional activation of patterns or to generate complex responses. SIML <Model> <Pattern><Js>10 > X;</Js></Pattern> <Response>Yes it is!</Response> </Model> <Model> <Pattern>Hey JS!</Pattern> <Response> <Js>hello();</Js> </Response> </Model> AIML AIML does’t have an internal Js Interpretor Predictive Randomness With SIML you can now match bot output to user input using the Phrase element. SIML <Model> <Pattern> <Item>WHAT IS YOUR NAME</Item> <Item>WHAT CAN I CALL YOU</Item> </Pattern> <Response> <Phrase> <Item>My name is <Bot Get=\"name\" /></Item> <Item>You can call me <Bot Get=\"name\" /></Item> </Phrase> </Response> </Model> AIML AIML Interpretors do not handle this feature Conditional Patterns SIML even supports Conditional Patterns. SIML <Model> <Pattern><If User=\"Is-Master\"/></Pattern> <Response>Welcome back Sir!</Response> </Model> AIML AIML Interpretors cannot handle this feature due to AIML’s static Graph System Do more with Operators SIML includes a variety of operators: Value GreaterThan GreaterThanOr LessThan LessThanOr Exists Defined Not Contains SIML <Model> <Pattern>HI THERE</Pattern> <Response> <If User=\"Age\" GreaterThan=\"18\"> Well, Hello there!</If> <Else>Yo!</Else> </Response> </Model> AIML AIML just offers value=\"\" comparisons One element many features vs Many elements many features With SIML we believe that there’s no need to re-invent the wheel and keep adding new tags for new features when 1 element with 1 attribute can deliver it all. SIML <Model> <Pattern>I AM FROM *</Pattern> <Response>Vive la <Text Get=\"Uppercase\"><Match /></Text></Response> </Model> <Model> <Pattern>MY NAME IS * </Pattern> <Response>Hi there <Text Get=\"Formal\"><Match /></Text></Response> </Model> AIML <category> <pattern>I AM FROM *</pattern> <template>Vive la <uppercase><star/></uppercase></template> </category> <category> <pattern>MY NAME IS *</pattern> <template>Hi there <formal><star/></formal></template> </category> And More... Parameterized Sets Repetition Management Timed Evaluation of Elements Event Handling Suggestion Mechanism Dynamic Variables and so on..."
  },
  "tutorial/siml/elements/bind.html": {
    "href": "tutorial/siml/elements/bind.html",
    "title": "Bind - Syn Developer Network",
    "keywords": "Bind Annotation <Bind> Definition Used to bind a Key to the value specified Children This MUST contain one or more SIML elements that return a value. Attributes Required: Key Name of the Key. Occurrence One or more <Bind> elements MAY occur as children of <Response> element. This element is used to easily replace texts or attributes inside of elements. The Bind element takes 1 Key value and the inner value of this element is used as the replacement value. Wherever the key name is found it is replaced with the inner value of the Bind element. Example SIML <Model> <Pattern>CONVERT * TO *</Pattern> <Response> <Bind Key=\"{0}\"><Match Index=\"2\" /></Bind> <Text Get=\"{0}\"><Match /></Text> </Response> </Model> User Input Convert rock to uppercase Bot Output ROCK Explanation The Bind element takes the key value of {0} and wherever it finds the Key it replaces the value of the Key with its inner value. Bind element should only be used when absolutely necessary and is not meant to be used as a shortcut substitution for element functions. It’s important to note that the scope of replacement by the Bind element is limited to its parent element i.e. all descendants of the its parent element that are declared after the Bind element will be affected if their attributes or arbitrary text contains the Key. The Key part of a Bind element is case-sensitive. Global Attribute Bindings To simplify the task of replacing values of attributes with the processed value of known and frequently used elements. Bind comes with global bindings that can be used at run-time without having to create a separate bind key. Example SIML <Model> <Pattern>CONVERT * TO *</Pattern> <Response> <Text Get=\"{Bind Match:2}\"><Match /></Text> </Response> </Model> User Input Convert rock to uppercase Bot Output ROCK Explanation Global bindings require that the word Bind is within curly brackets and the name of the addressed element is written after the Bind word. If a parameter is to be passed to the element then the parameter value is specified after a colon. {Bind Match:2} calls the Match element and specifies 2 as the Index value."
  },
  "tutorial/siml/elements/bot.html": {
    "href": "tutorial/siml/elements/bot.html",
    "title": "Bot - Syn Developer Network",
    "keywords": "Bot Annotation <Bot> Definition Used to get or set Bot related variables Children MUST either contain a Get or a Set attribute. The values of these attributes should a valid variable name. Occurrence One or more elements MAY occur as children of <Pattern> element or its children elements i.e. <Item> <Response> element or its children elements. The Bot tag is used to get or set bot related variables at run-time. The values of these variables can be fetched or set during a chat session using the Get or Set attribute respectively. <Model> <Pattern>WHAT IS YOUR FULL NAME</Pattern> <Response>My full name is <Bot Get=\"fullname\"/></Response> </Model> <Model> <Pattern>IS YOUR [Bot:Name]</Pattern> <Response>Yes</Response> </Model> In the above example whenever the user says what is your full name? the Bot will respond My name is followed by the full name of the bot. To define a Bot predicate use a BotSettings element and add a new element called Variable to it."
  },
  "tutorial/siml/elements/botemotion.html": {
    "href": "tutorial/siml/elements/botemotion.html",
    "title": "BotEmotion - Syn Developer Network",
    "keywords": "BotEmotion Annotation <BotEmotion> Definition Gets or sets the Bot emotion Children content Attributes Optional: Get This attribute MUST be used when trying to retrieve an already declared emotion. The values MUST be either name or id . Optional: ID This attribute MUST be used when trying to set the Bot’s emotion to an already declared emotion. The value of this attribute MUST be a valid emotion ID Occurrence One or more of this element MAY occur within a <Response> element. SIML is the first Chatbot Markup Language that has an in-built parser for EmotionML. Therefore in SIML every emotion ( whether Bot’s or Users’ ) can be measured in different dimensions. The entire idea behind including EmotionML in SIML is to create a catalogue of emotions that can represent as many individual emotions that humans are familiar with. The following is an example of 2 emotions defined in EmotionML and being included within SIML. <Siml> <emotionml version=\"1.0\" xmlns=\"http://www.w3.org/2009/10/emotionml\" xmlns:Siml=\"http://syn.co.in/2014/siml\" dimension-set=\"http://www.w3.org/TR/emotion-voc/xml#pad-dimensions\"> <emotion id=\"pleased\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#everyday-categories\"> <info> <Siml:Emotion Name=\"very pleased\" /> </info> <category name=\"pleased\" /> <dimension name=\"pleasure\" value=\"0.6\" /> <dimension name=\"arousal\" value=\"0.4\" /> <dimension name=\"dominance\" value=\"0.4\" /> </emotion> <emotion id=\"angry\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"angry\" /> </info> <category name=\"anger\" /> <dimension name=\"pleasure\" value=\"0.1\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> </emotionml> </Siml> In the above example there are 2 emotions defined with the id pleased and angry and in the info tag the SIML namespace is used to declare the Emotion element which is used to give the ancestor emotion element a unique name. This name can later be used to access the emotion. Example <Model> <Pattern>How are you feeling today</Pattern> <Response> I feel <BotEmotion Get=\"name\" /> </Response> </Model> The <BotEmotion> element is used to Get or Set an emotion for the Bot. This element has a Get attribute using which the developer can either retrieve the name of current emotion or the ID. To set the emotion to an already declared emotion use the ID attribute. The following example should give you an idea as to how you can Get or Set the emotion for the Bot. Get Example <Model> <Pattern>Get Bot Emotion</Pattern> <Response> <BotEmotion Get=\"id\" /> </Response> </Model> Set Example <Model> <Pattern>Set Bot Emotion</Pattern> <Response> <BotEmotion ID=\"pleased\"/> </Response> </Model> When the ID attribute is used the element will not return any value."
  },
  "tutorial/siml/elements/botsettings.html": {
    "href": "tutorial/siml/elements/botsettings.html",
    "title": "BotSettings - Syn Developer Network",
    "keywords": "BotSettings Annotation <BotSettings> Definition Groups variables that belong to the Bot. Children MUST contain one or more <Variable> elements Occurrence One <BotSettings> element MAY occur within an <Siml> element. This element stores internal values for the Bot . Many of the values are used during Bot initialization and tells the Bot in what environment its supposed to run. In Syn Bot Framework We have optimized retrieval of stored values to great extent ensuring that a large collection of Bot settings will not affect the Bot’s performance. BotSettings element takes one or more Variable element as its children and every child element stores single or multiple values. <Siml Version=\"1.0\"> <BotSettings> <Variable Name=\"Favorite_Movies\"> <Value>Contact</Value> <Value>God Father</Value> <Value>Life Is Beautiful</Value> <Value>Green Miles</Value> </Variable> <Variable Name=\"Version\" Value=\"1.0\"/> <Variable Name=\"Name\" Value=\"Unknown\" /> <Variable Name=\"Location\" Value=\"Bangalore, India\" /> <Variable Name=\"Gender\" Value=\"Female\" /> <Variable Name=\"Culture\" Value=\"en-US\" /> </BotSettings> </Siml> Example SIML <Model> <Pattern>What version are you</Pattern> <Response> I am version <Bot Get=\"version\"/> </Response> </Model> User Input What version are you? Bot Output I am version 1.0 Explanation The Bot element is used to retrieve bot related settings/predicates and their values. The value of the Getattribute represents the Settings name. Reserved Bot Variables Certain Bot Variables are reserved to help the developer customize the behavior of the interpreter without having to hard-code them in a .Net Application. Variable Name Function Empty-Response The value of this variable is submitted to the user if the Bot for some unknown reason is not able to generate an output. If this is due to an error then the LogAdded event of the Bot will also be fired along with the response. Empty-Match The value of this variable is used when a match element ( <Match> , <PreviousMatch> , <ConceptMatch> ) is present in a Model but the length of the value matched by the element is zero. Timeout-Response The value of this variable is submitted to the user if the chat request is timed out. Currently, this response is also used when long or infinite loops are encountered. Culture The value of this variable should be a valid culture name as specified in National Language Support (NLS) API Reference. This value is used by the interpreter to make internal modifications when working with strings. Max-Request-Length The value of this variable is the maximum number of individual characters that are allowed in a Chat request. If exceeded then a Timedout-Response is sent to the user. The default value for this variable is 250 characters. Emotion The value of this variable is the default emotion a Bot attains when it’s initialized. The value should a valid emotion name declared within the emotionml document using the SIML namespace. List-Separator The value of this variable is used as a delimiter when the List attribute is used on a variable. List-End The value of this variable is used as the last delimiter when the List attribute is used on a variable. Default The value of this variable is used when a Get attribute is used to retrieve the value of a non-existent variable. Undefined The value of this variable is used to determine if a variable is defined or not. If a variable has the same value as the value of the Undefined variable then the variable is considered undefined. The default value of this variable is an empty string. While-Limit The integer value of this variable is used to determine the maximum number of while loops allowed. Timeout The time in milliseconds to stop evaluating the chat request if no response is generated."
  },
  "tutorial/siml/elements/js.html": {
    "href": "tutorial/siml/elements/js.html",
    "title": "Js - Syn Developer Network",
    "keywords": "Js Annotation <Js> Definition Used to execute JavaScript Occurrence One <Js> element MAY occur as a child of <Pattern> or <Previous> element. One or more <Js> elements MAY occur within a <Response> element. The Js in the Js tag stands for JavaScript and is used to execute JavaScript to generate a Response or to validate a Scripted pattern. This shorthand name is to ease recurring usage of the tag itself. The content of this element should be a valid JavaScript that may or may not return a value. All SIML Elements are valid inside the Js tag and will return their respective values. Example SIML <Model> <Pattern>WHAT IS THE cube OF *</Pattern> <Response> <Js>function cube(num){ return num*num*num; } cube(<Match />); </Js> </Response> </Model> User Input What is the cube of 5? Bot Output 125 Explanation A function named cube is declared inside the Js element and is also called using the function signature. SIML Bot then sends the JavaScript code to the JavaScript Engine which in turn returns the evaluated value. Note The first execution of a Script maybe slower when compared to recurring executions this behaviour is normal and if your function is too large to fit into your speed requirements declare your script inside the Global Scripts files using the Script tag."
  },
  "tutorial/siml/elements/label.html": {
    "href": "tutorial/siml/elements/label.html",
    "title": "Label - Syn Developer Network",
    "keywords": "Label Annotation <Label> Definition Gives a response a unique identifier that can later be denoted using the value of this element. Occurrence A single <Label> element MAY occur as a child of <Response> , <Random> or <Phrase> element. A Label gives a response a unique ID which can later be used by other SIML Models. The value of this Label replaces the value of the Previous bot utterance which is useful when a lot of random responses are present in a Model and the developer has no intention of creating multiple Models addressing every response in the main Model. Example <Model> <Pattern>OPEN A NEW TEXT FILE</Pattern> <Response><Label>:Note-Word</Label>In Notepad or WordPad?</Response> </Model> <Model> <Pattern>Notepad</Pattern> <Previous>:Note-Word</Previous> <Response>Opening Notepad...</Response> </Model> <Model> <Pattern>WordPad</Pattern> <Previous>:Note-Word</Previous> <Response>Opening WordPad...</Response> </Model> The Label above gives the response a unique ID called Note-Word which is later used by the other Models as a reference to the response In Notepad or WordPad . By convention begin a label with a colon (:) and use (-) hyphens to separate words and avoid any other symbol. Moreover, a label must contain at least 2 words. Labels must not be used in nested Model structures as the nested Model internally creates a unique label that overrides any existing label in parent Model."
  },
  "tutorial/siml/elements/late.html": {
    "href": "tutorial/siml/elements/late.html",
    "title": "Late - Syn Developer Network",
    "keywords": "Late Annotation <Late> Definition Returns the evaluated value of its inner elements after a specified interval. Attributes Optional: MAY contain a Second Minute or Hour attribute. The value of which determines the delay time in seconds, minutes and hours respectively. If none of the aforementioned attributes are specified then a delay interval of 1 second is assumed. Occurrence One of more of this element MAY occur as descendants of <Response> element. The Late tag is used to delay the evaluation of its inner elements or arbitrary value by a specified interval. The value of the interval is usually specified in seconds. The Late tag returns an empty string in its parent Model . A Timer may be required by the interpreter to control the timing of evaluation. Example SIML <Model> <Pattern>Run App after <Match /> seconds</Pattern> <Response> App will be opened after <Match /> seconds. <Late Second=\"{Bind:Match}\"> <Goto>Run App</Goto> </Late> </Response> </Model> User Input Run app after 10 seconds Bot Output App will be opened after 10 seconds. Explanation The Late tag will evaluate its inner elements after 10 seconds and the generated response will be send back as an event response. The Second attribute is used to set the delay interval in seconds."
  },
  "tutorial/siml/elements/learn.html": {
    "href": "tutorial/siml/elements/learn.html",
    "title": "Learn - Syn Developer Network",
    "keywords": "Learn Annotation <Learn> Definition Saves the specified Model into the Bot’s main GraphNode ( GraphMaster ) Children This element MUST contain either a <Model> element or a <Concept> element. Occurrence One or more <Learn> elements MAY occur as children of <Response> element. Learning for a bot in its simplest form is saving of some of information ( a fact ) that was projected to the Bot. Now in SIML the Learn tag is used to save a Model into the Bot’s Knowledge Base ( Graph ) and this unit of knowledge will then be available to all users. Suppose you wish to teach your Bot that An Apple is a fruit Example SIML <Model> <Pattern>* IS A *</Pattern> <Response> Alright I will keep that in mind. <Learn> <Model> <Pattern> What is an <Process><Match /></Process> </Pattern> <Response> It's a <Process><Match Index=\"2\"/></Process> </Response> </Model> </Learn> </Response> </Model> User Input An apple is a fruit Bot Output Alright I will keep that in mind. Explanation The information within the Learn element tells the Bot that it should now save the Model within its Knowledge Base. The Process tag in this example is used to ensure that the element Match is evaluated and is not saved as such. In the above example the Model within the Learn element has not been enclosed within a Concept but as every Model in SIML should belong to a Concept the Concept for the new Model will be the same Concept under which the main Model for the above example resides. If you wish to specify a Concept you may do so by first adding the Model within a Concept and then using the Learn element as its parent. Example <Model> <Pattern>* IS A *</Pattern> <Response> Alright I will keep that in mind. <Learn> <Concept Name=\"Learn\" Type=\"Public\" Repeat=\"True\"> <Model> <Pattern>What is an <Process><Match /></Process></Pattern> <Response>It's a <Process><Match Index=\"2\" /></Process></Response> </Model> </Concept> </Learn> </Response> </Model>"
  },
  "tutorial/siml/elements/map.html": {
    "href": "tutorial/siml/elements/map.html",
    "title": "Map - Syn Developer Network",
    "keywords": "Map Annotation <Map> Definition Transforms a fragment of text that belongs to one set into an element of another. Children MUST contain one or more <MapItem> elements if being used to declare a set of <MapItem> elements. Attributes Required: MUST contain either Get or Name attribute depending on the context of usage. Optional: MAY contain a Reverse attribute Occurrence One or more <Map> elements MAY occur as children of <Response> element. One or more of this element MAY occur as children of <Siml> element if being used to define a set of <MapItem> elements. MapItem Annotation <MapItem> Definition Represents a single mapping element. Attributes Required: MUST contain one Content attribute and one Value attribute. Occurrence One or more <MapItem> elements MUST occur as children of <Map> element. Mapping allows the bot developer to transform a fragment of one set into an element of another. SIML uses Maps for gender, person and other substitution. <Siml> <Map Name=\"gender\"> <MapItem Content=\"he\" Value=\"she\" /> <MapItem Content=\"she\" Value=\"he\" /> <MapItem Content=\"to him\" Value=\"to her\" /> <MapItem Content=\"for him\" Value=\"for her\" /> <MapItem Content=\"with him\" Value=\"with her\" /> <!--And so on...--> </Map> <Map Name=\"person\"> <MapItem Content=\"i was\" Value=\"he or she was\" /> <MapItem Content=\"i am\" Value=\"he or she is\" /> <MapItem Content=\"i\" Value=\"he or she\" /> <MapItem Content=\"he was\" Value=\"i was\" /> <!--And so on...--> </Map> <Map Name=\"person2\"> <MapItem Content=\"with you\" Value=\"with me\" /> <MapItem Content=\"with me\" Value=\"with you\" /> <MapItem Content=\"to you\" Value=\"to me\" /> <MapItem Content=\"to me\" Value=\"to you\" /> <!--And so on...--> </Map> </Siml> Example SIML <Model> <Pattern>I like chatbots like you</Pattern> <Response>Good to know that you like <Map Get=\"person2\"><Match/></Map></Response> <!--<Map Get=\"person2\"><Match /></Map> can also be written as <Map Get=\"person2\" />--> </Model> User Input I like chatbots like you Bot Output Good to know that you like chatbots like me Explanation The Map element searches for the right transformation under the Map named person2 and returns the transformed value. If you wish to use a reverse sequence of an already declared Map you can do so by using the Reverse attribute. A Reverse attribute along with a special name for the reversed map should be provided to store reversed sequence of the Map under consideration. <Siml> <Map Name=\"number2word\" Reverse=\"word2number\"> <MapItem Content=\"one\" Value=\"1\" /> <MapItem Content=\"two\" Value=\"2\" /> <MapItem Content=\"three\" Value=\"3\" /> </Map> </Siml> The above code is equivalent to writing: <Siml> <Map Name=\"number2word\"> <MapItem Content=\"one\" Value=\"1\" /> <MapItem Content=\"two\" Value=\"2\" /> <MapItem Content=\"three\" Value=\"3\" /> </Map> <Map Name=\"word2number\"> <MapItem Content=\"1\" Value=\"one\" /> <MapItem Content=\"2\" Value=\"two\" /> <MapItem Content=\"3\" Value=\"three\" /> </Map> </Siml> A reversed map can be used just like a normal Map during run-time which no special changes in behavior. There is no performance impact while using reversed maps as they are stored just like normal maps but in the reverse sequence. As the Value attribute in a MapItem can have duplicate entries reversed Map always store 1 unique value per Content. Example SIML <Model> <Pattern>CHANGE * TO NUMBER</Pattern> <Response> <Map Get=\"word2number\"> <Match /> </Map> </Response> </Model> <Model> <Pattern>CHANGE * TO WORD</Pattern> <Response> <Map Get=\"number2word\"> <Match /> </Map> </Response> </Model> User Input Change one to number Change 2 to word Bot Output 1 two Explanation The interpreter gets the values for both the Maps at run-time without any change in behavior."
  },
  "tutorial/siml/elements/match.html": {
    "href": "tutorial/siml/elements/match.html",
    "title": "Match - Syn Developer Network",
    "keywords": "Match Annotation <Match> Definition Returns the text fragment captured by an SIML wildcard in a pattern Attributes Optional Index The Index=”n” is optional, and if left off, the Index value of 1 is assumed which yields the first matching text fragment. Occurrence One of more of this element MAY occur as descendants of <Response> element. The Match tag is used to retrieve words or sentences that are stored by SIML pattern symbols. Wildcards are not stored for Priority words, Individual words and Keywords pattern defined using Curly Brackets. Example 1 SIML <Model> <Pattern>YOU ARE %</Pattern> <Response>What makes you think that I am <Match/>?</Response> </Model> User Input Are you a chatbot? Bot Output What makes you think that I am a chatbot? Explanation Once a wildcard is matched the <Match/> tag can used to retrieve the captured fragment of text. The Index attribute is used to retrieve a keyword at a particular index. Indices are stored in ascending order. Example 2 SIML <Model> <Pattern>* LIKES *</Pattern> <Response>I see so <Match/> likes <Match Index=\"2\"/></Response> </Model> User Input Leslie likes cupcakes Bot Output I see so Leslie likes cupcakes. Explanation The first Match tag ( by default ) uses the Index 1 and matches Leslie however the second Match tag has an index of 2 and will return the second fragment of text that was stored by the second wildcard symbol giving us the value cupcakes ."
  },
  "tutorial/siml/elements/math.html": {
    "href": "tutorial/siml/elements/math.html",
    "title": "Math - Syn Developer Network",
    "keywords": "Math Annotation <Math> Definition Returns a textual value after performing the specified mathematical operation on its children. Attributes Optional: MAY contain a Get attribute. If left off then the element acts as a Math Expression Evaluator. Occurrence One or more <Math> elements MAY occur within a <Response> element. The Math element allows mathematical operations to be performed using the variable provided as its inner value. The following Get operations are available as of SIML 1.0 log log10 abs sqrt sin cos tan acos asin atan cosh sinh tanh exp sign floor pi e random evaluate increment decrement Example SIML <Model> <Pattern>GET SINE OF *</Pattern> <Response> <Math Get=\"sin\"><Match /></Math> </Response> </Model> <Model> <Pattern>WHAT IS THE VALUE OF PI</Pattern> <Response> <Math Get=\"pi\" /> </Response> </Model> <Model> <Pattern>GIVE ME A RANDOM NUMBER</Pattern> <Response> <Math Get=\"random\" Min=\"0\" Max=\"10\" /> </Response> </Model> User Input Get sine of 10 What is the value of PI Give me a random number Give me a random number Bot Output 0.17364817766693034885171662676931 3.1415926535897932384626433832795 24 5 Explanation The first Math element gets the Sine value for 10, the second gives you the value of the constant PI and finally the Random attribute value is used to get a random number. The Min attribute is optional ( defaults to 0 ). Another special feature of the Math element in SIML is that it’s internally a Math expression evaluator thus if you do not specify the Get attribute the element behaves as a Math expression evaluator and returns the evaluated value. Example SIML <Model> <Pattern>Evaluate *</Pattern> <Response> <Math Get=\"evaluate\"><Match /></Math> <!-- Or even <Math><Match /><Math>--> </Response> </Model> User Input Evaluate sqrt(4) Bot Output 2 Explanation The Math element takes its inner value as a mathematical expression and evaluates the expression and finally returns the value. Math element can also evaluate slightly complex expressions like sin(sqrt(4)) Besides the Get attribute there is also a Round attribute. The Round attribute takes an integer value and rounds the content of the Math element to a specified number of fractional digits. A Round attribute can be used alongside the Get attribute or as the only attribute when the Math element is used for evaluating a Mathematical expression. The specified value for the Round attribute should not be less than 0 or greater than 15. Example SIML <Model> <Pattern>WHAT IS THE VALUE OF PI</Pattern> <Response> <Math Get=\"pi\" Round=\"2\" /> </Response> </Model> <Model> <Pattern>COS OF *</Pattern> <Response> <Math Round=\"4\">cos(<Match />)</Math> </Response> </Model> User Input what is the value of pi. cos of 6 Bot Output 3.14 0.9602 Explanation Round attribute takes affect only after a value is generated by the Math element. Once a value is generated the Round attribute rounds the given value using the Integer number specified."
  },
  "tutorial/siml/elements/model.html": {
    "href": "tutorial/siml/elements/model.html",
    "title": "Model - Syn Developer Network",
    "keywords": "Model Annotation <Model> Definition A Unit of knowledge in SIML and a container for Patterns and Responses Children This element SHOULD contain one <Pattern> or <Example> element and one <Response> element. It MAY contain a <Previous> element. It MAY contain one or more <Model> elements Occurrence One or more of this element MAY occur as children of <Concept> element or as children of another <Model> element. This element MAY occur once within <Learn> or <Remember> element. A Model in SIML is a Unit of knowledge that encapsulates 2 important entities i.e. the Pattern and the Response element. Pressing Alt+M in Syn Bot Studio will insert a Model template for you. Each pattern is the entry point for the Model. A Response element within a Model is evaluated if and only its Pattern section is satisfied. <Siml> <Concept Name=\"User likes and dislikes\"> <Model> <Pattern>Hello Bot</Pattern> <Response>Hi there!</Response> </Model> </Concept> </Siml> The above will produce a result Hi there! whenever the user enters Hello Bot . SIML patterns are case-insensitive and they are internally represented in their case-less form ( this has been adopted to make SIML bot compatible with Syn Engine 2.0 ). Nested Modelling It’s important to note that SIML Models are nestable and can occur within another SIML Model. Nesting maybe considered as a syntactic sugar to avoid using the <Previous> element every-time a developer wishes to use some hierarchical interaction with the user. However unlike the <Previous> element the actual Response generated by the Parent Model is not taken into consideration instead the child Model only checks if Parent Model was previously activated. <!--Parent Model--> <Model> <Pattern>CLOSE APPLICATION</Pattern> <Response>Are you sure ?</Response> <!--Child Model--> <Model> <Pattern>Yes</Pattern> <Response>Application stopped.</Response> </Model> <!--Child Model--> <Model> <Pattern>No</Pattern> <Response>As you wish.</Response> </Model> </Model>"
  },
  "tutorial/siml/elements/output.html": {
    "href": "tutorial/siml/elements/output.html",
    "title": "Output - Syn Developer Network",
    "keywords": "Output Annotation <Output> Definition Denotes 1 individual output the Bot generates for an Input Attributes Optional Index The Index=”n” is optional, and if left off, the Index value of 1 is assumed which yields the last sentence of the last chat result. Occurrence One or more <Output> elements MAY as descendants of <Response> element. The Output element is used to retrieve the previous Bot utterance. Just like the Input element the Output element has an Index attribute which tell the Bot which Output of the Bot is being addressed. An Output is part of the complete message a Bot may generate when a User message is received. A Result may include multiple Outputs. Example SIML <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine. Thank you for asking.</Response> </Model> <Model> <Pattern>WHAT DID YOU JUST SAY</Pattern> <Response>I said \"<Output/>\"</Response> </Model> User Input How are you? What did you just say? Bot Output I am fine. Thank you for asking. I said “I am fine. Thank you for asking.” Explanation The Output element in this example gets the last response generated by a Model."
  },
  "tutorial/siml/elements/pattern.html": {
    "href": "tutorial/siml/elements/pattern.html",
    "title": "Pattern - Syn Developer Network",
    "keywords": "Pattern Annotation <Pattern> Definition Used to declare an SIML Pattern used to activate a Model Children This element MAY contain one or more <Item> elements the values of which SHOULD be a valid SIML pattern. It MAY contain one <If> or <Js> element. If no children elements are specified a <Pattern> element MUST contain a valid SIML pattern as an arbitrary text. Occurrence This <Pattern> element MUST occur as a child of element. A <Pattern> element is used to declare an SIML pattern. The above pattern in the Model section is called an atomic pattern because the pattern comprises of only words and no symbols. In SIML there are a number of ways of declaring a valid pattern by either using wildcards, sets, regular expressions, variable state comparison (conditionals) or even JavaScript. Symbols in Pattern Symbol Description ^ Top priority word match % Zero or more word wildcard match _ One or more word wildcard match word Exact word match [word] Match found in SIML Set (Word1|Word2|Word3) Dynamic Set declaration @ Match found in SIML Regular Expression Set $ Zero or more word wildcard match {Word1 Word2} Sentence Match * One or more word wildcard match Caret Firstly the ^ symbol. This symbols ensures that the word after the symbol is to be evaluated ( or looked for ) before any other word or symbol. Example SIML Code <Model> <Pattern>HI THERE</Pattern> <Response>Heya user</Response> </Model> <Model> <Pattern>^HI THERE</Pattern> <Response>Hello user</Response> </Model> User Input Hi there Bot Output Heya User Explanation The symbol ^ in the above example speaks for itself by pointing upwards which implies that the word Hi in the first pattern declared in the first Model has the highest priority. So if the user says Hi there the bot will respond Hello user despite the fact that the pattern HI THERE has been defined before the pattern ^HI THERE. Percent The % symbol is used to denote a pattern that will match zero or more words. Example SIML <Model> <Pattern>HELLO SIML</Pattern> <Response>Life is awesome!</Response> </Model> <Model> <Pattern>% SIML</Pattern> <Response>You Rock!</Response> </Model> User Input Hello Siml Bot Output You Rock! Explanation Since % has higher priority than an exact word SIML Bot will accept the second model with the pattern % SIML and generate a response.Note: If the user says SIML the response will still be You Rock! this is because the Percent symbol accepts 0 or more words. Underscore The underscore symbol matches one or more words unlike the percent symbol that matches zero or more words. Example SIML <Model> <Pattern>_ MY NAME IS LESLIE</Pattern> <Response>Good to meet you.</Response> </Model> <Model> <Pattern>HI MY NAME IS LESLIE</Pattern> <Response>Well, Hi there.</Response> </Model> User Input Hi my name is Leslie Bot Output Good to meet you. Explanation The _ symbol has a priority lesser than % but higher than an exact word. This symbol is useful if you wish to ignore a word or sentence especially the name of the Bot when declaring commands. A Word A word in any language ranks 4 under the evaluation tree in SIML. Words are matched as such and no match indexing is generated. SIML uses UTF-8 encoding to address multiple languages. Example SIML <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine.</Response> </Model> <Model> <Pattern>HOW ARE YOU DOING TODAY</Pattern> <Response>I am doing great.</Response> </Model> User Input How are you Bot Output How are you Explanation Words and their locations are matched as such. If you remove the Model with the Pattern How are you SIML won’t activate the second Model containing the pattern How are you today Set A Set is a collection of words or sentences. SIML Interpreter uses state-of-the-art technology to make sure large sets do not affect the performance of matching text fragments against a collection of words in a set. A set declaration requires that you give the set a unique name. A set is addressed using Square Brackets so to use a set of colors with the name COLOR you would use [COLOR] Two different sets with different names must not hold common values. Example SIML <Model> <Pattern>I LIKE THE COLOR [COLOR]</Pattern> <Response>Me too!</Response> </Model> User Input I like the color blue Bot Output Me too! Explanation [COLOR] is a collection of colors (names of colors) Sets in SIML can be declared in using the <Set> Tag and can be accessed ( once declared ) using Round Brackets around their names. Set Declaration Annotation <Set> Definition Declares an SIML Set Children The element MUST contain one or more <Item> element OR a comma separated arbitrary value. Attributes Required Name Unique name given to the Set. Occurrence One or more of this element MAY occur as children of <Siml> element. <Set Name=\"Color\"> <Item>RED</Item> <Item>GREEN</Item> <Item>BLUE</Item> <Item>ORANGE</Item> </Set> Or <Set Name=\"Color\">Red, Green, Blue, Orange</Set> Reserved Set Names SIML comes with reserved Set names that can help developers address Bot, User and Map items directly within a Pattern. The name of the Set and the parameter part are separated using a colon. Like all set names, the name and the parameter part of the reserved variables are case-insensitive. Reserved sets are also dynamic. Hence, at run-time if the value of any variable is changed the pattern will then match the new value. Bot Set To indicate a bot variable the set name Bot is followed by the name of the bot variable. Example SIML <Model> <Pattern>Is your name [Bot:Name]</Pattern> <Response> Yes, my name is <Match /> </Response> </Model> User Input Is your name Maya? Bot Output Yes, my name is Maya Explanation At run-time the pattern is evaluated after replacing the value of [Bot:Name] with the name of the Bot as Is your name Maya . User Set Example SIML <Model> <Pattern>Is my name [User:Name]</Pattern> <Response> Yes, your name is <Match /> </Response> </Model> User Input Is my name Leslie? Bot Output Yes, your name is Leslie Explanation At run-time the pattern is evaluated after replacing the value of [User:Name] with the name of the user as Is your name Leslie . Map Set Example SIML <Model> <Pattern>Is your [Map:Family-Gender] a researcher</Pattern> <Response> Yes, my <Match /> is a researcher. </Response> </Model> User Input Is your father a researcher? Bot Output Yes, my father is a researcher Explanation The family-gender Map may contain father , mother , brother and sister and their gender values. While parsing the Content value of the <MapItem> is treated as a Set value. Choices Example <Model> <Pattern>I LIKE THE COLOR (RED|GREEN|BLUE)</Pattern> <Response>Me too!</Response> </Model> Priority of Choices and Normal Sets are the same. Conflicts between choices and listed sets can be ignored as the former serves the same purpose but within a limited domain. Ampersat The @ symbol is used to denote a Regular Expression in SIML. Every regular expression a user creates is stored in an optimized manner for speed and consistency. Bot developers will find regular expression in SIML to be extremely fast. Example SIML <Model> <Pattern>I LIKE THE COLOR @COLOR</Pattern> <Response>Me too!</Response> </Model> User Input I like the color blue Bot Output Me too! Explanation @Color is a regular expression with the unique name COLOR Dollar The $ symbol matches 0 or more words and has less priority than its sibling symbol % . Example SIML <Model> <Pattern>YOU ARE $ COOL</Pattern> <Response>Yes, I am.</Response> </Model> User Input You are so cool Bot Output Yes, I am. Explanation The dollar symbol will match so. If the user writes You are cool the pattern will still hold as the symbol matches 0 or more words. Curly Brackets {} allows developers to define a set of words that should exist in a sentence. Any number of words can exist before, between and even after the specified collection of words but the order of appearance of these words should match their orders defined within the curly brackets. Example SIML <Model> <Pattern>{CONTACT NUMBER}</Pattern> <Response>+1-000-00-0000</Response> </Model> User Input So what is your contact number? Bot Output 1-000-00-0000 Explanation The pattern contains 2 important words contact and number and even if the user adds a word in this case phone the pattern will still hold and a response will be generated. Asterisk The * symbol is a wildcard that matches 1 or more words and has the least priority in the evaluation tree. This symbol is the most widely used wildcard symbol in knowledge base development. Example SIML <Model> <Pattern>ARE YOU A ROBOT</Pattern> <Response>Maybe I am.</Response> </Model> <Model> <Pattern>ARE YOU * ROBOT</Pattern> <Response>I am an intelligent entity.</Response> </Model> User Input Are you some robot? Bot Output I am an intelligent entity. Explanation Since there is no exact pattern for Are you some robot the * wildcard matches the input Are you some robot . The word some is then stored in the Match list which can later be retrieved using the <Match /> tag. Behavior of Zero+ wildcards When zero+ wildcards are used the match value for the wildcard may or may not contain a value. If the length of match is 0 and the <Match> element or any of its derivative elements are used to retrieve this value. The interpreter checks for the value of the reserved Bot variable Empty-Match . If a value is specified for the variable then the value is used otherwise an empty string is returned. Ranged Wildcards Ranged wildcards allow developers to set a fixed or a variable length capture on any SIML wildcard aforementioned. A ranged wildcard will always maintain its evaluation index based on the symbol used. Fixed Length If you wish to capture an exact number of words from user input then add the required number as a suffix to the type of wildcard symbol of your choice. Example SIML <Model> <Pattern>CALL ME *2</Pattern> <Response>Nice to meet you, <Match /></Response> </Model> <Model> <Pattern>CALL ME *</Pattern> <Response>Well, hello there <Match /></Response> </Model> User Input Call me Sean Gates Call me Sean William Gates Bot Output Nice to meet you, Sean Gates Well, hello there Sean William Gates Explanation The star * wildcard is suffixed with 2 making sure that the wildcard captures exactly 2 words from user input. Likewise developers can make use of any other SIML wildcard symbol and suffix it with a number to specify the exact number of words it should capture. Suffixing a Zero+ wildcard with a number forces the wildcard to act as a One+ wildcard that captures the exact number of words specified. Variable Length A variable length wildcard can be used to specify the maximum number of words a wildcard may capture. To create a variable length wildcard prefix the number with a tilde. Example SIML <Model> <Pattern>CALL ME *~2</Pattern> <Response>It's a pleasure to meet you, <Match /></Response> </Model> <Model> <Pattern>CALL ME *</Pattern> <Response>Well, hello there <Match /></Response> </Model> User Input Call me Sean Call me Sean Gates Call me Sean William Gates Bot Output It’s a please to meet you, Sean It’s a pleasure to meet you, Sean Gates Well, hello there Sean William Gates Explanation The star * wildcard is suffixed with tilde symbol followed by 2 making sure that the wildcard captures a maximum of 2 words from user input. Priority Index Every wildcard in SIML is evaluated based on a priority index. The evaluation sequence of a Wildcard symbol is as follows. Fixed Length – Example *2 Variable Length – Example *~2 Atomic Symbol – Example *"
  },
  "tutorial/siml/elements/phrase.html": {
    "href": "tutorial/siml/elements/phrase.html",
    "title": "Phrase - Syn Developer Network",
    "keywords": "Phrase Annotation <Phrase> Definition Returns one item from a list of specified elements whose value best match the user input. Children This element MUST contain one or more <Item> elements if the Get attribute is not specified. Attributes Optional: Get This attribute is used to retrieve a globally declared element. Occurrence One or more <Phrase> elements MAY occur as children of <Response> element. Phrase is a sibling of Random element. The key difference between a Phrase element and a Random element is that Phrase element tries to match the output to user input. Lets see an example for a better clarification. Example SIML <Model> <Pattern> <Item>WHAT IS YOUR NAME</Item> <Item>WHAT CAN I CALL YOU</Item> </Pattern> <Response> <Phrase> <Item>My name is <Bot Get=\"name\" /></Item> <Item>You can call me <Bot Get=\"name\" /></Item> </Phrase> </Response> </Model> User Input What is your name? What can I call you? Bot Output My name is Maya You can call me Maya Explanation The Phrase element scans it children Item elements and tries to find the best match against user input. Phrase elements are slightly slower when compared to Random elements as every word and character in the user input and available outputs have to be evaluated and measured. It's highly recommended that developers stick with Random elements wherever possible and should use the Phrase element when it’s absolutely necessary to match the output to user input."
  },
  "tutorial/siml/elements/previous.html": {
    "href": "tutorial/siml/elements/previous.html",
    "title": "Previous - Syn Developer Network",
    "keywords": "Previous Annotation <Previous> Definition Refers to the last (normalized) sentence of the previous Bot utterance. Children MAY contain one or more <Item> elements Occurrence A single <Previous> element MAY occur as a child of <Model> element The value of the Previous element refers to the last bot utterance. The Previous element is used immediately after the Pattern tag. A Previous tag after a Pattern tag implies that the SIML Bot should match the Pattern and the Previous utterance of the Bot. If both the conditions are met the Response element of the Model is evaluated. Example SIML <Model> <Pattern>OPEN A NEW TEXT FILE</Pattern> <Response>In Notepad or Wordpad?</Response> </Model> <Model> <Pattern>Notepad</Pattern> <Previous>In Notepad or Wordpad</Previous> <Response>Opening Notepad...</Response> </Model> <Model> <Pattern>Wordpad</Pattern> <Previous>In Notepad or Wordpad</Previous> <Response>Opening Wordpad...</Response> </Model> User Input Open a new text file Notepad Bot Output In Notepad or Wordpad? Opening Notepad.. Explanation When the user says open a new text file the Bot will ask In Notepad or Wordpad? . This response of the Bot is now stored as its Previous response. Two important normalizations are performed on Bot output before being stored as words for the Previous element. Input Filtration Sentence Splitting Multi-Previous Elements SIML also offers multiple previous items to be declared within a Previous element using the <Item> tag. <Model> <Pattern>BACON</Pattern> <Response> <Random> <Item>Do you like bacon?</Item> <Item>so you like bacon?</Item> </Random> </Response> </Model> <Model> <Pattern>YES</Pattern> <Previous> <Item>Do you like bacon</Item> <Item>So you like bacon</Item> </Previous> <Response>Me too! I love bacon</Response> </Model>"
  },
  "tutorial/siml/elements/previousmatch.html": {
    "href": "tutorial/siml/elements/previousmatch.html",
    "title": "PreviousMatch - Syn Developer Network",
    "keywords": "PreviousMatch Annotation <PreviousMatch> Definition Returns the value captured by a wildcard in the Previous element. Attributes Optional: Index If specified returns the text fragment matching the nth pattern in the Previous element Occurrence One or more of <PreviousMatch> elements MAY occur as children of <Response> element. This is a type of Match element that returns a text fragment matching the nth pattern * contained in a in <Previous> element. Example SIML <Model> <Pattern>ASK ME SOMETHING</Pattern> <Response>what is your favourite sport?</Response> </Model> <Model> <Pattern>*</Pattern> <Previous>WHAT IS YOUR FAVOURITE *</Previous> <Response>I see, so your favourite <PreviousMatch /> is <Match />.</Response> </Model> User Input Ask me something. Nascar Bot Output What is your favourite sport? I see, so your favourite sport is Nascar. Explanation The PreviousMatch returns the fragment of text that matches the Previous bot utterance. PreviousMatch element helps in reducing the responses to single declarative sentence. Just like the Match element you can also use the Index=\"n\" attribute to get the text fragment matching the nth pattern."
  },
  "tutorial/siml/elements/process.html": {
    "href": "tutorial/siml/elements/process.html",
    "title": "Process - Syn Developer Network",
    "keywords": "Process Annotation <Process> Definition Process the value of its children elements. Children This element MUST contain at-least one SIML element that returns a textual value. Occurrence One or more of element MAY occur as children of <Response> element. By default if the Process tags weren’t used in the example above then the Match element would get included as part of the Model to be added to the Bot’s Graph. This would produce an entirely different result than expected. Thus in the example above the Process tag is used to force the Bot to evaluate the Match tag and thereby making the pattern What is an apple? ."
  },
  "tutorial/siml/elements/raise.html": {
    "href": "tutorial/siml/elements/raise.html",
    "title": "Raise - Syn Developer Network",
    "keywords": "Raise Annotation <Raise> Definition Triggers an existing SIML Event . Children This element MUST contain an arbitrary text that denotes the name of the SIML Event to trigger. Occurrence One or more <Raise> elements MAY occur as children of <Response> element. The Raise element triggers the specified Event using its arbitrary text value an returns and empty string. The triggered Event may however return a value as an event response to the bot user. This tag has been specifically designed for handling responses in multi-threaded environments. In Syn.Bot Framework, the ResponseReceived event of BotUser class is used to handle event responses. Example SIML <Model> <Pattern>CLOSE GARAGE DOOR</Pattern> <Response> <Raise>Garage-Door-Closed</Raise> </Response> </Model> <Event> <Pattern>GARAGE-DOOR-CLOSED</Pattern> <Response> Garage door closed. <x:Garage Task=\"Close\" /> </Response> </Event> User Input Close garage door. Bot Output Garage door closed. <x:Garage Task=\"Close\"/> may be an SIML adapter that controls the garage door. Explanation After the user says close garage door the event Garage-Door-Closed is raised and an empty string is retured. The Garage-Door-Closed event may later generate the response Garage door closed for the user after the event has successfully completed its task."
  },
  "tutorial/siml/elements/random.html": {
    "href": "tutorial/siml/elements/random.html",
    "title": "Random - Syn Developer Network",
    "keywords": "Random Annotation <Random> Definition Returns one randomly selected item from a list of specified elements. Children This element MUST contain one or more <Item> elements if the Get attribute is not specified Attributes Optional: Get This attribute is used to retrieve a globally declared element. Occurrence One or more <Random> elements MAY occur as children of Response element. Randomness is important as it avoids users from guessing the Bot’s response for a particular entry and keeps the interaction alive and interesting. To add random answers for a pattern the Random element should be used with two or more Item element that hold a value. Example SIML <Model> <Pattern>Hi</Pattern> <Response> <Random> <Item>Hello there.</Item> <Item>Well, Hi there!</Item> <Item>Heya</Item> <Item>Hi User.</Item> </Random> </Response> </Model> User Input Hi Hi Bot Output Hello there. Well, Hi there! Explanation The Random element scans it children Item elements and randomly returns anyone of them. The above highlights pure randomness but SIML Bot offers casting of Random values to user input which in layman’s term means that the bot will choose the output most like the user’s input. Each <Item> element within a Random element can be assigned a Weight to control the probability of occurrence at run-time. The sum of these weights may or may not be equal to 1. Example <Model> <Pattern>HI</Pattern> <Response> <Random> <Item Weight=\"0.125\">Hello there.</Item> <Item Weight=\"0.125\">Hi there!</Item> <Item Weight=\"0.25\">Hey</Item> <Item Weight=\"0.5\">Hola!</Item> </Random> </Response> </Model> In the above SIML code every Item element has been assigned a unique probability. In this way a develop can control the occurrence of the Item at run-time. The above code ensures that most of the time the word Hola! will used as response whenever the user says hi . It’s not mandatory that to change the probability of occurrence of one item every other item has to be assigned a weight. If 1 or more items are assigned a weight then the rest of the existing items receive an equally distributed probability. The above SIML code can also be written as: <Model> <Pattern>HI</Pattern> <Response> <Random> <Item>Hello there.</Item> <Item>Hi there!</Item> <Item Weight=\"0.25\">Hey</Item> <Item Weight=\"0.5\">Hola!</Item> </Random> </Response> </Model> In the above the 2 Item elements <Item>Hello there.</Item> and <Item>Hi there!</Item> will automatically receive a probability of 0.125. Chaining The Chain syntax allows developers to chain random response using a single text value. Words or sentence can be separated using a vertical bar as shown below. The entire text MUST be enclosed within a single <Random> tag instead of multiple <Item> tags. Example <Model> <Pattern>HOW DO YOU FEEL</Pattern> <Response> <Random>I feel great|I feel awesome!|I feel metallic</Random> </Response> </Model> Example <Model> <Pattern>HOW DO YOU FEEL</Pattern> <Response> <Random>I feel (great|awesome!|metallic)</Random> </Response> </Model> The output of both the examples above will be similar. Example SIML <Model> <Pattern>HOW DO YOU FEEL</Pattern> <Response> <Random>I feel (great|awesome!|metallic)</Random> </Response> </Model> User Input How do you feel? How do you feel? Bot Output I feel great I feel awesome! Explanation Chained syntax within the Random tag automatically parses separate words and sentences and generates a single random text value."
  },
  "tutorial/siml/elements/while.html": {
    "href": "tutorial/siml/elements/while.html",
    "title": "While - Syn Developer Network",
    "keywords": "While Annotation <While> Definition Allows repeated evaluation of children elements while the specified condition returns True. Children content Attributes Required: Bot , User or Var attribute Attributes Optional: Variable Operator Symbols that specify which operation to perform. Occurrence One or more <While> elements MAY occur as children of <Response> element. The While element loops through a block of SIML code as long as a condition returns True . This element is a fail-proof recursion element as the developer can protect the Bot from entering infinite loops by setting the Bot variable while-limit for the Bot. Though we encourage usage of JavaScript for complex looping the following code should give you an idea as to how the While element works. Example SIML <Model> <Pattern>COUNT TO *</Pattern> <Response> <Var Set=\"count\">0</Var> <Bind Key=\"{0}\"><Match /></Bind> <While Var=\"count\" Not=\"{0}\" xml:space=\"preserve\"> <Var Set=\"count\"><Math Get=\"increment\"><Var Get=\"count\" /></Math></Var></While> </Response> </Model> User Input Count to 5 Bot Output 0 1 2 3 4 5 Explanation The SIML code in the While element runs, over and over again, as long as the variable count is not equal to 5."
  },
  "tutorial/siml/elements/word.html": {
    "href": "tutorial/siml/elements/word.html",
    "title": "Word - Syn Developer Network",
    "keywords": "Word As children of <Splitter> and <Filter> Annotation <Word> Definition Represents the internal arbitrary text value as a word in human-language. Attributes Required: MUST contain an arbitrary text value Occurrence One or more <Word> elements MAY occur as children of <Splitter> or <Filter> elements."
  },
  "tutorial/speech/empty.html": {
    "href": "tutorial/speech/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/speech/index.html": {
    "href": "tutorial/speech/index.html",
    "title": "Syn Speech - Speech Recognition Library - Syn Developer Network",
    "keywords": "Syn Speech - Speech Recognition Library Syn Speech is a flexible speaker independent continuous speech recognition engine for Mono and .Net framework. Using Syn Speech developers can easily add offline speech recognition to their projects without any advanced configuration or changes. Syn Speech even supports JSGF grammar files for faster choice based speech recognition and encapsulates many of the state-of-the art speech recognition features from CMU Sphinx which was created via a joint collaboration between the Sphinx group at Carnegie Mellon University, Sun Microsystems Laboratories, Mitsubishi Electric Research Labs (MERL), and Hewlett Packard (HP), with contributions from the University of California at Santa Cruz (UCSC) and the Massachusetts Institute of Technology (MIT). All CMU Sphinx Models can directly be loaded into Syn Speech without any modification. These include (but are not limited to) Acoustic Models, Language Models and Phonetic Dictionaries published by Carnegie Melllon University. NuGet PM> Install-Package Syn.Speech Simple Architecture Platform Independent Because Syn Speech doesn't rely on any external library the same library can run on a variety of platforms (including Mac, Linux and Windows) without requiring any special changes using Mono and .Net framework respectively. Syn Speech is one of the first flexible speech recognition engine that worked under Mono. Demo Application and Tutorial In our github repository we've added a working Demo Application that demostrates continuous and grammar based speech recognition using Syn Speech. To download the demo application please visit Syn Github Repository . .Wav Audio Files Syn Speech library can load and transcribe Speech to Text using .Wav Audio files. It is recommend that you use Wav files with 16Khz Sample Rate for better results. JSGF Grammar Support Syn Speech also enables usage of JSpeech Grammar Format files for faster and choice-based speech recognition. Simple enable the use grammar option and specifiy the file and the name of the Grammar to use. The grammar parser will parse the grammar file in seconds and you are done with the grammar part. Syn Speech also partially supports Speech Recognition Grammar Specification (SRGS) for single-word based speech recognition. More information on JSpeech Grammar Format can be found here Speech Data As training and preparing Models for speech recognition is a heavy and time consuming task. Syn Speech uses CMU Sphinx's Acoustic Models, Language Models and Phonetic Dictionary to free you from the burden of creating them on your own. All these Models are freely available in their CMU Sphinx Repository and can be loaded into Syn Speech with ease. Free for FOSS Projects Syn Speech is FREE for FOSS (Free and Open Source Software) Projects. Which means if you are working on a free and open source project (non-commercial and/or academic) you can use Syn Speech in your project without any restrictions. <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-desktop.md\" --> Platforms Supported Requirements .NET Framework on Windows environment. Mono on Mac OS or Linux environment. <!--END INCLUDE -->"
  },
  "tutorial/speech/jsgf-grammar.html": {
    "href": "tutorial/speech/jsgf-grammar.html",
    "title": "Creating a JSGF Grammar File - Syn Developer Network",
    "keywords": "Creating a JSGF Grammar File Syn Speech has a good support for JSGF files (unlike SRGS which is partially supported). The JSGF file parser is extremely sensitive to file encoding and characters. Any illegal character in the file may render the entire grammar useless. To create a JSGF Grammar file a developer should first create a file with the name of the Grammar he intends to use. For example if your Grammar file contains sentences like “hi there” , “whats up” and “how are you” . You may name your grammar file hello.gram where hello is the name of the grammar and .gram is the extension of the grammar file. It is highly recommended that you use lower-case naming convention when it comes to grammar files and names. This prevents any File not found exception from occurring in different platforms where file names may be case-sensitive (Linux). The following demonstrates a grammar file that helps the speech recognizer recognize the aforementioned sentences ( hi there, whats up, how are you ). #JSGF V1.0; grammar hello; public <command> = ( hi there | whats up | how are you ); Grammar Header The first line is the grammar header and specifies the version of JSGF. The grammar header should always begin with #JSGF followed by the version. Grammar Name The second line declares the name of the grammar i.e. hello . The format is grammar grammar-name; . Every grammar file should declare a grammar name. So for example if you wish to name your grammar helloSpeech . You’ll do so by typing grammar helloSpeech; Grammar Body The last line is the Grammar body where a grammar rule is defined. In the above example we’ve created a simple grammar for 3 sentences. Each sentence separated by a vertical bar and a space character. All the sentences are then encapsulated within round brackets. Grammar body declaration format: public = ruleExpansion; An example would be public = hello; where name of the rule and hello is the expansion. It is important to note that a single JSGF Grammar file must contain just 1 Grammar. This is one of the limitations of JSGF. Individual tokens in a grammar can be separated using vertical bars ( | ) Example public = hello | hey; . So now if the user says either hello or hi. The speech will be recognized immediately. You can even glue words or sentences using parenthesis. Example public = hey ( machine | computer ); which will match inputs like hey machine and hey computer. JSGF also has optional grouping via square brackets. For example if you want a word or sentence to be optional you can group it within a square bracket. Example public = [ Hello ] World; This will match the inputs hello world or world. Comments To add single line comment in your grammar file use double forward-slahes. Example // Single lined comment If you want to add multiple lines comment enclose the comment within /* */ . If you intend to use grammar heavily with Syn Speech we recommend you going through W3C’s JSGF specification"
  },
  "tutorial/speech/recognition-with-grammar.html": {
    "href": "tutorial/speech/recognition-with-grammar.html",
    "title": "Recognition with Grammar - Syn Developer Network",
    "keywords": "Recognition with Grammar Grammar based speech recognition is fast because the speech recognition process is within a limited domain of keywords that are already known to the Engine. Syn Speech supports JSGF ( JSpeech Grammar Format ) files which are pretty easy to write and have a very simple and precise syntax. Browse within the Models directory and you’ll find the Hello.gram file. This file contains all the keywords/sentences declared within it. #JSGF V1.0; grammar Hello; public <command> = ( the time is now exactly twenty five to one | this three left on the left side the one closest to us ); Tip For more information regarding JSGF and its syntax visit the W3C JSGF Page Now to force the StreamSpeechRecognizer to use the Grammar file we’ll have to specify 3 important properties in the Configuration class. _configuration = new Configuration { AcousticModelPath = modelsDirectory, DictionaryPath = Path.Combine(modelsDirectory, \"cmudict-en-us.dict\"), LanguageModelPath = Path.Combine(modelsDirectory, \"en-us.lm.dmp\"), UseGrammar = true, GrammarPath = modelsDirectory, GrammarName = \"Hello\" }; Firstly the UseGrammar property has to be set to true , secondly the GrammarPath should point towards the directory (not the file) where the grammar file is located and lastly the name of the Grammar to use. Though in Windows environment the grammar name maybe case-insensitive in Linux the grammar file and its name are usually case-sensitive. Once you’ve specified the Grammar options just run the Console application and the Audio file Test.wav will be transcribed in milliseconds Overall Code using System; using System.IO; using Syn.Logging; using Syn.Speech.Api; namespace Syn.Speech.Demo { class Program { private static Configuration _configuration; private static StreamSpeechRecognizer _speechRecognizer; static void Main(string[] args) { Logger.LogReceived += Logger_LogReceived; var modelsDirectory = Path.Combine(Directory.GetCurrentDirectory(), \"Models\"); _configuration = new Configuration { AcousticModelPath = modelsDirectory, DictionaryPath = Path.Combine(modelsDirectory, \"cmudict-en-us.dict\"), LanguageModelPath = Path.Combine(modelsDirectory, \"en-us.lm.dmp\"), UseGrammar = true, GrammarPath = modelsDirectory, GrammarName = \"Hello\" }; _speechRecognizer = new StreamSpeechRecognizer(_configuration); _speechRecognizer.StartRecognition(new FileStream(\"test.wav\", FileMode.Open)); var result = _speechRecognizer.GetResult(); _speechRecognizer.StopRecognition(); if (result != null) { Console.WriteLine(\"Speech Recognized: \" + result.GetHypothesis()); } Console.ReadLine(); } static void Logger_LogReceived(object sender, LogReceivedEventArgs e) { Console.WriteLine(e.Message); } } }"
  },
  "tutorial/speech/recognition-without-grammar.html": {
    "href": "tutorial/speech/recognition-without-grammar.html",
    "title": "Speech Recognition without Grammar - Syn Developer Network",
    "keywords": "Speech Recognition without Grammar Launch Visual Studio, select FILE – > New – > Project – > Console Application and name your project Syn.Speech.Demo and click OK. Now that you’ve created your project you will have to import the Syn.Speech library. Importing Syn.Speech Library To use Syn Speech in your project you should first download the Syn Speech library from NuGet.org. To do so in Visual Studio click on Tools – > NuGet Package Manager – > Package Manager Console and type the following and press Enter. PM> Install-Package Syn.Speech Getting the Model files Once you have imported the Syn Speech library into you project you will need the Acoustic Models for Syn Speech library which is included in the Demo Application. To download the demo application visit https://github.com/synhub In the Bin directory of the Demo application there is the Models folder which includes everything from Acoustic & Language Models, Phonetic Dictionary and optionally a Grammar file named hello.gram . Copy this folder to your project’s root directory it is usually the Debug/Release directory. Getting the Audio File to Transcribe In the Audio folder of the demo application there’s the Test.wav file. Place this Audio file within the Debug/Release directory of your Console application. Coding You current application C# console application should look something like the following. namespace Syn.Speech.Demo { class Program { static void Main(string[] args) { } } } Add the using Syn.Speech.Api statement and declare 2 private static variables as follows. using Syn.Speech.Api; private static Configuration _configuration; private static StreamSpeechRecognizer _speechRecognizer; The Configuration class is used to specify some simple yet crucial settings for the speech Recognizer. Add the following C# code within your static void Main(string[] args) method. var modelsDirectory = Path.Combine(Directory.GetCurrentDirectory(), \"Models\"); _configuration = new Configuration { AcousticModelPath = modelsDirectory, DictionaryPath = Path.Combine(modelsDirectory, \"cmudict-en-us.dict\"), LanguageModelPath = Path.Combine(modelsDirectory, \"en-us.lm.dmp\"), }; In the above we create a single variable called modelsDirectory and make sure that this variable points to the Models (previously copied) folder in the root directory of our application. Later the AcousticModelPath is set to point to the Models directory because many of the required Acoustics files are present within this directory and will automatically be fetched at run-time. Next the DictionaryPath property, this should point to the dictionary file (not folder) and finally the LanguageModelPath property is set to point to the Language Model file. As both the files are placed within the Models directory we’ve used Path.Combine method. Transcribing the Audio File Once the configuration is complete we’ll instantiate a StreamSpeechRecognizer class which will use the settings we specified in the Configuration class. Speech recognition in Syn Speech, whether we use Grammar or not, almost always relies on the StreamSpeechRecognizer class. To start transcribing the Audio file we’ll then use the same StreamSpeechRecognizer class and submit the file as a FileStream. To do so paste the following code within the Main method. _speechRecognizer = new StreamSpeechRecognizer(_configuration); _speechRecognizer.StartRecognition(new FileStream(\"test.wav\", FileMode.Open)); Starting the Speech recognition is just half the part. The real computation begins after you call the GetResult() method on the StreamSpeechRecognizer class. If no result is generated a null value is returned otherwise it returns a SpeechResult class that contains a possible set of hypothesis. In the following code we call the GetResult() and then call StopRecognition() . Then we check if the result variable is null or not if not then we print the Hypothesis in the Console using the GetHypothesis() method. var result = _speechRecognizer.GetResult(); _speechRecognizer.StopRecognition(); if (result != null) { Console.WriteLine(\"Speech Recognized: \" + result.GetHypothesis()); } Console.ReadLine(); Get the internal Log information It is always convenient to have some log information displayed while the speech recognition process is being carried out. To catch all the logs generated by the Engine we’ll add a handler to the Logger class’s LogReceived event. The following line should be added at the very beginning of the static Main function. Logger.LogReceived += Logger_LogReceived; Once you’ve added the above line create a new function with the right signature to print all the log information onto the Console. static void Logger_LogReceived(object sender, LogReceivedEventArgs e) { Console.WriteLine(e.Message); } The overall Code using System; using System.IO; using Syn.Logging; using Syn.Speech.Api; namespace Syn.Speech.Demo { class Program { private static Configuration _configuration; private static StreamSpeechRecognizer _speechRecognizer; static void Main(string[] args) { Logger.LogReceived += Logger_LogReceived; var modelsDirectory = Path.Combine(Directory.GetCurrentDirectory(), \"Models\"); _configuration = new Configuration { AcousticModelPath = modelsDirectory, DictionaryPath = Path.Combine(modelsDirectory, \"cmudict-en-us.dict\"), LanguageModelPath = Path.Combine(modelsDirectory, \"en-us.lm.dmp\"), }; _speechRecognizer = new StreamSpeechRecognizer(_configuration); _speechRecognizer.StartRecognition(new FileStream(\"test.wav\", FileMode.Open)); var result = _speechRecognizer.GetResult(); _speechRecognizer.StopRecognition(); if (result != null) { Console.WriteLine(\"Speech Recognized: \" + result.GetHypothesis()); } Console.ReadLine(); } static void Logger_LogReceived(object sender, LogReceivedEventArgs e) { Console.WriteLine(e.Message); } } }"
  },
  "tutorial/templates/community-project.html": {
    "href": "tutorial/templates/community-project.html",
    "title": "Syn Community Project - Syn Developer Network",
    "keywords": "Syn Community Project This project/framework comes under Syn Community Project and was developed by Synthetic Intelligence Network to either enchance other existing framework(s) or solely to help our community members develop better derivative products. Note Synthetic Intelligence Network may not provide priority support for Community Projects . All our Community Projects are licensed under MIT License. MIT License Copyright (c) 2017 Synthetic Intelligence Network Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "tutorial/templates/console-application.html": {
    "href": "tutorial/templates/console-application.html",
    "title": "Creating a Console Application - Syn Developer Network",
    "keywords": "Creating a Console Application To create a Console application in Visual Studio following the steps given below. Start Visual Studio 2015 or above On the File menu, select New and then choose Project.. . In the New Project dialog select Console Application ."
  },
  "tutorial/templates/platform-desktop.html": {
    "href": "tutorial/templates/platform-desktop.html",
    "title": "Platforms Supported - Syn Developer Network",
    "keywords": "Platforms Supported Requirements .NET Framework on Windows environment. Mono on Mac OS or Linux environment."
  },
  "tutorial/templates/platform-portable.html": {
    "href": "tutorial/templates/platform-portable.html",
    "title": "Platforms Supported - Syn Developer Network",
    "keywords": "Platforms Supported"
  },
  "tutorial/templates/platform-windows.html": {
    "href": "tutorial/templates/platform-windows.html",
    "title": "Platforms Supported - Syn Developer Network",
    "keywords": "Platforms Supported Windows 7, Windows 8, Windows 8.1 and Windows 10"
  },
  "tutorial/templates/telegram-bot.html": {
    "href": "tutorial/templates/telegram-bot.html",
    "title": "Creating a Telegram Bot - Syn Developer Network",
    "keywords": "Creating a Telegram Bot To obtain a Telegram Bot Access Token Download Telegram to your Desktop or Mobile from Telegram Search for BotFather and then click on Start . Type /newbot Enter a display name for your bot. In our example we've used Maya After you've specified the bot name, enter a unique Bot name. You can use _ as separators. For this tutorial we've used the name My_VA_Bot as the Bot name. After that you'll be presented with the HTTP Access Token. Copy the HTTP API access token as shown below. You have now successfully created a Telegram Bot and acquired its Access Token ."
  },
  "tutorial/va/avatar-system.html": {
    "href": "tutorial/va/avatar-system.html",
    "title": "Avatar System - Syn Developer Network",
    "keywords": "Avatar System It took a major portion of development time to create a new Graphic Engine from scratch for Syn Virtual Assistant Prototype 8.5 . The goal was to have better lighting and support for true morph targets . Though these features have now been implemented in-turn the Graphic Requirements has increased and support for 2D Avatar has been retired. Virtual File System All avatars are saved within the Content.zip file and use the .xnb file format supported by the MonoGame 3D engine. However, the 3D Avatar configuration files are placed outside the zip files under the directory Syn/Avatars . Avatar Configuration File 3D Avatar configuration files are used by the Graphic Engine to initialize important variables and set properties. A typical configuration file looks like the following. <Avatar Name=\"Madonna\" Gender=\"Female\"> <CameraPosition Value=\"0, 0.5, 4.5\" /> <CanBlink Value=\"True\"/> <CanRotate Value=\"True\"/> <Model> <Item>Avatar_Base</Item> <Item>Hair</Item> <Item>Eye</Item> </Model> <Expression ID=\"0\" Morph=\"Idle\" /> <Expression ID=\"1\" Morph=\"AEI\" /> <Expression ID=\"2\" Morph=\"AEI\" /> <Expression ID=\"3\" Morph=\"O\" /> <Expression ID=\"4\" Morph=\"AEI\" /> <Expression ID=\"5\" Morph=\"AEI\" /> <Expression ID=\"6\" Morph=\"FV\" /> .... </Avatar> Avatar The root Avatar element has 2 attributes, Name and Gender . The value of the Name attribute can be any desired name for the 3D avatar. This name will be displayed under the drop-down list of the Avatar settings panel. The Gender attribute can have the values Male , Female , Neutral or NotSet . This value is also used by the Speech Synthesis engine to determine and select the Gender of the Speech Synthesizer if the VoiceName specified is unavailable. CameraPosition The default camera placed in the 3D environment always faces the 3D Avatar placed within this 3D environment. The position attributes X , Y and Z can be set using comma separted values. CanBlink This element determines if the 3D Avatar can blink. The Blink morph sequence is triggered randomly by the Avatar Engine. Possible values are True and False . CanRotate This element determines if the default camera placed in the 3D environment should make rotations around the 3D Avatar. This has been a traditional animation for the camera used since Prototype 6.0 to give a hint to the user if the 3D Virtual Assistant's Window is responsive. Expression The Expression element has 2 attributes, ID and Morph . The ID part is usually the viseme ID used the Speech Synthesis engine and the Morph value determines what morph target is to be used when the specified viseme ID is reached by the Speech Synthesis engine. The reached viseme ID is mapped to one-or-many Phonemes. By default there are 21 viseme IDs. 0 = silence 1 = ae, ax , ah 2 = aa 3 = ao 4 = ey, eh , uh 5 = er 6 = y, iy, ih, ix 7 = w, uw 8 = ow 9 = aw 10 = oy 11 = ay 12 = h 13 = r 14 = l 15 = s, z 16 = sh, ch, jh, zh 17 = th, dh 18 = f, v 19 = d, t, n 20 = k, g, ng 21 = p, b, m"
  },
  "tutorial/va/custom-plugin.html": {
    "href": "tutorial/va/custom-plugin.html",
    "title": "Creating a custom VA Plugin - Syn Developer Network",
    "keywords": "Creating a custom VA Plugin Creation of a Plugin for VA Framework gets a lot easier due to the availability of in-built classes and utilities. For the creation of a VA Plugin, we'll assume that you are using Visual Studio Community 2015 and have good knowledge of C# coding. Requirements You'll need to ensure that the following requirements are met in their entirety before you start developing your custom VA Plugin. Syn Virtual Assistant 8.5 or above. Syn Bot Studio Visual Studio Community 2015 or above. Custom Plugin Creating a Class Library project All VA Plugins are Class Libraries that are loaded by the Loader plugin during VA initialization. To create a Class Library project, start Visual Studio On the menu bar choose File , New , Project . Expand Installed , expand Templates , expand Visual C# and then choose Class Library . In the Name box, type Syn.VA.Plugins.HelloPlugin and choose OK . Referencing the VA Libraries Once the project is created, you'll need to reference a few class libraries. You can find these libraries in Syn\\Dependencies folder in the installation directory of Syn Virtual Assistant or you can visit the online Syn-VA-Components repository and download the References folder. After the you have downloaded the References folder, switch to Visual Studio , In Solution Explorer , right-click on the References node and choose Add Reference . Click on Browse , browse to the References folder, select Syn.VA.dll , Syn.Bot.dll and Syn.Log.dll . Click on Add and then hoose OK . You now have all the libraries referenced to create your first plugin. HelloPlugin class To create a class that is loaded as a Plugin type it is important to derive the class from either the Plugin class or implement the IPlugin interface. Rename Class1 to HelloPlugin . Inherit from Plugin namespace Syn.VA.Plugins.HelloPlugin { public class HelloPlugin : Plugin { } } Only public classes that inherit the Plugin class from Syn.VA library are loaded by the Loader plugin. Creating an SIML Adapter To know what an SIML Adapter is please refer Creating a custom Adapter in Syn Bot tutorials section. Right click the project name in Solution Explorer , point to Add and then click New Folder . Rename the New Folder to Adapter . Right clicck the folder, point to Add and then choose Class . Name the class HelloAdapter . Once the HelloAdapter class has been created we'll need to implement the IAdapter interface present in the Syn.Bot library. class HelloAdapter : IAdapter { } Next we'll implement the Properties and Methods of the IAdapter interface as shown below. class HelloAdapter : IAdapter { public XName TagName => SimlSpecification.Namespace.X + \"Hello\"; public bool IsRecursive => true; public string Evaluate(Context context) { return \"Hello Plugin says Hello!\"; } } In the above code the TagName is the SIML tag that will later be used in an SIML Knowledge base. The above adapter just returns the string \"Hello Plugin says Hello\" . Now that the adapter is ready switch to HelloPlugin class and add the following code in the class constructor. SimlBot.Instance.Adapters.Add(new HelloAdapter()); The overall code for the HelloPlugin class should look like the following. using Syn.Bot.Siml; using Syn.VA.Plugins.HelloPlugin.Adapter; namespace Syn.VA.Plugins.HelloPlugin { public class HelloPlugin : Plugin { public HelloPlugin() { SimlBot.Instance.Adapters.Add(new HelloAdapter()); } } } The SimlBot.Instance is the main SimlBot instance that is used by all plugins. Placing the Plugin In Solution Explorer , right click the project name and Properties . Under Build option, scroll down to Output Path and choose Browse . Browse to Syn/Plugins folder found in the root directory of Syn Virtual Assistant installation and then choose Select Folder . On the menu bar, choose Build and then choose Build Solution . Add command to Knowledge-Base For the purpose of testing the newly created we'll need to a add atleast one command in the Bot's knowledge-base to trigger the evaluation of the HelloAdapter . Open Syn Bot Studio, choose Open and choose Project . Browse to Syn/Bot directory under the directory where Syn Virtual Assistant is installed. Select Commands.simlproj and choose Open . On the right File Explorer , right click and choose Add New File . Enter HelloPlugin as the file name and choose OK . Under the newly created SIML _Concept add the following SIML Model and also add xmlns:x=\"http://syn.co.in/2014/siml#external\" to the root Siml element. <Model> <Pattern>Hello Plugin</Pattern> <Response> <x:Hello /> </Response> </Model> The over SIML code should look like the following. <Siml xmlns:x=\"http://syn.co.in/2014/siml#external\"> <Concept Name=\"HelloPlugin\"> <Model> <Pattern>Hello Plugin</Pattern> <Response> <x:Hello /> </Response> </Model> </Concept> </Siml> Press Ctrl+S to save the code to file and close Bot Studio . Testing the custom HelloPlugin Launch Syn Virtual Assistant and in the Input Box type \"Hello Plugin\" . The VA should respond \"Hello Plugin says Hello!\" . You have now successfully created your first plugin for Syn Virtual Assistant. Plugin Settings File The Loader plugin during Virtual Assistant initialization checks if a plugin class has an embedded XML file as resource with a name that matches the Name property of the plugin itself. Creating an Embedded XML File In Solution Explorer , right click the project name, point to Add and click New Item . Scroll down and select XML File . Name the file HelloPluginSettings.xml and choose Add . In Solution Explorer , right click HelloPluginSettings.xml and choose Properties . In File Properties , under Build Action select Embedded Resource In Solution Explorer , double-click HelloPluginSettings.xml to edit the new XML file. Replace the default xml template with the following code. <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Settings> <Item Name=\"SomeName\" Value=\"SomeValue\" /> </Settings> On the menu bar, choose Build and then choose Build Solution . Launch Syn Virtual Assistant and browse to the Plugins folder in Syn Virtual Assistant installation directory. You'll see the new settings file present. The Loader during plugin scan checks if a plugin's settings file is present in the Syn/Settings directory. If the file is not present the Loader automatically copies the Embedded Resource file to the Settings directory. Setting File name In the above project the actual settings file name in the Solution Explorer was HelloPluginSettings.xml . However, the file copied to the Settings directory by the Loader is named HelloPlugin.xml . This is because the Loader only considers the Plugin.Name property to create the settings file. If the Name property of a Plugin class is overriden, the new value is used to create the Settings File . For Example public override string Name => \"Hello\"; Then the new settings file name created by the Loader in the Settings directory would be Hello.xml ."
  },
  "tutorial/va/directory-structure.html": {
    "href": "tutorial/va/directory-structure.html",
    "title": "Directory Structure - Syn Developer Network",
    "keywords": "Directory Structure The root directory of Syn Virtual Assistant is the working directory of the entire application. However, all important components that make the Virtual Assistant work are placed under the Syn directory. List of known directories Directory Description Syn/Avatars Stores all Avatar mesh and configuration files. Syn/Dependencies Directory where all application and plugin dependencies are placed. Unmanaged dependencies must be placed in the root directory. Syn/Plugins Plugins implementing the IPlugin interface are placed here. Syn/Setttings Stores all Plugin related settings in XML files. Syn/Bot A place to store Bot knowledge-base. Syn/Resources External resource files are placed here. Syn/Resources/Help User manual in Markdown formats are placed here. Syn/Resources/Background Stores all 3D Avatar Background Images Syn/Resources/Tools Directory to store external executable tools"
  },
  "tutorial/va/plugins/tictactoe.html": {
    "href": "tutorial/va/plugins/tictactoe.html",
    "title": "TicTacToe Plugin - Syn Developer Network",
    "keywords": "TicTacToe Plugin Plugin that lets you play the Tic Tac Toe game using voice commands. SIML Adapters TicTacToe Annotation <o:TicTacToe> Definition Helps in interacttion with a Tic Tac Toe game window. Children Must contain a Task attribute. The value of which should specify that task to perform. Accepted values for the Task attribute are Start , Stop and Mark . Usage <o:TicTacToe Task=\"Start\"/> Starts a Tic Tac Toe game. <o:TicTacToe Task=\"Stop\"/> Stops the currently active Tic Tac Toe game. <o:TicTacToe Task=\"Mark\">2</o:TicTacToe> Marks block number 2 Settings Name Description First-Player Determines if the computer or human should start the game. Accepted values for this variable are Computer and Human . Game-Difficulty The difficulty of the game. Accepted values for this variable are Easy and Hard ."
  },
  "tutorial/va/plugins/translator.html": {
    "href": "tutorial/va/plugins/translator.html",
    "title": "Trasnlator Plugin - Syn Developer Network",
    "keywords": "Trasnlator Plugin This provides adapters that help in translation of a given text from selected user language to target language. SIML Adapters Translate Annotation <o:Translate> Definition Translate given text to target language. Children Must containt an arbitrary text specifying the text to translate and a Target attribute specifying that language to translate given text to. Usage <o:Translate Target=\"French\">How are you?</o:Translate> Translate How are you? to French and returns 'comment allez-vous' Settings Name Description Source-Language The default source language to assuming when translating a text to target language ."
  },
  "tutorial/va/plugins/weather.html": {
    "href": "tutorial/va/plugins/weather.html",
    "title": "Weather Plugin - Syn Developer Network",
    "keywords": "Weather Plugin SIML Adapters Weather Annotation <o:Weather> Definition Gets weather report using the location provided in HTML Children May contain an arbitrary text specifying the location Usage <o:Weather/> Usages the value of the variable Location in Weather Settings. <o:Weather>Bangalore India</o:Weather> Returns the weather condition in Bangalore India Events Name Description Weather-Query Raised after <o:Weather /> is evaluated. The variable Weather-Value contains the HTML content returned by the adapter. Weather-Query-No-Result Raised when <o:Weather /> is evaluated but no result is generated. An HtmlPanel must be used to render the HTML content returned by this Adapter. <Event> <Pattern>Weather-Query</Pattern> <Response> <o:HtmlPanel> <Var Get=\"Weather-Value\" /> </o:HtmlPanel> </Response> </Event> Settings Name Description Location The default location value set by the user."
  },
  "tutorial/va/plugins/wikipedia.html": {
    "href": "tutorial/va/plugins/wikipedia.html",
    "title": "Wikipedia Plugin - Syn Developer Network",
    "keywords": "Wikipedia Plugin SIML Adapters Wikipedia Annotation <o:Wikipedia> Definition Gets first extract from Wikipedia for the specified query . Children Must contain an arbitrary text specifying the search query. Usage <o:Wikipedia>hachiko</o:Wikipedia> Searches Wikipedia for hachiko Requirements An active Internet connection."
  },
  "tutorial/va/plugins/windows.html": {
    "href": "tutorial/va/plugins/windows.html",
    "title": "Windows Plugin - Syn Developer Network",
    "keywords": "Windows Plugin Provides adapters to interact with the Windows operating system features. SIML Adapters 1. Clipboard Annotation <o:Clipboard> Definition Gets or sets the user's clipboard text content. Children May contain a Get or Set attribute. If no Get or Set attribute is provided and the inner value is empty then the adapter returns the textual content present in the user's clipboard. If the inner value is not empty and no Get or Set attribute is specified then the adapter copies the inner value to user's clipboard. Attributes |Name|Value|Description| |:---|:---| |Get|Text|Returns the textual content present in the user's clipboard.| |Set|Text|Sets the textual content of the user's clipboard to the specified text.| Example <o:Clipboard/> Returns the Text content present in the user's clipboard. <o:Clipboard>This just rocks</o:Clipboard> Copies This just rocks to clipboard. 2. Machine Annotation <o:Machine> Definition Gets or sets the user's clipboard text content. Children Must contain a Task or Get attribute specifying the task to perform or the user information to retrieve respectively. Attributes Name Value Description Task Lock Locks the user desktop Task Restart Restarts the Windows operating system. Task Shutdown Shuts down the Windows operating system. Task Logoff Signs out of the user's desktop Task Clear-Trash Clears the user's recycle bin content. Task Screenshot Takes a screenshot of the User's desktop and saves it in the specified screenshot folder. Task Change-Wallpaper Changes the desktop wallpaper by searching for image files in the specified wallpaper folder. Get IP Gets the external IP address. Get User-Name Gets the user's account name. Get Os-Version Gets the Windows OS Version Get Processor-Count Gets the number of processors in the machine. Example <o:Machine Task=\"Lock\"/> Locks the user's desktop <o:Machine Task=\"Screenshot\"/> Takes a screenshot of the user's desktop. <o:Machine Get=\"User-Name\"/> Gets the user's account name. 3. Window Annotation <o:Window> Definition Handles open windows on user desktop. Children Must contain a Task attribute that specifies that task to perform on open windows. Attributes Name Value Description Task Minimize Minimizes the currently active window. Task Restore Restores the previously minimized window. Task Maximize Maxmizes the currently active window. Task Close Closes the currently active window. Task Tile Tiles the opened windows. Task Tile-Horizontal Tiles all opened windows horizontally. Task Tile-Vertical Vertically tiles all opened windows . Task Cascade Cascades all opened windows. Task Minimize-All Minimizes all the opened windows. Task Undo-Minimize-All Restores all the previously minimized windows. Settings Name Description Screenshot-Directory The directory where all the screenshots are saved. Wallpaper-Directory The directory where all the wallpapers are saved. Requirements Some adapter functions may require administrative rights to execute."
  },
  "tutorial/va/plugins/wolfram.html": {
    "href": "tutorial/va/plugins/wolfram.html",
    "title": "Wolfram Plugin - Syn Developer Network",
    "keywords": "Wolfram Plugin Provides an adapter to use the Wolfram Alpha API feature. SIML Adapters Alpha Annotation <o:Alpha> Definition Gets Html content returned from Wolfram Alpha API call for the specified query . Children Must contain an arbitrary text specifying the search query. Usage <o:Alpha>Jupiter</o:Alpha> Searches Wolfram Alpha for Jupiter Events Name Description Alpha-No-Key Raised when <o:Alpha> is evaluated with no API key. Alpha-Result Raised when <o:Alpha> is evaluated and a result is generated. The variable Alpha-Content will contain the returned HTML content. Alpha-No-Result Raised after <o:Alpha> is evaluated but no result is generated. The variable Alpha-Query will contain the search query. Settings Name Description Api-Key Wolfram Alpha Developer API Key. Requirements An active Internet connection. Wolfram Alpha Developer API Key."
  },
  "tutorial/wordnet/empty.html": {
    "href": "tutorial/wordnet/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/wordnet/index.html": {
    "href": "tutorial/wordnet/index.html",
    "title": "WordNet - Syn Developer Network",
    "keywords": "WordNet WordNet is a lexical database developed by Princeton University where nouns, verbs, adjectives and adverbs are organized into synonym sets, each representing one underlying lexical concept. WordNet® is a registered trademark of Princeton University. Syn WordNet Syn.WordNet is a portable class library designed to read WordNet lexical database files via StreamReader. You can import Syn.WordNet in your .NET/Xamarin or Mono projects via NuGet Package Manager. Just type the following command to reference Syn.WordNet in your project. PM> Install-Package Syn.WordNet <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-portable.md\" --> Platforms Supported <!--END INCLUDE -->"
  },
  "tutorial/wordnet/tutorial.html": {
    "href": "tutorial/wordnet/tutorial.html",
    "title": "WordNet Tutorial - Syn Developer Network",
    "keywords": "WordNet Tutorial In this tutorial we will learn how to use the WordNetEngine available in Syn.WordNet library to import WordNet 's lexical database files and work with SynSets . <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/console-application.md\" --> Creating a Console Application To create a Console application in Visual Studio following the steps given below. Start Visual Studio 2015 or above On the File menu, select New and then choose Project.. . In the New Project dialog select Console Application . <!--END INCLUDE --> Name the project WordNetConsole and choose OK . Importing WordNet Especially for Oscova, we released Syn.WordNet and made it available in NuGet. To import Syn.WordNet to your project follow the steps below: In Visual Studio, click on Tools , point to NuGet Package Manager Select Package Manager Console Type Install-Package Syn.WordNet Syn.WordNet library is a standalone library and has no external dependencies. Loading Data Once Syn.WordNet library is successfully referenced in your project. You'll need to load WordNet database files for each part of speech . There are 4 main parts of speech for which we'll need to load data. Adjective Adverb Noun Verb Tip To download WordNet source files please visit the official WordNet download page Once download, extract all the files in the bin/debug/wordnet of your project. For Syn.WordNet we just need the following files. Data data.adj data.adv data.noun data.verb Index index.adj index.adv index.noun index.verb As Syn.WordNet is a portable class library the mechanism of loading WordNet files doesn't use traditional approach instead we use StreamReader to load the specific files into the WordNetEngine . Loading Data and Index files Within the static void Main(string[] args) method add the following code. The code assumes that you've already copied the aforementioned WordNet files in the bin/debug/wordnet folder. var directory = Directory.GetCurrentDirectory(); var wordNet = new WordNetEngine(); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.adj\")), PartOfSpeech.Adjective); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.adv\")), PartOfSpeech.Adverb); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.noun\")), PartOfSpeech.Noun); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.verb\")), PartOfSpeech.Verb); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.adj\")), PartOfSpeech.Adjective); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.adv\")), PartOfSpeech.Adverb); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.noun\")), PartOfSpeech.Noun); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.verb\")), PartOfSpeech.Verb); Console.WriteLine(\"Loading database...\"); wordNet.Load(); Console.WriteLine(\"Load completed.\"); And that's it you have now successfully instantiated WordNetEngine . Getting SynSets After the WordNetEngine.Load() method has finished generating SynSets you can retrieve synsets of known words in just a few lines of code. In the aforementioned code append the following lines of code. while (true) { Console.WriteLine(\"\\nType first word\"); var word = Console.ReadLine(); var synSetList = wordNet.GetSynSets(word); if (synSetList.Count == 0) Console.WriteLine($\"No SynSet found for '{word}'\"); foreach (var synSet in synSetList) { var words = string.Join(\", \", synSet.Words); Console.WriteLine($\"\\nWords: {words}\"); Console.WriteLine($\"POS: {synSet.PartOfSpeech}\"); Console.WriteLine($\"Gloss: {synSet.Gloss}\"); } } You may now run the application by clicking on the Start button or by pressing F5 in Visual Studio. After the Load completed message type Car . You will now be presented with all the SynSets of the word Car along with their definitions and parts of speech."
  },
  "enterprise-license-template.html": {
    "href": "enterprise-license-template.html",
    "title": "Enterprise License (Reference Template) - Syn Developer Network",
    "keywords": "Enterprise License (Reference Template) 1. Preamble This Agreement governs the relationship between \" COMPANY NAME \", a Business Entity, (hereinafter: Licensee) and Synthetic Intelligence Network , a brand of a duly registered company REVARN Cybernetics LLP whose principal place of business is No. 83, Warsi House, 5th block, Kormangala Industrial Layout Bangalore, Karnataka - 560095, India (hereinafter: Licensor). This Agreement sets the terms, rights, restrictions and obligations on using \" SELECTED FRAMEWORK \" (hereinafter: The Software) created and owned by Licensor, as detailed herein 2. License Grant Licensor hereby grants Licensee an Assignable, Pepetual, Commercial, Royalty free, Including the rights to distribute derivative works, Non-exclusive license, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software. (2.1) Limited: Licensee may use Software for the purpose of: (2.1.1) Running Software on Licensee’s Website[s] and Server[s]; (2.1.2) Allowing 3rd Parties to run Software on Licensee’s Website[s] and Server[s]; (2.1.3) Publishing Software’s output to Licensee and 3rd Parties; (2.1.4) Distribute verbatim copies of Software’s output (including compiled binaries); (2.2) This license is granted perpetually, as long as you do not materially breach it. (2.3) Binary Restricted: Licensee may sublicense Software as a part of a larger work containing more than Software, distributed solely in Object or Binary form under a personal, non-sublicensable, limited license. Such redistribution shall be limited to unlimited codebases. (2.4) Assignable: Licensee may assign his rights and duties under this license as long as the party who Licensee assigns the license accepts the license in full, and provides Licensor with a written confirmation of Assignmentcense. (2.5) Commercial, Royalty Free: Licensee may use Software for any purpose, including paid-services, without any royalties (2.6) Including the right to Distribute Derivative Works: Licensee may create and distribute derivative works based on Software, including integrating it into a larger work as long as the redistribution is made under the terms of this license. (2.7) With support & maintenance: Licensor shall provide Licensee support and maintenance as follows (2.7.1) Bug fixes and all minor version updates. (2.7.2) 90 days of email support. 3. Term & Termination The Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee : (3.1) became insolvent or otherwise entered into any liquidation process; or (3.2) exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or (3.3) Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or (3.4) Licensee in breach of any of the terms of clause 2 to this license; or (3.5) Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License. 4. Payment In consideration of the License granted under clause 2, Licensee shall pay Licensor a fee, via Credit-Card, PayPal or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement. 5. Upgrades, Updates and Fixes Licensor may provide Licensee, from time to time, with Upgrades, Updates or Fixes, as detailed herein and according to his sole discretion. Licensee hereby warrants to keep The Software up-to-date and install all relevant updates and fixes, and may, at his sole discretion, purchase upgrades, according to the rates set by Licensor. Licensor shall provide any update or Fix free of charge; however, nothing in this Agreement shall require Licensor to provide Updates or Fixes. (5.1) Upgrades: for the purpose of this license, an Upgrade shall be a material amendment in The Software, which contains new features and or major performance improvements and shall be marked as a new version number. For example, should Licensee purchase The Software under version 1.X.X, an upgrade shall commence under number 2.0.0. (5.2) Updates: for the purpose of this license, an update shall be a minor amendment in The Software, which may contain new features or minor improvements and shall be marked as a new sub-version number. For example, should Licensee purchase The Software under version 1.1.X, an upgrade shall commence under number 1.2.0. (5.3) Fix: for the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2. 6. Support Software is provided with limited support, as detailed in the Software’s SLA detailed under the License Grant. Licensor shall provide support via the issue tracker and / or electronic mail and on regular business days and hours. (6.1) Bug Notification: Licensee may provide Licensor of details regarding any bug, defect or failure in The Software promptly and with no delay from such event; Licensee shall comply with Licensor's request for information regarding bugs, defects or failures and furnish him with information, screenshots and try to reproduce such bugs, defects or failures. (6.2) Feature Request: Licensee may request additional features in Software, provided, however, that (i) Licensee shall waive any claim or right in such feature should feature be developed by Licensor; (ii) Licensee shall be prohibited from developing the feature, or disclose such feature request, or feature, to any 3rd party directly competing with Licensor or any 3rd party which may be, following the development of such feature, in direct competition with Licensor; (iii) Licensee warrants that feature does not infringe any 3rd party patent, trademark, trade-secret or any other intellectual property right; and (iv) Licensee developed, envisioned or created the feature solely by himself. 7. Liability To the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licensee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software and Licensee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services. Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code. 8. Warranty (8.1) Intellectual Property: Licensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights. (8.2) No-Warranty: The Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server[s] and Website[s]. (8.3) Prior Inspection: Licensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software. 9. No Refunds Licensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws. 10. Indemnification Licensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim. 11. Governing Law, Jurisdiction Licensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome - Syn Developer Network",
    "keywords": ""
  },
  "privacy-policy.html": {
    "href": "privacy-policy.html",
    "title": "Privacy Policy - Syn Developer Network",
    "keywords": "Privacy Policy Your privacy is important to us. Synthetic Intelligence Network has a No Usage Data Collection Policy. This privacy policy governs your use of our website, mobile apps and desktop applications (“Application”) that was created by Synthetic Intelligence Network. We do not collect any usage statistics on any of our Application. However under our Software Improvement Program the Application may collect non-personal information to improve user experience. The following versions of our product are part of Software Improvement Program (SIP) . Developer Preview Beta Version Release Candidate Prototype It is Synthetic Intelligence Network's policy to respect your privacy regarding any information we may collect while operating our website. Accordingly, we have developed this privacy policy in order for you to understand how we collect, use, communicate, disclose and otherwise make use of personal information. We have outlined our privacy policy below. We will collect personal information by lawful and fair means and, where appropriate, with the knowledge or consent of the individual concerned. Before or at the time of collecting personal information, we will identify the purposes for which information is being collected. We will collect and use personal information solely for fulfilling those purposes specified by us and for other ancillary purposes, unless we obtain the consent of the individual concerned or as required by law. Personal data should be relevant to the purposes for which it is to be used, and, to the extent necessary for those purposes, should be accurate, complete, and up-to-date. We will protect personal information by using reasonable security safeguards against loss or theft, as well as unauthorized access, disclosure, copying, use or modification. We will make readily available to customers information about our policies and practices relating to the management of personal information. We will only retain personal information for as long as necessary for the fulfilment of those purposes. We are committed to conducting our business in accordance with these principles in order to ensure that the confidentiality of personal information is protected and maintained. Information Collected User Provided Information The Application obtains the information you provide when you download and register the Application. Registration with us is optional. However, please keep in mind that you may not be able to use some of the features offered by the Application unless you register with us. When you register with us and use the Application, you generally provide (a) your name, email address, age, user name and other registration information; (b) transaction-related information, such as when you make purchases, respond to any offers, or download or use applications from us; (c) information you provide us when you contact us for help and; (d) information you enter into our system when using the Application, such as contact information and project management information. We may also use the information you provided us to contact your from time to time to provide you with important information, required notices and marketing promotions. Automatically Collected Information In addition, the Application may collect certain information automatically, including, but not limited to, the type of device you use, the IP address of your device, the operating system, the type of internet browsers or apps you use, and information about the way you use the Application. Opt-out Rights You can stop all collection of information by the Application easily by uninstalling the Application. You may use the standard uninstall processes as may be available as part of your mobile or desktop device. You can also request to opt-out via email at privacy@syn.co.in. Security We are concerned about safeguarding the confidentiality of your information. We provide physical, electronic, and procedural safeguards to protect information we process and maintain. For example, we limit access to this information to authorized employees and contractors who need to know that information in order to operate, develop or improve our Application. Please be aware that, although we endeavor provide reasonable security for information we process and maintain, no security system can prevent all potential security breaches. Data Retention Policy We will retain User Provided data for as long as you use the Application and for a reasonable time thereafter. We will retain Automatically Collected information for up to 24 months and thereafter may store it in aggregate. If you’d like us to delete User Provided Data that you have provided via the Application, please contact us at privacy@syn.co.in and we will respond in a reasonable time. Please note that some or all of the User Provided Data may be required in order for the Application to function properly. Third-Parties Only aggregated, anonymized data may be periodically transmitted to external services to help us improve the Application and our service. We will share your information with third parties only in the ways that are described in this privacy statement. We may disclose User Provided and Automatically Collected Information: as required by law, such as to comply with a subpoena, or similar legal process;when we believe in good faith that disclosure is necessary to protect our rights, protect your safety or the safety of others, investigate fraud, or respond to a government request;with our trusted services providers who work on our behalf, do not have an independent use of the information we disclose to them, and have agreed to adhere to the rules set forth in this privacy statement. if Synthetic Intelligence Network is involved in a merger, acquisition, or sale of all or a portion of its assets, you will be notified via email and/or a prominent notice on our Web site of any change in ownership or uses of this information, as well as any choices you may have regarding this information. Your Consent By using the Application, you are consenting to our processing of your information as set forth in this Privacy Policy now and as amended by us. \"Processing,” means using cookies on a computer/hand held device or using or touching information in any way, including, but not limited to, collecting, storing, deleting, using, combining and disclosing information. Changes This Privacy Policy may be updated from time to time for any reason. We will notify you of any changes to our Privacy Policy by posting the new Privacy Policy here or informing you via email. You are advised to consult this Privacy Policy regularly for any changes, as continued use is deemed approval of all changes. Synthetic Intelligence Network reserves the right to change this privacy policy from time to time at Synthetic Intelligence Network's sole discretion. Contact us If you have any questions regarding privacy while using the Application, or have questions about our practices, please contact us via email at privacy@syn.co.in."
  },
  "README.html": {
    "href": "README.html",
    "title": "Syn Documentation - Syn Developer Network",
    "keywords": "Syn Documentation This is the Main repository for Syn Developer Network Tutorials and API Documentation Offical Launch Date This new Syn Developer Network will be officially available on or before 19th of September 2016 under the URL developer.syn.co.in Work in Progress This is a work in progress, we will soon be making a transition from the WordPress based Syn Wiki Center to Markdown based automated library documentation along with custom Tutorials Improving the Docs If you find any mistake in our Tutorials section or feel something can be improved, please do feel free to notify us and we will take the necessary actions on your behalf. Our goal is to give all our developers a unifying experience and that is one of the reasons we are now bringing everything under the shelter of Syn Developer Network ."
  },
  "relink.html": {
    "href": "relink.html",
    "title": "Syn Websites and Projects - Syn Developer Network",
    "keywords": "Syn Websites and Projects Syntheitc Intelligence Network - Main Website REVARN Cybernetics - Company Website VA Framework - Digital Assistant development platform SIML - Bot development Language Syn Bot Studio - IDE for SIML project development Syn Speech - Speech Recognition Engine Syn EmotionML - Standard compliant EmotionML parser. Community Links Developer Forum Developer Network Developer Lobby Projects linked ProjectAmy - SIML Based A.I for basic Chatting, or IT Troubleshooting. SecondLife: Built-in Artificial Intelligence K4rlbot | Your all in one Twitchbot Experiment with AI chatbot app development · heiswayiNrird(site) Julie is an IOT charlatan. She's also a chat bot jacean/ChatBot Tutorials on our Frameworks by other Developers Add a Chatbot to a C# application using SIML (Synthetic Intelligence Markup Language) Add a Chatbot to a C# application using SIML (Synthetic Intelligence Markup Language) - Part 2 Natural Language Interface to Database Automated Live Chat on Websites World Maker Challenge Entry: Weak AI IoT Assistant & MKR1000 / Uno IoT Devices - YouTube Polish SIML Tutorial"
  },
  "terms-conditions.html": {
    "href": "terms-conditions.html",
    "title": "Terms and Conditions - Syn Developer Network",
    "keywords": "Terms and Conditions By accessing the website at http://www.syn.co.in , you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law. Free Version License Unless stated otherwise, permission is granted to temporarily download one copy of the materials (information or software) on Synthetic Intelligence Network's website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: modify or copy the materials; use the materials for any commercial purpose, or for any public display (commercial or non-commercial);attempt to decompile or reverse engineer any software contained on Synthetic Intelligence Network's website; remove any copyright or other proprietary notations from the materials; or transfer the materials to another person or \"mirror\" the materials on any other server. This license shall automatically terminate if you violate any of these restrictions and may be terminated by Synthetic Intelligence Network at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format. Disclaimer The materials on Synthetic Intelligence Network's website are provided on an 'as is' basis. Synthetic Intelligence Network makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, Synthetic Intelligence Network does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site. Limitations In no event shall Synthetic Intelligence Network or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on Synthetic Intelligence Network's website, even if Synthetic Intelligence Network or a Synthetic Intelligence Network authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you. Accuracy of materials The materials appearing on Synthetic Intelligence Network's website could include technical, typographical, or photographic errors. Synthetic Intelligence Network does not warrant that any of the materials on its website are accurate, complete or current. Synthetic Intelligence Network may make changes to the materials contained on its website at any time without notice. However Synthetic Intelligence Network does not make any commitment to update the materials. Links Synthetic Intelligence Network has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by Synthetic Intelligence Network of the site. Use of any such linked website is at the user's own risk. Modifications Synthetic Intelligence Network may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service. Governing Law These terms and conditions are governed by and construed in accordance with the laws of Karnataka, India and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location."
  },
  "note/index.html": {
    "href": "note/index.html",
    "title": "Release Notes - Syn Developer Network",
    "keywords": "Release Notes Click on the content table on the left to see Release Notes and Roadmaps of existing Syn Products. Some Commits may have Date or Time attached to them, the timezones of these Date or Time depends on the location where the commit was made. Tip You may refer each product's roadmap page to see what is in line for future releases. You can be part of the future improvements by making suggestions in our Forum"
  },
  "tutorial/bot/oscova/context.html": {
    "href": "tutorial/bot/oscova/context.html",
    "title": "Context - Syn Developer Network",
    "keywords": "Context A context represents the conversation state of user sessions. Intents decorated with Context attributes only get evaluated during the match process if the specified context name exists in user session. Contexts greatly help in removing ambiguities from conversations. A context is composed of 2 parts. Property Description Name The name of the context. Lifespan The total number of requests the context will exists for. The default lifespan is 5 requests. Additionally contexts also have an internal time span that measures their existence. By default a context stays active for 10 minutes. If either the lifespan (request count) or time span has been exceeded the context is removed from user session. Usage Lets assume that your application has a shutdown command but you wish to confirm with the user that he really wishes to shutdown the application. [Expression(\"shutdown\")] public void Shutdown(Context context, Result result) { //Add a new \"shutdown_confirmation\" context. context.Add(\"shutdown_confirmation\", 2); result.SendResponse(\"Are you sure?\"); //Do something. } In the above code we created a new shutdown_confirmation context with a lifespan of 2 requests. This newly created context will last for the next 2 requests. [Expression(\"{yes}\")] [Entity(Sys.Positive)] [Context(\"shutdown_confirmation\")] public void ShutdownConfirmed(Context context, Result result) { //Do something. } [Expression(\"{no}\")] [Entity(Sys.Negative)] [Context(\"shutdown_confirmation\")] public void ShutdownCanceled(Context context, Result result) { //Do something. } When the user says Shutdown the bot will respond Are you sure? . If the user says yes the intent ShutdownConfirmed will get invoked. As we specified the lifespan of the context to be 2 . The context becomes inactive after 2 user requests. Context can also be manually removed as shown in the code below. context.Remove(\"shutdown_confirmation\"); Parameters An added context can carry multiple unique parameters during the course of its existence. These parameters can be used provide additional information regarding the underlying context. Example [Expression(\"turn on the air conditioner\")] public void TurnOnAC(Context context, Result result) { context.Add(\"air-con\"); var acContext = context[\"air-con\"]; acContext.Parameters.Add(\"temp\", \"medium\"); } Conditonal Existence After from counting the number of requests made to determine the lifespan of a context item . Developers may also pass a function while adding a new context item that determines for how long the context should stay active. For example, when your user is watching a movie. You would want the commands pause and resume available until the movie is being played. Example [Expression(\"Play @movie-name\")] public void PlayMovie(Context context, Result result) { //Keep context active until movie is playing. context.Add(\"movie-playback\", () => { return MoviePlayer.IsPlaying; }); //Do something. } Note Once a function is provided the value of the Lifespan property is ignored. Also, once a context item goes inactive it is removed from user session."
  },
  "tutorial/bot/oscova/empty.html": {
    "href": "tutorial/bot/oscova/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/bot/oscova/entity-recognizer.html": {
    "href": "tutorial/bot/oscova/entity-recognizer.html",
    "title": "Entity Recognizers - Syn Developer Network",
    "keywords": "Entity Recognizers Oscova supports multiple ways of rapidly creating entity recognizers. Developers can create entity recognizers for known words, patterns via regular expressions or even by providing methods that extract entities from request. Entries Recognizer For list of known words (entries) developer can easily create an Entity Recognizer by calling the CreateRecognizer method, specifying the EntityType parsed by the entity recognizer and an array of known entry values. var bot = new OscovaBot(); bot.CreateRecognizer(\"employee\", new[] { \"Sean\", \"Ali\", \"Patel\" }); The above code creates an Entity Recognizer for the type employee . If any of specified entry is found in user request and Entity of type employee will get added to the result. Note Any entity recognizer created by calling the CreateRecognizer gets added to the Bot's Recognizers collection. You can also create an Entries Recognizer by creating an empty entries recognizer and later adding entry values as shown value. var recognizer = bot.CreateRecognizer(\"employee\"); recognizer.Entries.Add(\"Sean\"); recognizer.Entries.Add(\"Ali\"); recognizer.Entries.Add(\"Patel\"); All entry based entity recognizers are greedy. For example, if you have an entry gray and another entry dark gray . If the user message contains Dark Gray the entity recognizer will return one entity with value dark gray . Enumeration Recognizer Developers can also create Entity Recognizers for enum types. enum PriorityTypes { Low, High, Mininum, Maxinum } var bot = new OscovaBot(); bot.CreateRecognizer<PriorityTypes>(\"priority\"); In the above code we pass the type PriorityTypes and specify entity type name for the new entry based recognizer. All enum values Low , High , Minimum and Maximum will be treated as entry values. Developers can also specify entry synonyms by decorating an enum value with the Synonyms attribute as shown below. enum PriorityTypes { Low, High, [Synonyms(\"Min\")] Minimum, [Synonyms(\"Max\")] Maximum } As synonyms have been added the entity recognizer will now consider the words Min and Max when parsing a request. The entity recognizer will also link the enum value and synonyms during entity creation. This allows developers to fetch the value of the created entity as an enum type. var entity = result.Entities.OfType(\"priority\"); var priority = entity.ValueAs<PriorityTypes>(); The value of the variable priority will be PriorityTypes.Minimum if entity.Value is Min or Minimum . Pattern Recognizer You can create a regular expression based entity recognizer by specifying the entity type and passing in the Regex instance. var regex = new Regex(\"[0-9a-fA-F]+[\\r\\n]*\"); bot.CreateRecognizer(\"hex\", regex); In the above code we've created an entity recognizer for hexadecimal numbers. Whenever the pattern is matched in user message an Entity of type hex gets created. Functional Recognizer A functional recognizer can be created by specifying an entity type and a method that returns EntityCollection after parsing the user message. bot.CreateRecognizer(\"name\", request => { var entities = new EntityCollection(); var message = request.NormalizedText; foreach (var item in SomeValues) { var index = message.IndexOf(item, StringComparison.OrdinalIgnoreCase); if (index == -1) continue; var entity = new Entity(\"name\") { Value = item, Index = index }; entities.Add(entity); } return entities; }); Recognizers created by this method are extremely handy in situations when the developer doesn't want the Bot to load known entries into memory. Functional Recognizer is recommended for recognizing entities from Database. Custom Recognizer A custom entity recognizer can also be built from scratch by implementing the IEntityRecognizer interface available under the Syn.Bot.Oscova.Interfaces namespace. For example, in the code below we create an entity recognizer that recognizes HTML content in user input. Custom HTML entity public class HtmlEntity : IEntity { public HtmlEntity() { Type = \"html\"; } public string Type { get; set; } public string Value { get; set; } public int Index { get; set; } } Custom IEntityRecognizer implementation public class HtmlRecognizer : IEntityRecognizer { public string Type => \"html\"; public EntityCollection Parse(Request request) { var regex = new Regex(@\"<(?<tag>\\w*)>(?<text>.*)</\\k<tag>>\"); var entities = new EntityCollection(); foreach (Match match in regex.Matches(request.NormalizedText)) { var entity = new HtmlEntity { Value = match.Value, Index = match.Index }; entities.Add(entity); } return entities; } } The above HTML entity recognizer uses a regular expression to match HTML tags in user input. After a match is found the recognizer creates a new entity of type html using the class HtmlEntity . Important All entities must specify an Index value. That denotes the starting index of the matched content in user input. After a custom entity recognizer is created add it to the Recognizers collection before training is initiated."
  },
  "tutorial/bot/oscova/expression.html": {
    "href": "tutorial/bot/oscova/expression.html",
    "title": "Expression - Syn Developer Network",
    "keywords": "Expression An Expression is a pattern that defines user input. The Expression Attribute is used to decorate an intent method with triggering user input expressions. Multiple Expressions on single intent method is supported. Declaring an Expression The following symbols are allowed in an expression. Any other symbol found in an expression gets truncated after normalization. Type Description Alphanumeric Combination of alphabetic and numeric characters. Hyphen( - ) The hyphen character is valid as it may be part of entity names. Dot( . ) The dot symbol is valid as it is part of system entity names. Ampersand( @ ) Strictly used as prefix for entity names in template mode . Curly Braces ( {} ) Strictly used for annotating entity values. Types of Expressions There are 2 types of Expressions in Oscova. 1. Example In example mode an expression is created by annotating entity values with curly braces. Annotation links words or phrases to specific entity types. [Expression(\"{open} the garage door\")] [Expression(\"{close} the garage door\")] [Entity(\"command\")] Immediately after an example expression the developer must use the Entity attribute to specify the entity type of the annotated value. If the entity type is not a system entity an internal entity recognizer gets created that recognizes the annotated value. The order of the following Entity attributes is used to determine the type of the annotated value. Wrong ordering will lead to ambiguity. 2. Template In template mode an expression is created by using entity type names instead of annotation of entity values . Entity type name must be prefixed with an ampersand @ symbol. [Expression(\"@command the garage door\")] As @command denotes a new entity type we'll need to add a recognizer for this type. bot.CreateRecognizer(\"command\", new[] {\"open\", \"close\"}); The above expression captures: Open the garage door. Close the garage door. Entity types name must contain only alphanumeric characters separated by dot( . ) or Hypen( - ). Any other character type is invalid. Using System Entities As Oscova comes with dozens of pre-built system entities . It is convenient to use them in Expressions instead of creating one from scratch. All system entity type names are available as constant members of the Sys class. For example you can specify the Sys.Date type as shown below. [Expression(\"Book an appointment for {tomorrow}\")] [Entity(Sys.Date)] public void Appointment(Context context, Result result) { //Do Something. }"
  },
  "tutorial/bot/oscova/index.html": {
    "href": "tutorial/bot/oscova/index.html",
    "title": "Oscova - Syn Developer Network",
    "keywords": "Oscova A next generation Bot development platform that brings the industry's Bot standards to all major devices. Oscova works offline and doesn't require connecting to any online API. The architecture allows developers to create Bots that take advantage of Dialogs, Intents and Entity recognition with least effort. Oscova also comes with dozens of pre-built system entities backed by intelligent Entity Recognizers for Rapid Bot Development. NuGet Package For ease of referencing Oscova in .NET project, Oscova is deployed in NuGet and is an integral part of the Syn.Bot Framework. Architecture (V1) The Oscova Bot architecture basically consists of the following elements. Components Element Description Dialog A collection of Intents Expression A pattern or example that defines user input. Intent A void function marked with Expression and Entity attributes that processes the returned Context and Result objects. Context The current context of conversation. Entity Parsed elements found within the user statement. Prompt A message that is sent when a specified entity is missing. Natural Language Processing Oscova's in-built Natural Language Processing engine is designed to fastly decode linguistics features in user input and identify characteristics that best describe an existing Expression attached to an Intent. For this Oscova leverages on advanced AI algorithms that give Oscova the unique ability of scoring Intents with high precision. Due to the modular nature of the NLP engine, Oscova can load WordNet Lexical Database and Word Vectors to perform better semantic analysis and word sense disambiguation. Oscova NLP engine also comes with in-built support for advanced Machine Learning . When machine learning is enabled Oscova trains itself to understand natural language by building intelligent models that extract relevant features from Expressions provided within Dialogs . As training the bot in Machine Learning mode can take several minutes to hours, the default Processing Mode is always set to Rule . Serialization Support As some development teams may prefer to run their own Bot servers, Oscova comes with in-built support for online API interface via JSON. Responses and Evaluation Results can easily be serialized with one method call. <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-portable.md\" --> Platforms Supported <!--END INCLUDE -->"
  },
  "tutorial/bot/oscova/intent.html": {
    "href": "tutorial/bot/oscova/intent.html",
    "title": "Intents - Syn Developer Network",
    "keywords": "Intents In Oscova an intent is any action that the bot is supposed to execute when they user message matches an expression. An intent is a void method with a public modifier. The name of the intent is taken directly from the method name. Declaration [Expression(\"How is the weather?\")] public void Weather(Context context, Result result) { //Do something. } An intent method must always be a member of a class that derives from the Dialog class and must have atleast 1 Expression attribute attached to it. By convention an Intent must take 2 parameters. The first being Context and the second being the Result . Parameter Description Context The Context provides information regarding the current user conversation context and also enables adding and removing context and relative parameters . Apart from that the Context instance also has a SharedData property for the developer to store and retrieve shared objects throughout a user session. Result The Result is the evaluated result that Oscova generated for this particular user message. Its Entities property contains all the recognized global and parametric entities. Its CurrentIntent property represents the current intent that is being invoked. Parameter Sequence Developers are not restricted to specifying 2 parameters in all intents. All of the following method signature are valid intents. During invocation, Oscova will pass the right parameters to the intent. [Expression(\"How is the weather?\")] public void Weather() [Expression(\"How is the weather?\")] public void Weather(Context context) [Expression(\"How is the weather?\")] public void Weather(Result result) [Expression(\"How is the weather?\")] public void Weather(Context context, Result result) Name By default the name of an Intent is the combination of the name of the dialog and the method name. For example, the name of an intent with the method name FindHotel present within the HotelDialog class will be HotelDialog.FindHotel . If you do not wish to include the dialog name in intent names, you may set the value of UseFullIntentName to false in bot configuration. Moreover, if you wish to add a custom name to an intent you may use the Name attribute as shown below. [Expression(\"Find a hotel nearby\")] [Name(\"nearestHotel\")] public void FindHotel(Context context, Result result) As a Name attribute has been used, the name of the above intent during serialization will nearestHotel . Note Value of the UseFullIntentName property in bot configuration gets ignored if a developer explicitly specifies an intent name using the Name attribute. Default Intent A Default intent is an intent that is invoked if the user input doesn't match any existing regular intent. If none of the added Dialogs have a default Intent, Oscova adds an internal default intent with no action. To create a Default intent for a Dialog. Create an Intent and decorate it with an empty Expression as shown below. [Expression] public void Default(Context context, Result result) { result.Send(\"Can you please rephrase that for me?\"); }"
  },
  "tutorial/bot/oscova/load-word-vectors.html": {
    "href": "tutorial/bot/oscova/load-word-vectors.html",
    "title": "Loading Word Vectors - Syn Developer Network",
    "keywords": "Loading Word Vectors Apart from connecting Oscova to a lexical database (like WordNet via Syn.WordNet ) for improving word relatedness measurement, the Language property of OscovaBot also allows loading of Word embeddings generated by Word2Vec model. You can either connect WordNet or load word vectors from pre-trained data files. Training Corpus Selecting the right training corpus is crucial for generating word vectors that closely capture the linguistic context of words. The corpus should mainly contain sentences that relate to the domain addressed by the Bot. For example, if your bot deals with pizza ordering then you are better off training word vectors based on previous chat logs generated by real customers. It is also important to note that larger corpus tend to yield better word vectors. Syn Bot Studio Especially for usage in Oscova, we have added the Word Vector Builder tool in Syn Bot Studio . The tool does offer a plethora of options to tweak the training process used in Word2Vec model. To continue with this tutorial you'll need to install Syn Bot Studio . To download Syn Bot Studio click here , extract the setup file and follow the instructions in the installation wizard. Building word vectors First and foremost we'll need a corpus of text to generate word vectors. The file must be a text file with all words/tokens separated by space character. The larger the corpus the better will be the word vector representation. To follow up with this tutorial you may download an example corpus here Extract the corpus.zip file Run Syn Bot Studio Click on Tools and select Word Vector Builder Click on Browse Corpus... button and select the extracted corpus.txt file. Now click on the Output File button and name the file output.bin Finally click on the Build Vectors button. It should take a couple of seconds to build the vectors. Once completed Syn Bot Studio will open the parent folder of the selected output file. Testing built word vectors In the Word Vector Builder window select the Test tab. Click on Load Vectors... and select the output.bin file. Once loaded, type king in the search box and press Find closest . You'll notice that words sharing the same context are placed close to each other in the vector space. Loading word vectors into Oscova Once word vectors have been generated in either bin or txt file format. It is relatively easy to load them into Oscova. In the code below we call the LoadWordVectors method on the Language property and pass in the vector data file as a FileStream . var bot = new OscovaBot(); var fileStream = new FileStream(@\"D:\\output.bin\", FileMode.Open); bot.Language.LoadWordVectors(fileStream, FileFormat.Binary); ... bot.Train();"
  },
  "tutorial/bot/oscova/load-wordnet.html": {
    "href": "tutorial/bot/oscova/load-wordnet.html",
    "title": "Loading WordNet Database - Syn Developer Network",
    "keywords": "Loading WordNet Database In order to enable better semantic analysis of tokens in user input it is highly recommended that WordNet source files are loaded into Oscova before training. WordNet being a lexical database enchances Oscova's capability of find semantic relatedness between words. WordNet® is a registered trademark of Princeton University. Loading Files To load WordNet lexical database files into Oscova you can make use of the AddDataSource and AddIndexSource methods available on the WordNet property. Each file must be passed in via a StreamReader and the appropriate PartOfSpeech addressed by the files must be specified. There are 4 main parts of speech for which we'll need to load data. Adjective Adverb Noun Verb The following are the names of database files that need to be loaded into the WordNet engine. Data: Added via AddDataSource method. data.adj data.adv data.noun data.verb Index: Added via AddIndexSource method. index.adj index.adv index.noun index.verb Example var bot = new OscovaBot(); var wordNet = bot.Language.WordNet; const string directory = @\"D:\\WordNet\\dict\"; //Data wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.adj\")), PartOfSpeech.Adjective); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.adv\")), PartOfSpeech.Adverb); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.noun\")), PartOfSpeech.Noun); wordNet.AddDataSource(new StreamReader(Path.Combine(directory, \"data.verb\")), PartOfSpeech.Verb); //Indices wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.adj\")), PartOfSpeech.Adjective); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.adv\")), PartOfSpeech.Adverb); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.noun\")), PartOfSpeech.Noun); wordNet.AddIndexSource(new StreamReader(Path.Combine(directory, \"index.verb\")), PartOfSpeech.Verb); //Important wordNet.Load(); ... bot.Train(); Note Loading of WordNet files may take a couple of seconds. After adding the source files, you must call the WordNet.Load() method. Once the load completes, Oscova will automatically detect the change and will start using WordNet to find lexical relations between words and their senses while scoring intents."
  },
  "tutorial/bot/oscova/machine-learning.html": {
    "href": "tutorial/bot/oscova/machine-learning.html",
    "title": "Oscova Machine Learning - Syn Developer Network",
    "keywords": "Oscova Machine Learning Machine Learning in Oscova is powered by advanced neural network system the core architecture of which is designed to train fastly and build intelligent models by extracting relevant features from expressions declared within Dialogs . Tip Machine Learning works best when enough expressions are provided for intents. Enabling Machine Learning (ML) There are 2 expression processing modes in Oscova. Rule RuleAndML To enable Machine Learning in Oscova change the value of ProcessingMode in bot configuration to RuleAndML . Example var bot = new OscovaBot(); bot.Configuration.ProcessingMode = ProcessingMode.RuleAndML; bot.Dialogs.Add(new PizzaDialog()); bot.Trainer.StartTraining(); May take several minutes to complete. When ML is enabled, Oscova automatically generates positive and negative training samples from expressions and feeds them to the neural network during the training process. Once the neural network training has completed, Oscova calibrates the score received by the neural network and the NLP engine. Tip Machine Learning must only be enabled once the Bot dialog development has completed and the Bot is ready for deployment. Enabling Machine Learning in smaller projects may yield lower improvements in intent scoring. Training via Syn Bot Studio To train Oscova's Neural Network via Syn Bot Studio you will first need to extract the TrainingData from Oscova Bot. You can retrieve the training data as an XML Document by calling the GetTrainingData() method on the Trainer property. Example var bot = new OscovaBot(); bot.Configuration.ProcessingMode = ProcessingMode.RuleAndML; bot.Dialogs.Add(new PizzaDialog()); var trainingDocument = bot.Trainer.GetTrainingData(); trainingDocument.Save(\"TrainingData.xml\"); //Saves the training data to an XML file. After the training data is saved follow the steps below to generate a trained neural network model. Launch Syn Bot Studio , click on Tools select Oscova and then choose Neural Network Trainer In Neural Network Trainer window, click on Browse... and select the TrainingData.xml file. To begin training, click on Start Training . Selecting minimum Loss The lower the Loss of the Neural Network the better trained is the model. After clicking on Start Training the Loss-Step chart will display the current Loss of the network. If the Loss is way above the specified Minimum Loss value and there is no significant change in the value for long, restart the training by clicking on Stop Training and then clicking on Start Training back again. If the Loss value is close to the specified Minimum Loss value and there is no significant change in the value for long, stop the training and you will be presented with the Minimum Loss Achieved value. Using this value as reference adjust the Minimum Loss and press Start Training again. Note It may take several minutes for the Neural Network to be trained depending on the number of internal samples generated for each expression. Loading trained model Once the training is successful, the trained model will be saved in the same directory where the training data is placed. You may now load the trained model into Oscova using the overloaded StartTraining() method. Example var bot = new OscovaBot(); bot.Configuration.ProcessingMode = ProcessingMode.RuleAndML; bot.Dialogs.Add(new SomeDialog()); bot.Trainer.StartTraining(XDocument.Load(\"Trained_Model.osml\")); Saving Trained Model without Syn Bot Studio If for some reason you are not using Syn Bot Studio , you can still save the Trained Model by handling the TrainingFinished event. Example var bot = new OscovaBot(); bot.Configuration.ProcessingMode = ProcessingMode.RuleAndML; bot.Dialogs.Add(new SomeDialog()); //When the training has finished, the model is saved within Trained_Model.osml file. bot.TrainingFinished += (sender, args) => { args.TrainedModel.Save(\"Trained_Model.osml\"); }; bot.Trainer.StartTraining();"
  },
  "tutorial/bot/oscova/nlp-components.html": {
    "href": "tutorial/bot/oscova/nlp-components.html",
    "title": "NLP Components - Syn Developer Network",
    "keywords": "NLP Components As Oscova is designed to be a single standalone framework with a fully customizble Natural Language Processing (NLP) engine. There are multiple ways of customizating Oscova's NLP behaviour by implementing respective interfaces. The Language property of Oscova bot holds the following components. Filters Tokenizer Detokenizer Stemmer Stop Words Punctuations Lexical Database By default Oscova uses the EnglishLanguage Language class with en-US culture. The EnglishLanguage class uses the following in-built components. EnglishTokenizer EnglishDetokenizer EnglishStemmer Filters Filtration is an integral part of the normalization process and enables words, phrases or text values to be replaced by the specified replacement values. There are currently 2 types of Filters Word Text To add a filter use the AddFilter method in the Language property of the bot. Any deriving class may add filters in its constructor. We recommend keeping number of filters to their optimal minimum as large filtration set impacts the performance of the normalization process. Normalization During the normalization process all added filters are applied by replacing matched words or texts with their replacement values and once the aforementioned process has completed punctuation marks are removed from the end of sentences. Oscova applies normalization prior to any other textual manipulation. By adding filters and applying normalizations developers can ensure common abbreviations and acronyms are addressed, junk words or texts are removed or converted into forms that help better entity recognition. Note Normalization doesn't remove stop-words . Punctuations An array of common punctuation characters. Though punctuation marks may aid in interpretation, Oscova in V1 doesn't make use of punctuation marks during word sense disambiguation and hence punctuations at the end of sentences are truncated during the normalization process. Stop-Words Stop-Words are commonly used words that do not contribute much to the meaning of the user input. Oscova doesn't directly disregard stop-words . The internal scoring system for intents considers both Expression and User input match score. The existence of stop words only influence the user input match score. The default EnglishLanguage class already adds a list of most common stop words in the English language to the StopWords property. When adding new words to the list we recommend not being too agreesive as adding large sets of stop words may impact semantic similarity scoring. Tokenizer The default EnglishTokenizer splits the user input based on space character. Contractions like ( they're , I'll ) are considered as single tokens. Values within curly braces are treated as single tokens as the Expressions rely on tokenization for creating internal expression tokens. Detokenizer The default EnglishDetokenizer simply merges a given set of tokens to their detokenized form. Due to the nature of tokenization not all detokenized forms will represent their initial forms. Detokenization is also used internally by Oscova to generate interpretation of matched intent results. Stemmer A stemmer reduces words to the their root forms. The default EnglishStemmer is partially a lemmatizer that reduces words to their lemma. For example, the word jumped is reduced to jump and the word having is reduced to have . Despite the lemmatization behaviour of the stemmer we recommend still treating it as a normal stemmer. WordNet Especially for Oscova we have released Syn.WordNet library to help connect Oscova with WordNet (a freely available lexical database). Connecting WordNet to Oscova greatly increases the scoring accuracy and NLP capabilities. For more information on loading WordNet database please visit the WordNet section. Tip We highly recommend integrating WordNet with Oscova if your Bot is remotely deployed. Machine Learning Neural Network The Machine Learning Neural Network of Oscova is designed to extract maximum number of relevant features from automatically generated internal training samples in least number of training epochs. The trained model generated is portable and can be saved and loaded at run-time. For more information on training Oscova in Machine Learning mode, please visit the Machine Learning section."
  },
  "tutorial/bot/oscova/prompt.html": {
    "href": "tutorial/bot/oscova/prompt.html",
    "title": "Prompt - Syn Developer Network",
    "keywords": "Prompt In Oscova prompts can be added to intents for missing entity types. The user will receive the prompt message if an intent is invoked and the specified prompt entity type is missing. Adding a Prompt Suppose we have an intent that play music by genre. We could add a prompt message that is received by the user if the user message doesn't contain an music genre. [Expression(\"play {rock} music\")] [Entity(Sys.MusicGenre)] [Prompt(Sys.MusicGenre, \"Please specify a genre.\")] public void OpenApp(Context context, Result result) { //Do Something. } If the user just says Play Music the bot will respond Please specify a genre . Prompts for multiple entity types are supported. Until all the specified entity types are found the user will keep receiving respective prompt message."
  },
  "tutorial/bot/oscova/serialization.html": {
    "href": "tutorial/bot/oscova/serialization.html",
    "title": "Serialization - Syn Developer Network",
    "keywords": "Serialization Oscova comes with in-built support for serialization of evaluation results and bot responses. The internal serialization option ensures that all essential details are available and also that the size foot-print is the least. For example, empty resolutions, parametric and array values are not included. Using the serialization option developers can connect the Oscova evaluation results to execute actions or display prompts in custom applications that may not be running Oscova Bot locally. Evaluation Result When an EvaluationResult is returned after evaluation. Calling the Serialize() method yields the result in JSON in the following format. Example { \"query\": \"large pizza with pepperoni\", \"sessionId\": \"489746c0-1a4f-4572-947b-0f5680cfc28a\", \"intents\": [ { \"intent\": \"PizzaDialog.PizzaWithToppings\", \"score\": 0.85733333333333326 }, { \"intent\": \"PizzaDialog.PizzaOrder\", \"score\": 0.41666666666666663 } ], \"entities\": [ { \"entity\": \"large\", \"type\": \"size\" }, { \"entity\": \"pepperoni\", \"type\": \"toppings\" } ], \"contexts\": [ ] } A typical result object has the following properties. Property Description query The original user message. sessionId The user's session ID. intents List of all matched intents. entities List of all the extracted entities. contexts List of all currently active context items. Intents Example Intent { \"intent\": \"PizzaDialog.PizzaWithToppings\", \"score\": 0.81532331423326 } Example Intent with Prompt { \"intent\": \"RestaurantDialog.FindRestaurant\", \"score\": 0.715634952, \"prompt\": \"Please specify a location.\" } An intent object has 3 properties. Property Description intent The full name of the intent or the value of the Name attribute added. score The calibrated intent match score. prompt Prompt message attached to the intent when a required entity type is missing. Entities Example Entity { \"entity\": \"pepperoni\", \"type\": \"toppings\" } Example Entity with Resolution { \"entity\": \"tomorrow\", \"type\": \"sys.date\", \"resolution\": { \"date\": \"2017-01-05\" } } An entity object has 3 properties. Property Description entity The matched string value. type The entity type. resolution Resolutions for the matched entity type. Contexts Example Context { \"name\": \"order_confirmation\", \"lifespan\": 5 } Example Context with Parameter { \"name\": \"video_playback\", \"lifespan\": 5, \"parameters\": { \"name\": \"movie_name\", \"value\": \"Life_is_Beautiful\" } } A Context object has 3 properties. Property Description name The name of the context item. lifespan The lifespan of the context item. If the context name belongs to a conditionally existing context this property must be ignored. parameters Additional parameters attached with the context. A Parameter object has 2 properties. Property Description name The name of the parameter. value The value of the parameter. Response A instance of the Response class can also be serialized using the Serialize() method. Example Response { \"text\": \"App opened\", \"type\": \"message\", \"format\": \"plain\", } Example Response with Hint { \"text\": \"Are you sure?\", \"type\": \"message\", \"format\": \"plain\", \"hint\": \"Yes|No\" } A typical response object has the following propperties. Property Description text The value associated with the response. type The type of the response generated. format The format of the response. hint A hint to the next user input expected by the Bot."
  },
  "tutorial/bot/oscova/system-entities.html": {
    "href": "tutorial/bot/oscova/system-entities.html",
    "title": "System Entities - Syn Developer Network",
    "keywords": "System Entities Oscova comes with many pre-built system entities to ease the Bot development process. By default all Entity Recognizers for the following entity types are pre-loaded during Bot training. To force the Bot to load Entity Recognizers only for required entity types, that are declared using EntityAttribute , set the value of RequiredRecognizersOnly to true in BotConfiguration . Tip To load an additional Entity Recognizer for an entity type that is not mentioned using EntityAttribute you may register the entity recognizer using the following method. Bot.Recognizers.RegisterType<Recognizer-Class>(Entity-Type); Note All required entity recognizers must be registered before calling the Train method. Pre-Built Entities Generic Entity Name Description Examples Returned Value @sys.text Matches non-empty text Tell John @sys.text Returns matched part of user input I am on my way @sys.url Matches a url www.oscova.com http://oscova.com Returns a valid URL Date and Time Entity Name Description Examples Returned Value @sys.date Matches a date March 12th Tomorrow Returns date in ISO-8601 format, such as 2016-12-15 @sys.date.month Names of months January, June Returns month and date string in ISO-8601 @sys.date.time Matches a date and time December 1 at 5 pm Tomorrow at 2 pm Returns Date and time in ISO-8601 format, such as 2016-12-10T13:42:25 @sys.time Matches a time. 8:30 12 pm in 10 minutes Returns time in ISO-8601 format (hh:mm:ss): 14:20:00 Numbers Entity Name Description Examples Returned Value @sys.number Matches integer and decimal numbers 10.5 14 seventy first Returns double, such as 10.5 @sys.ordinal Matches ordinal numbers second 1st 12-th Returns integer, such as 12 @sys.number.integer Matches integer numbers 10 -10 Returns integer, such as 10 @sys.number.sequence Matches integer number sequences 10 15 20 1 5 8 6 Returns string, such as 10 15 12 Value and Units Entity Name Description Examples Returned Value @sys.unit.area Number and Area unit 36 sq m 19 acres Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"sq m\"} @sys.unit.length Number and Length unit 15 kilometers 8 miles Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"km\"} @sys.unit.speed Number and Speed unit 17 miles per hour 10 km/h Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"mph\"} @sys.unit.volume Number and Volume unit 5 liters 10 gallons Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"cm3\"} @sys.unit.weight Number and Weight unit 14 kg 10 pounds Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"lb\"} @sys.temperature Number and Temperature unit 37.6°F 15 degrees celsius Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"F\"} @sys.duration Number and Time unit 12 minutes 4 hrs Value as double and unit abbreviation as {\"amount\":10, \"unit\":\"hour\"} @sys.age Number and Age unit 12 months old 2 years old Value as double and unit abbreviation as {\"amount\":5, \"unit\":\"year\"} @sys.percentage Number and Percentage unit 56% 12 percent Value as double and unit as {\"amount\":5, \"unit\":\"percent\"} Unit Names Entity Name Description Examples Returned Value @sys.currency.name Currencies. Requires Configuration US dollar INR Returns string, such as USD @sys.unit.area.name Units of area Square Meters Hectares Returns string, such as sq km @sys.unit.length.name Units of length Meter Kilometers Returns string, such as km @sys.unit.speed.name Units of speed Miles per hour Kilometer per hour Returns string, such as mph @sys.unit.temperature.name Units of temperature degree celsius Kelvin Returns string, such as K @sys.unit.volume.name Units of volume Milliliter Gallon Returns string, such as ml @sys.unit.weight.name Units of weight Kilogram Pounds Returns string, such as kg Geography Entity Name Description Examples Returned Value @sys.geo.country Names of countries United States Australia Returns short country name string as per ISO 3166-1 , such as United States of America @sys.geo.state.us US States Arizona Minnesota Returns short state name string as per ISO-3166-2 , such as Ohio @sys.geo.state.ind Indian states and union territories Goa New Delhi Returns string, such as Goa @sys.geo.ip Matches IP Addresses 192.168.2.1 Returns string, such as 192.168.2.1 @sys.geo.postal.us 5 digit US postal codes 11368 90005 Returns string, such as 90005 Note: Does not validate the code @sys.geo.postal.uk Alphanumeric UK Postal codes W1A 1HQ M60 1NW Returns string, such as M60 1NW Note: Does not validate the code. @sys.geo.postal.ind 6 digit Indian Postal codes 560037 691001 Returns string, such as 560037 Note: Does not validate the code. Language Entity Name Description Examples Returned Value @sys.language Names of Languages English Hindi Returns string, such as English Contacts Entity Name Description Examples Returned Value @sys.email Email address example@example.com Returns string, such as example@example.com Note: Overrides @sys.url value example.com @sys.phone.us Matches US phone numbers +1 (123) 456-7890 (123) 456-7890 Returns string, such as (123) 456-7890 @sys.phone.ind Matches Indian phone numbers (+91) 8987654321 011-20000198 Returns string, such as 8987654321 Color Entity Name Description Examples Returned Value @sys.color Names of colors Red Dark Gray Returns string, such as Dark Gray Music Entity Name Description Examples Returned Value @sys.music.genre Names of popular music genres Jazz Blues Returns string, such as Jazz Polar Question Because users can respond in any manner to *polar questions some user responses may lead to some false-positives. Hence, developers are encouraged to build custom recognizers for positive and negative sentences. However, by using the following entity types the developer is solely responsible for any action executed by the Bot.* Entity Name Description Examples Returned Value @sys.positive A positive response Yes Okay Returns string, such as yes @sys.negative A negative response No Nope Returns string, such as no Manual Configuration Currency As the word dollar may be used to refer to United States Dollar in US and Australian Dollar in Australia . The developer must manually extend the @sys.currency.name entries by adding synonyms for currency codes based on the location of the user the bot is interacting with. Bot.Recognizers[EntityTypes.CurrencyName].Entries.AddSynonyms(\"USD\", new [] {\"dollar\", \"us dollar\",\"dollars\"})"
  },
  "tutorial/bot/oscova/tutorial.html": {
    "href": "tutorial/bot/oscova/tutorial.html",
    "title": "Basic Tutorial - Syn Developer Network",
    "keywords": "Basic Tutorial In this tutorial we will create a simple bot that opens an application by taking commands from the user. As Oscova is part of Syn.Bot framework please ensure that you are always using the Syn.Bot.Oscova namespace and not Syn.Bot.Siml . <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/console-application.md\" --> Creating a Console Application To create a Console application in Visual Studio following the steps given below. Start Visual Studio 2015 or above On the File menu, select New and then choose Project.. . In the New Project dialog select Console Application . <!--END INCLUDE --> Name the project OscovaConsoleBot and choose OK . Now we'll add a new class to the project. To do so: Right click the project in Solution Explorer Select Add and then choose Class... Name the class AppDialog Tip You may download a sample project relating to this tutorial by clicking here. Creating a Dialog To create an Oscova Dialog create a class that is derived from the Dialog class. In this tutorial our Dialog is designed to assist in opening Apps. Thus we'll use the name AppDialog . class AppDialog: Dialog { } Note By convention dialog class names should end with the word Dialog . Creating an Intent In Oscova an Intent is declared by creating a void method and then decorating the method with Expression and Entity attributes. Our first intent will assist in opening applications. All intent methods must have public modifier and must be of type void . In the AppDialog class add the following method. OpenApp (Intent) [Expression(\"open {calc}\")] [Entity(\"app\")] public void OpenApp(Context context, Result result) { var appEntity = result.Entities.OfType(\"app\"); Process.Start(appEntity.Value); } In the above intent we created an example intent. By annotating the word calc and adding an Entity attribute below the expression we've specified that calc is of the entity type App . The result.Entities property contains all the global and parametric entities parsed by known entity recognizers . Note All Oscova attributes are available under the namespace Syn.Bot.Oscova.Attributes Your entire dialog class should look similar to the following. using System.Diagnostics; using Syn.Bot.Oscova; using Syn.Bot.Oscova.Attributes; namespace OscovaConsoleBot { class AppDialog : Dialog { [Expression(\"open {calc}\")] [Entity(\"app\")] public void OpenApp(Context context, Result result) { var appEntity = result.Entities.OfType(\"app\"); Process.Start(appEntity.Value); } } } Adding Dialogs and Training Once all the created dialogs are added to Oscova, it is required that the Bot is trained. Click on Program.cs in Solution Explorer and add the following code within the static Main method. var bot = new OscovaBot(); bot.Dialogs.Add(new AppDialog()); bot.Train(); Note Oscova Bot must be trained after new Dialogs or Entity Recognizers are added. Evaluating a Request Now that we've added the AppDialog and trained the Bot we can send chat requests to the Bot for evaluation. Add the following just after the above. while (true) { var request = Console.ReadLine(); var evaluationResult = bot.Evaluate(request); evaluationResult.Invoke(); } The Bot.Evaluate method takes Request as parameter. In the above code as we've passed a string value, Oscova will evaluate the message under the MainUser context. After the evaluation is completed, Oscova returns an evaluation result consisting of all the high scoring Intents along with recognized Entities and the conversation Context . All intents are ordered by descending intent scores. In the above code we call evaluationResult.Invoke method after evaluating the use message. This method invokes the best Contextual Intent . It is important to note that for Oscova the best contextual intent is not always the highest scoring intent. This is because Oscova considers the context of conversation when searching for the best intent. Running the Bot Your overall code in Program.cs should look the following. using System; using Syn.Bot.Oscova; namespace OscovaConsoleBot { class Program { static void Main(string[] args) { var bot = new OscovaBot(); bot.Dialogs.Add(new AppDialog()); bot.Train(); while (true) { var request = Console.ReadLine(); var evaluationResult = bot.Evaluate(request); evaluationResult.Invoke(); } } } } To run the Console bot application press F5 . Type open calc . The bot will now launch the Calculator app in Windows. Congrats! You've successfully created your first Oscova bot."
  },
  "tutorial/bot/siml/adding-timer.html": {
    "href": "tutorial/bot/siml/adding-timer.html",
    "title": "Adding a Timer - Syn Developer Network",
    "keywords": "Adding a Timer SIML has some adapters that will need a Timer to function properly. It is upto the developer to create a Timer that calls the PerformTick method at regular intervals to provide a timing mechanism. In the example code below we create a new System.Timers.Timer that calls the PerformTick method on bot timer. var simlBot = new SimlBot(); ServiceTimer = new Timer { Interval = TimeSpan.FromSeconds(1).TotalMilliseconds }; ServiceTimer.Elapsed += (sender, args) => { simlBot.Timer.PerformTick(); }; ServiceTimer.Start(); Note The Late adapter needs a Timer to work."
  },
  "tutorial/bot/siml/custom-adapter.html": {
    "href": "tutorial/bot/siml/custom-adapter.html",
    "title": "Creating a custom Adapter - Syn Developer Network",
    "keywords": "Creating a custom Adapter Apart from all the SIML elements you can add your own custom Element to the SIML interpreter. A custom element should have a unique name and may or may not return a value. Adapters – Tag handlers All SIML tag handlers implement the interface IAdapter . This interface provides the simplest set of properties and functions a tag handler should have to interact with the GraphMaster . Example of a Custom tag handler public class CustomAdapter : IAdapter { public XName TagName { get { return \"Custom\"; } } public bool IsRecursive { get { return true; } } public string Evaluate(Context parameter) { var customElement = parameter.Element; var value = customElement.Value; //Do some processing return value; } } In the example code above the TagName property is the case-sensitive name of your custom tag. . The property IsRecursive tells the interpreter that the children elements of this element can be processed prior to calling the Evaluate method. Finally the function Evaluate is the main function that will be called once the inner elements have been evaluated or skipped if the IsRecursive property is set to false. Working with Namespaces Because large bots will definitely be making use of Custom Adapters there can arise a situation where 2 or more adapters may share the same name. To avoid such conflicts all adapter names are XName objects. This allows developers to group their adapter names with relevant namespaces. <Siml> <Concept Name=\"Some new Concept\" Type=\"Public\" xmlns:example=\"http://example.com/namespace#example\"> <Model> <Pattern>EXECUTE CUSTOM COMMAND</Pattern> <Response> <example:Custom>Run</example:Custom> </Response> </Model> </Concept> </Siml> In the above SIML code we create a new namespace example using xmlns:prefix=”URI“ format. The URI in the above example is http://example.com/namespace#example Later we prefix our Custom element with the example: namespace. This is a perfectly valid example of using Namespaces in SIML. But how will our Adapter look like in Code ? It will look something like the following. public class CustomAdapter : IAdapter { public bool IsRecursive { get { return true; } } public XName TagName { get { XNamespace ns = \"http://example.com/namespace#example\"; return ns + \"Custom\"; } } public string Evaluate(Context parameter) { //Do Something return string.Empty; } } Adding an Adapter Once you’ve created an Adapter you should add it to the Adapters list of the Bot as shown below. simlBot.Adapters.Add(new CustomAdapter()); Note You should add an Adapter once during initialization. Duplicate adapter entries are not allowed by the interpreter. Interacting with a Custom adapter An added adapter can be used at run-time via SIML flawlessly. The output of the Adapter generated, after the Evaluate method is called, will get embedded within an SIML response. An example usage of the above Custom Adapter <Model> <Pattern>GET THE LOCATION OF *</Pattern> <Response>The location is <x:Custom><Match /></x:Custom></Response> </Model>"
  },
  "tutorial/bot/siml/dynamic-set.html": {
    "href": "tutorial/bot/siml/dynamic-set.html",
    "title": "Dynamic Sets - Syn Developer Network",
    "keywords": "Dynamic Sets All SIML Sets processed within a class that implements the ISet interface. Set Generation Some sets may need to be generated real-time for evaluation.To implement an SIML Set in code implement the ISet interface and implement its methods. Example class MySet : ISet { public string Name => \"Dogs\"; public HashSet<string> ValueList { get { var hashSet = new HashSet<string> { \"Pug\", \"Beagle\", \"Bulldog\", \"Poodle\", \"Chihuahua\" }; return hashSet; } } public IEnumerable<string> GetValues(string parameter = \"\") { return ValueList; } public bool Contains(string value, string parameter = \"\") { return ValueList.Contains(value); } } The above set provides a list of Dog breeds. Bot developer can now use the set [Dogs] in their SIML Pattern. <Model> <Pattern>I HAVE A [DOGS]</Pattern> <Response>I wish I had a <Match />.</Response> </Model> Parameterized Sets SIML Set specification allows parameterized Sets, by this we mean that a Set can be passed a single word as a paramter to evaluate the existence of words or phrases. By using parameters a Single set can check repective items within itself. Example class Pet : ISet { public string Name => \"Pet\"; public HashSet<string> Dog => new HashSet<string> { \"Pug\", \"Beagle\", \"Bulldog\", \"Poodle\", \"Chihuahua\" }; public HashSet<string> Bird => new HashSet<string> { \"greys\", \"budgies\", \"conures\", \"macaws\", \"quaker parrots\" }; public IEnumerable<string> GetValues(string parameter = \"\") { if (parameter.Equals(\"dog\", StringComparison.OrdinalIgnoreCase)) { return Dog; } if (parameter.Equals(\"bird\", StringComparison.OrdinalIgnoreCase)) { return Bird; } return new[] { string.Empty }; } public bool Contains(string value, string parameter = \"\") { if (parameter.Equals(\"dog\", StringComparison.OrdinalIgnoreCase)) { return Dog.Contains(value); } if (parameter.Equals(\"bird\", StringComparison.OrdinalIgnoreCase)) { return Bird.Contains(value); } return false; } } Once a parameterized Set is created, the Set has to be called with one parameter. <Model> <Pattern>I HAVE A [PET:DOG]</Pattern> <Response>I want a <Match /> for myself.</Response> </Model> Enumerations as Set The Sets property on SimlBot class allows adding enumerations as Sets. Example Bot.Sets.Add<DayOfWeek>(); Creates a new SIML Set [DayOfWeek] the value of which are taken from the enumeration. Example Bot.Sets.Add<DayOfWeek>(\"Week-Day\"); Creates a new SIML Set [Week-Day] ."
  },
  "tutorial/bot/siml/emotions.html": {
    "href": "tutorial/bot/siml/emotions.html",
    "title": "Working with Emotions - Syn Developer Network",
    "keywords": "Working with Emotions As SIML offers EmotionML to be used for emotions an emotion for the Bot or the User can be retrieved using the following code. In SIML the developer has the option of setting the Bot/User emotion but can only retrieve its ID and Name during a Chat session. Much of the action is meant to happen on the Avatar end. A developer may use the Emotion and its properties to help the Avatar ( if being used ) to display complex expressions. var botEmotion = chatResult.BotEmotion; var categories = botEmotion.Categories; var dimensions = botEmotion.Dimensions; var duration = botEmotion.Duration; var id = botEmotion.ID; If no emotions are specified in a response the emotion will stay with its previous value. Detecting Emotional change in Bot Emotion of the Bot can change at run-time. Changes in emotions can help developers map the Bot’s current emotion to any desired behavior including but not limited to dynamic facial expressions. Say for example your SIML code changes the emotion of your Bot from pleased to happy . <Model> <Pattern>I LIKE YOU</Pattern> <Response>You make me blush!<BotEmotion ID=\"Happy\"/></Response> </Model> You can detect these emotional changes and act accordingly by attaching an event handler to the Bot’s EmotionChanged event as shown below. var simlbot = new SimlBot(); simlbot.EmotionChanged += simlbot_EmotionChanged; Once the emotion of the Bot is changed the event is fired and the following code gets executed. The event argument is a EmotionChangeEventArgs class object which provides the Current emotion, the Previous emotion and the User associated with the concerned emotional state change void simlbot_EmotionChanged(object sender, EmotionChangedEventArgs e) { var emotion = e.Current; //Do something with the new Emotion } Detecting Emotional change in User Just like the change in the Bot’s emotion any emotional change of the User can also be detected via the EmotionChanged event of the User. The procedure is very similar to that of detecting emotional changes in the Bot. Usually an emotional change is triggered when an SIML code with the UserEmotion tag is evaluated as shown below. <Model> <Pattern>I am overjoyed</Pattern> <Response>That is very pleasing.<UserEmotion ID=\"very-happy\"/></Response> </Model> Example code to attach an event handler to the user’s EmotionChanged event. var simlbot = new SimlBot(); var mainUser = simlbot.MainUser; mainUser.EmotionChanged += mainUser_EmotionChanged;"
  },
  "tutorial/bot/siml/empty.html": {
    "href": "tutorial/bot/siml/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/bot/siml/index.html": {
    "href": "tutorial/bot/siml/index.html",
    "title": "Syn Bot - Syn Developer Network",
    "keywords": "Syn Bot Syn Bot Framework provides an official interpreter for SIML which has been written in pure C#. The class library is a .NET 4.5 Portable Class Library and can be used in any .NET, Mono or Xamarin Platform (Windows, Linux, Mac OS, Android, iOS and Windows Phone). The interpreter is backed by thousands of test cases and is therefore believed to be very robust. Version Current Version: 1.2.6 Previous Version: 1.2.5 System Requirements Syn.Bot runs on .NET Framework 4.5 and for development with Syn Bot we recommend using Visual Studio 2015 Community edition or above in Windows or Visual Studio Code (or MonoDevelop) in Linux environment. NuGet Type the following in NuGet Package Manager console to add Syn.Bot to your .NET project. PM> Install-Package Syn.Bot <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-portable.md\" --> Platforms Supported <!--END INCLUDE -->"
  },
  "tutorial/bot/siml/learning-memorizing.html": {
    "href": "tutorial/bot/siml/learning-memorizing.html",
    "title": "Learning and Memorizing - Syn Developer Network",
    "keywords": "Learning and Memorizing Every unit of knowledge in SIML is created using Models. So learning and memorizing almost always revolves around saving and loading SIML Models. Learning involves loading of Models and Concepts to the main Graph of the Bot while memorizing is a similar process but is tightly integrated to the user involved in triggering the Memorizing process. Learning and saving a Learned Model to disk Whenever a Learn element is used in a Response and that particular response gets activated the Learning event is fired by the Bot. The LearningEventArgs provides the SIML document (along with the User who triggered the event) that can be saved to disk and later be loaded into the Bot’s graph. An event handler can be attached to the Learning event of the Bot using the code below. var simlBot = new SimlBot(); simlBot.Learning += SimlBot_Learning; In the following code whenever the Learning event is fired we save it to a disk file under the name Learned.siml . The e.Document is the complete SIML code which includes the root SIML element along with the Concept and Models learned. void SimlBot_Learning(object sender, LearningEventArgs e) { var filePath = Path.Combine(Directory.GetCurrentDirectory(), \"Learned.siml\"); e.Document.Save(filePath); } For example if your SIML code looks like the following: <Siml> <Concept Name=\"Learning new Models\" Type=\"Public\"> <Model> <Pattern>A * IS A *</Pattern> <Response> <Learn> <Model> <Pattern>What is a <Process><Match /></Process></Pattern> <Response>It's a <Process><Match Index=\"2\" /></Process></Response> </Model> </Learn> Alright I will keep that in mind. </Response> </Model> </Concept> </Siml> And if the user says A car is a vehicle then the Document property would return an SIML document like the following: <Siml> <Concept Name=\"Learning new Models\" Type=\"Public\"> <Model> <Pattern>WHAT IS A CAR</Pattern> <Response>It's a vehicle</Response> </Model> </Concept> </Siml> Note Because in our Learn element we didn’t explicitly specify a Concept the Concept part gets derived from the Concept to which the Learn element belonged to. Now, Once you’ve saved the document to a disk file you can any time load the saved document back into the Bot’s graph (If you restart the Bot later on) by using the following code. All the code does is creates a filePath variable that points to the SIML file to be loaded and then creates an XDocument by using the XDocument.Load method and later adds the document to the Bot using the AddSiml method, the overload of which accepts an XElement. The XElement MUST be the root Siml element var simlBot = new SimlBot(); var filePath = Path.Combine(Directory.GetCurrentDirectory(), \"Learned.siml\"); simlBot.AddSiml(XDocument.Load(filePath).Root); Memorizing and saving Memorized Models to disk If a Bot is asked by a user to remember a fact the Bot updates an isolated Graph associated with that particular user. This graph is a separate Graph kept in memory just for interacting and understanding that particular user. A Memorizing event is fired whenever a user asks the bot to remember a fact and the graph associated with that user is updated. A MemorizingEventArgs is passed as an argument to the event handler which provides the user information and the SIML document that may be saved to disk. Saving a Memorized Model to disk is similar to saving a Learned Model to disk i.e. you’ll have to attach an event handler. var simlBot = new SimlBot(); simlBot.Memorizing += simlBot_Memorizing; void simlBot_Memorizing(object sender, MemorizingEventArgs e) { var filePath = Path.Combine(Directory.GetCurrentDirectory(), e.User.ID, \"Memorized.siml\"); e.Document.Save(filePath); } In the above code we save the Memorized document to a folder that has a name similar to the ID of the user. This helps us to load the right memorized Model to the right Graph. To load the Memorized document we’ll have to tell the Bot the User for which the document is being loaded. This can be done using an overload of the AddSiml method as shown below. var simlBot = new SimlBot(); var onlineUser = new BotUser(simlBot, \"X-15652C\"); var filePath = Path.Combine(Directory.GetCurrentDirectory(), onlineUser.ID, \"Memorized.siml\"); var memorizedDocument = XDocument.Load(filePath); simlBot.AddSiml(memorizedDocument,onlineUser); As you can see in the above code we add the SIML to the Bot but we also pass the User as an argument to tell the Bot that the document belongs to the specified user."
  },
  "tutorial/bot/siml/maps.html": {
    "href": "tutorial/bot/siml/maps.html",
    "title": "Working with Maps - Syn Developer Network",
    "keywords": "Working with Maps Syn Bot can dynamically create an XDocument file at any point during run-time to allow developers to store the current state of the Maps used by the Bot. Maps usually don’t change during run-time but at will a developer can update or change the values. To save Maps to disk you can use the GetDocument method available on the MapCollection as shown below. In the code below simlBot is a pre-defined SimlBot instance. Just get the XDocument using the GetDocument method and then save the document file as a string to any file with the .siml extension. var simlMapsDocument = simlBot.Maps.GetDocument(); File.WriteAllText(\"Maps.siml\", simlMapsDocument.ToString()); All (Functional or Volatile) types of MapItems declared explicitly by a developer are designed to just stay in memory and are not considered during the serialization process. However all external classes (including the in-built MapItem class ) that implement the IMapItem interface will be considered during serialization."
  },
  "tutorial/bot/siml/memory-optimization.html": {
    "href": "tutorial/bot/siml/memory-optimization.html",
    "title": "Memory Optimization - Syn Developer Network",
    "keywords": "Memory Optimization Syn Bot will by default try to store Examples and Vocabularies as part of it’s introspective nature. However if you intend to run Syn Bot in a memory constrained environment it is normally recommended that you turn off some memory intensive features as aforementioned. To do so before loading the SIML package or individual SIML files change the Configuration property to as follows. var simlBot = new SimlBot(); simlBot.Configuration.StoreVocabulary = false; simlBot.Configuration.StoreExamples = false; The second line disables the storage of unique vocabulary every-time a new token is found. This can greatly increase load time as large projects tend to have larger vocabulary. simlBot.Configuration.StoreVocabulary = false; The third line disables storage of known Atomic patterns including patterns specified within <Example> elements. simlBot.Configuration.StoreExamples = false;"
  },
  "tutorial/bot/siml/multi-thread.html": {
    "href": "tutorial/bot/siml/multi-thread.html",
    "title": "Multi-Threaded Responses - Syn Developer Network",
    "keywords": "Multi-Threaded Responses Developers may at times wish to call slow async operations when certain SIML Models are activated. For such scenarios we recommend working with SIML Events instead of making your app wait for responses to be generated. The following Wiki Adapter demonstrates how an Adapter can trigger SIML Events on task completion and pass relevant information in temporary var variables. Example Adapter class WikiAdapter: IAdapter { public XName TagName => SimlSpecification.Namespace.X + \"Wiki\"; public bool IsRecursive => true; public string Evaluate(Context context) { Task.Factory.StartNew(() => { var result = WikipediaApi.Search(context.Element.Value); context.User.Vars[\"Wiki-Query\"] = context.Element.Value; var dispatcher = //Some Dispatcher instance. if (dispatcher != null && !string.IsNullOrEmpty(extract)) { dispatcher.Invoke(() => { context.User.Vars[\"Wiki-Extract\"].Value = result; context.Bot.Raise(\"Wiki-Result\", context.User); }); } else { context.Bot.Raise(\"Wiki-No-Result\"); } }); return string.Empty; } } In the above code WikipediaApi is some static API class that retrieves first extract from an article that matches the query . Example SIML Code <Model> <Pattern>Search Wikipedia for *</Pattern> <Response> Searching Wikipedia for \"<Match/>\". <x:Wiki> <Match /> </x:Wiki> </Response> </Model> <Event> <Pattern>Wiki-Result</Pattern> <Response> <Var Get=\"Wiki-Extract\" /> </Response> </Event> <Event> <Pattern>WIKI-NO-RESULT</Pattern> <Response>Sorry, I couldn't find any Wikipedia article on \"<Var Get=\"Wiki-Query\" />\"</Response> </Event> User Input Search wikipedia for Random Access Memory. Bot Output (Immediate) Searching Wikipedia for \"Random Access Memory\". Event Output (Later) Random-access memory is a form of computer data storage. A random-access memory device allows data items to be read or written in almost the same amount ... Explanation Once the Wiki adapter it called it returns an empty response immediately. However, after an Extract from Wikipedia is obtained then Adapter triggers the event Wiki-Result . The value of the variable Wiki-Extract represents the extract received from Wikipedia API. If no results are obtained the Adapter triggers the event Wiki-No-Result ."
  },
  "tutorial/bot/siml/relaxed-model-suggestion.html": {
    "href": "tutorial/bot/siml/relaxed-model-suggestion.html",
    "title": "Relaxed Models and Suggestion System - Syn Developer Network",
    "keywords": "Relaxed Models and Suggestion System SIML now enables bot developers to use Best Match scheme in small SIML projects instead of strict pattern based triggers. This has been made possible due to the arrival of an in-built Search Engine interface made available in Syn.Bot framework version 1.2.5 and above. Instead of <Pattern> elements inside SIML Models, developers can now just add Example user inputs that will be processed as part of Search Results by the in-built Search Engine . For this Syn.Bot framework implements an intelligent Fuzzy Keyword Search algorithm that even permits usage of SIML Sets and Regular Expressions within Example items. Bot developers can also combine Pattern and Example items to create a hybrid SIML Model structure that can used to trigger responses when patterns are matched and to generate suggestions when high scoring Example items are found. Strict Model (based on Pattern) <Model> <Pattern> <Item>HOW ARE YOU</Item> <Item>HOW IS LIFE</Item> <Item>HOW * GOING</Item> </Pattern> <Response>I am doing great!</Response> </Model> Relaxed Model (based on Example) <Model> <Example> <Item>How are you?</Item> <Item>How is life?</Item> <Item>How is it going?</Item> </Example> <Response>I am doing great!</Response> </Model> Hybrid Model (based on both Pattern and Example) <Model> <Pattern> <Item>HOW * YOU</Item> <Item>HOW * LIFE</Item> <Item>HOW * IT GOING</Item> </Pattern> <Example> <Item>How are you?</Item> <Item>How is life?</Item> <Item>How is it going?</Item> </Example> <Response>I am fine.</Response> </Model> Tip Based on Bot project requirements, developer must carefully choose between these configurations of writing SIML Models. Auto stripping of invalid symbols If the SIML interpreter detects a symbol in an Example item that is not valid or allowed in the context, the symbol is automatically removed. However, when Suggestion values are being regenerated the interpreter properly assembles all the symbols back into the example. Suggestion The Suggestion adapter is a new experimental feature added to the draft SIML Specification. This adapter enables the Bot to use a custom or in-built Search Engine interface to find a list of best possible matches for user inputs using the value of Example tags. When necessary, developers can also replace the current SearchEngine instance used by SimlBot by a custom implementation of ISearchEngine interface. Annotation <Suggestion> Definition Gets a list of Example inputs matching the current user input by performing a Fuzzy Keyword Search on stored Examples. Attributes Optional: Count Returns the number of Example inputs matching the user input. ... Optional: Response Evaluates the <Response> element of the Model to which the highest scoring Example element belongs to. Occurrence One or more <Suggestion> elements MAY occur as children of <Response> element. Pattern Symbols in Example The following entities are part of a search query that the Search Engine processes. Entity Description Word Any word that may or may not exist in user input . ^Keyword A word that must be present in user input in both Soft and Hard search modes. [Set] A set whose value must be present in user input . @Regex A regular expression, the pattern of which must match in user input . Note [Set] and @Regex are part of wildcard capture process and their values can be acquired using the Match tag. Note All attributes and behaviours of Sets and Regular expressions within Pattern tag stay intact when used within Example tag. Other symbols like _, *, %, $, {}, () used in Pattern tag are invalid within the Example tag. Search Engine Algorithm The default implementation of ISearchEngine interface ( SearchEngine ) in Syn.Bot uses a Fuzzy Keyword Search algorithm that takes the following into consideration. If a word exists Order of words Existence of keywords, sets and regular expressions Number of unmatched words Tolerance - if a word is not found in user input but is part of Common-Words variable. Minimum score required for a search result to be accepted. Modes On top of that, the default search engine also has 2 modes of operation. Soft Mode (Default Search Mode) The minimum search result score is equal to 60% of the actual base value set. Words may or may not exist in query . However, existence of words do increase the Score . Order of words may or may not match the order of words in query . However, proper order increase the search result Score . Sets and Regular Expressions must exist in user query . Hard Mode The minimum search result score is equal to the base score value. All words except the list of words in Common-Words variable must exist. Order of words must match in user query . Any additional word in query is neglected. Sets and Regular Expressions must exist in user query . Reserved Variables The default SearchEngine uses the following reserved Bot variables to process a search result. Variable Name Description Search-Score The minimum score required by a search result to be accepted. Default value is 0.4 Search-Count The maximum number of search results to return. Default value is 5 Search-Mode Gets or sets the value of search mode to be used. Default value (if not set) is Soft . Common-Words List of common words in the language. The values of which determines the tolerance of missing words in Hard search mode. Note If any of the above variable is not explicitly specified within an SIML Knowledge-Base, the default search engine automatically assumes their default values. Creating a Suggestion system If Relaxed Models ared used in an SIML knowledge-base it is mandatory that a Suggestion system is explicitly implemented by the Bot developer. What is a Suggestion system? A Suggestion system is a mechanism by which the Search Engine of the interpreter is able to evaluate the Example items and return a list of results that closely match the user input. Simple implementation of Suggestion system <Model> <Pattern>*</Pattern> <Response> <Var Think:Set=\"Count\"> <Suggestion Get=\"Count\" /> </Var> <If Var=\"Count\" Value=\"0\">Please rephrase that for me.</If> <Else> <Suggestion Get=\"Response\" /> </Else> </Response> </Model> The above code first stores the number of suggestions found. If no suggestion is available the code returns Please rephrase that for me otherwise it gets the response from the highest scoring result. Suggestion Formatting In order to allow developers to format the suggestion string. The Examples property which is a instance of ExampleCollection uses ISuggestionFormatter interface that can be implemented to override the format of the suggestion string returned by the Suggestion adapter. The default implementation of ISuggestionFormatter provides results in the following format. If the suggestion contains just 1 result then the value of the result is returned as such. If 2 or more results exist in the suggestion the a index number is prefixed to each result. Example How are you? How is life? Example ISuggestionFormmater Implementation class SuggestionFormatter : ISuggestionFormatter { public string Format(Suggestion suggestion) { var toReturn = string.Empty; //If no suggestion then return an empty string. if (suggestion.Count == 0) return string.Empty; //If only 1 item is present just return its generated value. if (suggestion.Count == 1) return suggestion[0].Value; //If more than 1 suggestion then create format. var counter = 0; foreach (var item in suggestion) { counter++; //1. Item Value //2. Item Value toReturn += $\"{counter}. {item.Value}{Environment.NewLine}\"; } return toReturn.Trim(); } } Simple Suggestion <Model> <Pattern> <Item>HOW * YOU</Item> <Item>HOW * LIFE</Item> <Item>HOW * IT GOING</Item> </Pattern> <Example> <Item>How are you?</Item> <Item>How is life?</Item> <Item>How is it going?</Item> </Example> <Response> <Phrase> <Item>It is going just fine.</Item> <Item>Life is good.</Item> <Item>I am great. How are you?</Item> </Phrase> </Response> </Model> <Model> <Pattern>*</Pattern> <Response> <Var Think:Set=\"Count\"> <Suggestion Get=\"Count\" /> </Var> <If Var=\"Count\" Value=\"0\"> <Random> <Item>Could you please try rewording your query for me?</Item> <Item>Please rephrase that for me.</Item> <Item>Could you please try the same query with simpler words?</Item> <Item>Perhaps you could reword your question for me?</Item> <Item>Can you please repeat your question in a different way?</Item> </Random> </If> <ElseIf Var=\"Count\" Value=\"1\">Did you mean:..\"<Suggestion />\"</ElseIf> <Else>Perhaps you meant:... <Suggestion /></Else> </Response> </Model> Example 1 User Input How is life mate? Bot Output Perhaps you meant:... 1. How is life? 2. How is it going? Example 2 User Input Hows going? Bot Output Did you mean:..\"How is it going?\" Example 3 User Input bla bla Bot Output Please rephrase that for me. Complex Suggestion <Set Name=\"Family\">Peter, Ali, Ramesh</Set> <Model> <Pattern> <Item>HOW IS [FAMILY]</Item> <Item>WHAT IS UP WITH [FAMILY]</Item> <Item>HOW IS [FAMILY] DOING</Item> </Pattern> <Example> <Item>How is [Family]?</Item> <Item>What is up with [Family]?</Item> <Item>How is [Family] doing?</Item> </Example> <Response> <Match /> is fine.</Response> </Model> <Model> <Pattern>*</Pattern> <Response> <Var Think:Set=\"Count\"> <Suggestion Get=\"Count\" /> </Var> <If Var=\"Count\" Value=\"0\"> <Random> <Item>Could you please try rewording your query for me?</Item> <Item>Please rephrase that for me.</Item> <Item>Could you please try the same query with simpler words?</Item> <Item>Perhaps you could reword your question for me?</Item> <Item>Can you please repeat your question in a different way?</Item> </Random> </If> <ElseIf Var=\"Count\" Value=\"1\">Did you mean:..\"<Suggestion />\"</ElseIf> <Else>Perhaps you meant:... <Suggestion /></Else> </Response> </Model> Example User Input Is Peter fine? Bot Output Perhaps you meant:... 1. How is Peter? 2. What is up with Peter? Explanation As the set Family is specified within an Example item, The value Peter of the set Family is evaluated during example generation. Thereby creating a generated example that transforms How is [Family]? to How is Peter? and What is up with [Family]? to What is up with Peter? Response from Suggestion The Suggestion adapter can be used to evaluate the <Response> element for the highest scoring Example item or search result. This is done by adding a Get attribute and settings its value to Response . Relaxed Model <Model> <Example> <Item>How are you?</Item> <Item>How is life?</Item> <Item>How is it going?</Item> </Example> <Response>I am doing great!</Response> </Model> Suggestion System <Model> <Pattern>*</Pattern> <Response> <Var Think:Set=\"Count\"> <Suggestion Get=\"Count\" /> </Var> <If Var=\"Count\" Value=\"0\"> <Random> <Item>Could you please try rewording your query for me?</Item> <Item>Please rephrase that for me.</Item> <Item>Could you please try the same query with simpler words?</Item> <Item>Perhaps you could reword your question for me?</Item> <Item>Can you please repeat your question in a different way?</Item> </Random> </If> <Else> <Suggestion Get=\"Response\" /> </Else> </Response> </Model> User Input How are you mate? Bot Output I am doing great! Explanation When the user says How are you mate? the Example item How are you? is internally returned as a search result item with an approximate score of 0.875 making it the highest scoring search result. As the Get attribute with value Response is used in the Suggestion adapter, the Response element of the Model to which the Example item How are you? belonged to is evaluated and the generated response is returned by the adapter."
  },
  "tutorial/bot/siml/result.html": {
    "href": "tutorial/bot/siml/result.html",
    "title": "Result - Syn Developer Network",
    "keywords": "Result Precision From version 1.1.3 Syn Bot offers the precision property on the ChatResult returned when a ChatRequest is made. The Precision property uses the formula where i is the number of input sentences, mi is the total number of Precision-Tokens matched, Mi is the total number of Precision-Tokens in the Input. A Precision Token Important Graph tokens that require exact matches are considered as precision-tokens. Graph delimiters like <Pattern> , <Event> , <Previous> and <Concept> Scripts, Conditions and pattern wildcards $, %, * _ are not considered as Precision-tokens. What does a Precision-Token include ? Exact words Sets Regular Expressions Maps Choices (Keywords) Use-Cases Allows developers to create a log of all the patterns that yield less precise results. Gives a developer an idea of new Patterns that need to be added to the Bot’s knowledge base (KB). Make run-time changes to the Bot’s Graph-Master based on user input pattern Example Code var result = bot.Chat(\"how are you?\"); if (result.Precision < 0.5) { //Do Something } In the above code bot is any instance of the SimlBot class. ReadTime The ReadTime property of the ChatResult class provides an estimated time (in seconds) required to read the value of the BotMessage property. This property may be used when some GUI interaction requires removal of previously displayed output and to determine for how long some information should stay on the user screen. Example Code var result = bot.Chat(\"how are you?\"); var readTime = result.ReadTime; //Time required to read the BotMessage."
  },
  "tutorial/bot/siml/settings-variables.html": {
    "href": "tutorial/bot/siml/settings-variables.html",
    "title": "Settings and Variables - Syn Developer Network",
    "keywords": "Settings and Variables In SIML most of the Bot and User settings are defined using variables that may be loaded before the knowledge base is setup. It’s encouraged that setting of variables should be left to the SIML Chatbot developer but there can be occasions when a variable will have to set during run-time. Bot and User Settings If static Bot variables are changed during run-time there maybe some unexpected results in bot output. Its highly recommended that bot variables are only changed using SIML code and not Syn Bot. Example code to add a User variable at runtime botUser.Settings[\"favourite-movie\"].Add(\"Life is beautiful\"); Example code to set a User variable at runtime botUser.Settings[\"user-age\"].Value = \"31\"; Adding and setting a value to for a variable have different behaviors as SIML specification tells that a variable can have multiple values it’s important to use the Add function if the intention is to add a new value to an already existing list of values. A Value can be set to override a variable’s value ( if it exists ). Example code to set a Bot variable at runtime simlBot.Settings[\"while-limit\"].Value = \"500\"; Custom Functional Variables All variables implement the IVariable interface. This interface provides some of the key properties and methods that must be implemented by a class to ensure that the interaction with the Settings class is held properly. Suppose you wish to create a variable that can be used in SIML whose value may change depending on the state of some other object at run-time. You can either implement the IFunctionalVariable interface or derive your class from the abstract FunctionalVariable class. If all your variable does is get or set a computed value we recommend using the FunctionalVariable class. public class CultureNameVariable: FunctionalVariable { public override string Name { get { return \"Culture-Name\"; } } public override string Value { get { return CultureInfo.CurrentCulture.DisplayName; } set { /*Nothing to do here*/ } } } And add a new instance of the variable to the Bot settings at runtime or during bot initialization. simlBot.Settings.Add(new CultureNameVariable()); Note Functional variables are not considered during serialization. Variable value as Tuples SIML variables can contain arrays of values. Sometimes it’s very handy to be able to use the values as tuples. A simple example would be a list of countries along with their country codes. Though a Map may be suited at times for this scenario the following should serve as a good tuple example. <Variable Name=\"countries-codes\"> <Value>United States|USA</Value> <Value>Australia|AUS</Value> <Value>Russian|RUS</Value> <Value>Germany|DEU</Value> <Value>Poland|POL</Value> <Value>India|IND</Value> </Variable> The above declared variable can at run-time be extracted as tuples as shown below. var simlBot = new SimlBot(); var theVariable = simlBot.Settings[\"countries-codes-capitals\"]; var tuples= theVariable.GetTuples<string, string>(); foreach (var value in tuples) { var country = value.Item1; var code = value.Item2; //Performan some function on the above variables. } New tuple values can be added to a Variable at run-time using an Extension method as shown below. var simlBot = new SimlBot(); var theVariable = simlBot.Settings[\"countries-codes-capitals\"]; theVariable.Add(new Tuple<string,string>(\"Malta\",\"MLT\")); theVariable.Add(new Tuple<string, string>(\"France\", \"FRA\")); The above adds 2 more countries with their country codes making the above countries-codes variable change to the following <Variable Name=\"countries-codes\"> <Value>United States|USA</Value> <Value>Australia|AUS</Value> <Value>Russian|RUS</Value> <Value>Germany|DEU</Value> <Value>Poland|POL</Value> <Value>India|IND</Value> <Value>Malta|MLT</Value> <Value>France|FRA</Value> </Variable> Syn Bot offers support for tuples that can hold upto 5 items. Example <Variable Name=\"countries-codes\"> <Value>United States|USA|Washington D.C</Value> <Value>Australia|AUS|Canberra</Value> <Value>Russian|RUS|Moscow</Value> <Value>Germany|DEU|Berlin</Value> <Value>Poland|POL|Warsaw</Value> <Value>India|IND|New Delhi</Value> <Value>Malta|MLT|Valletta</Value> <Value>France|FRA|Paris</Value> </Variable> Applying SIML Settings to class Objects Every settings whether it be for the Bot, a Plugin or even a Bot User can be applied intelligently to class objects. Suppose you have a class called MyClass with 2 public properties with the name ProductName and ProductPrice. And your Bot settings has a Variable with the name ProductName with value 3D Printer and another variable with the name ProductPrice with value 1500. public class MyClass { public string ProductName { get; set; } public int ProductPrice { get; set; } } To change the value of your class object MyClass you can select the Settings and call the function ApplyToProperties by passing the class object as an argument. simlBot.Settings.ApplyToProperties(myClass); The Settings class can detect the Type of your class object’s property and do the required conversion at run-time. Settings can be applied to the following types. string int bool double Collection This feature allows class objects and data context to be initialized using the variables defined in SIML. Detecting Variable value changes Variable class provides the Changed event to detect changes in the value of the variable. Hence, to detect a variable value change you can add an event handler to the Changed event. var myVariable = bot.Settings[\"my-variable\"]; myVariable.Changed += (sender, eventArgs) => { //Do something }; Saving Settings to a File It wouldn’t be fair if the changes made to the internal variables of a Bot reside only in the computer’s memory. Saving them to disk allows developers to retain the state of a Bot and later load the state back into the Bot’s memory. For this the SIML interpreter provides you with the GetDocument() method. When the function is called all the existing variables of the Bot are analysed and an SIML document is generated. All variables that implement IVariable interface are included within the generated document and others that implement IFunctionalVariable or derive from the abstract FunctionVariable class are disregarded. //simlBot is your Bot instance var settings = simlBot.Settings.GetDocument(); settings.Save(\"BotSettings.siml\");"
  },
  "tutorial/bot/siml/siml-package.html": {
    "href": "tutorial/bot/siml/siml-package.html",
    "title": "SIML Knowledge-Base Package - Syn Developer Network",
    "keywords": "SIML Knowledge-Base Package The SIML Package system has been developed to carefully arrange SIML Document elements before being loaded into SimlBot instance. SIML Packages are the recommended way of loading a knowledge-base project in to SimlBot . Why an SIML Package? Arranges SIML elements in their recommended order of evaluation. Ensures that critical bot and user settings are loaded first into the interpreter. Ensures Bot configurations are applied before parsing of SIML Concepts takes place. Performs SIML Document clean up by removing unnecessary characters and whitespaces. Highly compresses large SIML Projects to their optimum size. Decreases the loading time of an SIML Knowledge-Base. Creating a Package using code An SIML Package is a collection of properly arranged SIML elements in their compressed format. To create an SIML package its important that you load SIML files as XElements and then use the PackageManager to convert the elements into an SIML package string. var elementList = new List(); foreach (var simlFile in Directory.GetFiles(@\"C:\\Bot\", \"*.siml\")) { var simlElement = XElement.Load(simlFile); elementList.Add(simlElement); } var packageString = simlBot.PackageManager.ConvertToPackage(elementList); File.WriteAllText(@\"C:\\BotMySimlPackage.simlpk\", packageString); Note This is exactly the function that is called by Syn Bot Studio to create an SIML Package file. Example using Linq var elementList = Directory.GetFiles(@\"C:\\Bot\", \"*.siml\").Select(XElement.Load).ToList(); var packageString = simlBot.PackageManager.ConvertToPackage(elementList); File.WriteAllText(@\"C:\\BotMySimlPackage.simlpk\", packageString); Note You should always save an SIML Package string into a file that has the extension .SimlPk ."
  },
  "tutorial/bot/siml/tutorial.html": {
    "href": "tutorial/bot/siml/tutorial.html",
    "title": "Tutorial - Syn Developer Network",
    "keywords": "Tutorial Any feature of Syn.Bot not discussed here may be in its experimental stage. Adding SIML Bot Library to your Project You can use the Package Manager Console in Visual Studio and type PM> Install-Package Syn.Bot and the library will be downloaded and referenced automatically. The same can be done when using MonoDevelop on Linux or Mac using the Manage NuGet Package option. Syn.Bot is updated on a regular basis we recommend using PM> Update-Package Syn.Bot command in NuGet console to check for updates. Add the using statement using Syn.Bot.Siml; Creating a new instance of SimlBot To create a simple Syn Bot object use the following code. var simlBot= new SimlBot(); Creating a new instance of BotUser There are multiple ways of creating a user for a Bot. The important part is that a unique ID should be allocated to all new users. If you do not wish to handle creation of Id then you may initialize a bot user using the following code. var botUser = simlBot.CreateUser(); Or var botUser = new BotUser(simlBot,\"SomeID\"); A bot user is a user that interacts with a particular bot. If an ID is not specified the User will receive a new ID from the Bot. This ID is a GUID and has the least collision rate. Loading SIML Files into the Bot There are multiple ways of adding SIML files into the Bot’s knowledge base. Adding SIML files as strings Adding SIML files as ”XDocument”s Adding Multiple SIML files as List of ”XDocument”s Directly loading an SIML Package as string. The first 3 options require that the function Load() is called after the files have been added. This is essential because in SIML all the settings files have to loaded prior to the files containing Concepts. If you do not use the Load() function then the Bot will automatically call this function when it receives its first chat request. This behaviour may not be intended as it will make the first interaction slower. Every SIML file ends with the extension .Siml and an SIML Package file ends with the extension .SimlPk . Example code to load SIML from a package file var packageString = File.ReadAllText(@\"C:BotMyBot.simlpk\"); simlBot.PackageManager.LoadFromString(packageString); ''Example code to load multiple files'' foreach (var simlFile in Directory.GetFiles(@\"C:\\Bot\", \"*.siml\")) { var fileString = File.ReadAllText(simlFile); simlBot.AddSiml(fileString); } In the example above we call the function Load() after we have added the desired files. Example Code to load SIML files as XDocument foreach (var simlFile in Directory.GetFiles(@\"C:\\Bot\", \"*.siml\")) { var simlDocument= XDocument.Load(simlFile); simlBot.AddSiml(simlDocument); } Note If file editing is not required after your Bot has been deployed its highly recommended that you initialize your Bot using an SIML Package instead of SIML files. Interacting with the Bot Every interaction between the User and Bot is done by creating a Chat Request . Example code to create a Chat Request var chatRequest = new ChatRequest(\"how are you\", RequestType.UserMessage, botUser); In SIML 1.0 the chat request should always be of the type UserMessage . Other types have been reserved for future implementations. Once a chat request is created the request can then be sent to the Bot. A ChatRequest sent to a Bot will yield a ChatResult which is the final processed response from the Bot. var chatResult = simlBot.Chat(chatRequest); var botMessage = chatResult.BotMessage; In the above the botMessage variable contains the textual reply the Bot generated for the chat request it received. To check if the result was successful i.e. the Bot could find a response for the chat request use the Success property, which yields True if a response was generated. This property is NOT set to True if the response is the default response the Bot is meant to send when no response is generated. Example if (chatResult.Success) { //Do Something } A response in SIML may contain a Hint . A Hint is the next input the Bot expects from the current user. To get the Hint for the current response use the Hint property. This property yields an empty string if no Hint is specified for a response. Example var hint = chatResult.Hint; A ChatResult has the following properties: BotEmotion – Emotion of the Bot UserEmotion – Emotion of the User Success – Determines if a response was generated successfully Stack – Stack frames generated for the response Stats – Statistics regarding the response generated Hint – Any Hint specified in the response LastLabel – Label that was attached previously LastResponse – Response that was generated previously BotMessage – Current textual message from the Bot Using Stack A ChatResult contains a stack that gives information as to where the response came from and what all redirections it went through before the final output was generated. A developer may use this information to debug the SIML code whenever and wherever necessary. Example usage of Stack Frames var chatRequest = new ChatRequest(\"how are you\", RequestType.UserMessage, botUser); var chatResult = simlBot.Chat(chatRequest); foreach (var frame in chatResult.Stack) { DisplayInGrid(frame); } DisplayInGrid can be any function defined by the developer that projects the stack information to the user. Getting Bot Stats Syn Bot will internally monitor and store its statistics. Stats are stored not just for retrieval purpose but for run-time modifications that the Bot makes to improve its speed and responses. To get the Bot stats use the Stats property available for the Bot. Though a number of stats are available the following shows a few properties that are updated from time to time. var interactions = simlBot.Stats.Interactions; var idleTime = simlBot.Stats.IdleTime; var loadTime = simlBot.Stats.LoadTime; var mappingTime = simlBot.Stats.MappingTime; //..... Most of these Stat properties are used by Syn Bot Studio to generate the Stats Chart. Main Bot Instance SimlBot class comes with a static Instance property that can be used to share an instance of SimlBot with other components. The Instance property during its first Get call automatically creates a new instance of SimlBot and returns it. Developers can even Set the Instance property with their own instance of SimlBot by first calling the Set property and later using the Get property throughout development. Example var sharedBot = SimlBot.Instance; //Because Get is called before Set - A new SimlBot instance gets created. Example var myBot = new SimlBot(); SimlBot.Main = myBot; var sharedBot = SimlBot.Instance; //SimlBot.Instance and myBot are now the same instance of SimlBot class. Collecting Logs Logs generated by the Bot are not stored internally ( to reduce memory usage ) but an event is fired whenever a log is generated. The event argument however contains everything that was added to be logged. To catch all the logs generated by the Bot an event handler has to be added to the LogAdded event. Example SimlBot.Logger.LogReceived+= Logger_LogAdded; Example event handler void Logger_LogAdded(object sender, LogReceivedEventArgs e) { //Do Something here } Getting Examples after a Package is Loaded Every atomic pattern in SIML gets stored as an example within the Bot whenever a package or an SIML document, consisting of Concepts is loaded into the Bot’s graph. These examples can be used to give the user a hint of what all atomic patterns have been pre-defined or can also be used to auto-complete any input interface. For complex patterns a Bot developer can explicitly specify an example using the SIML <Example> element. The inner content of which is taken as the value for the Example to be stored. Duplicate entries are automatically discarded to maintain optimum memory usage. Explicit Example declaration <Model> <Pattern>Play (music|song)</Pattern> <Example>Play music</Example> <Response>Playing music...</Response> </Model> To extract the list of all the Examples stored by the Bot you can make use of the Examples property as shown below. var simlbBot= new SimlBot(); var storedExamples = simlBot.Examples; foreach (var example in storedExamples) { //Do something } Cache Manager As Syn Bot is a Portable Class Library it can be assumed that the library maybe used in an environment that has some memory limitations. Under such circumstances memory management can be done by using the ICacheManager interface. Everytime the Bot is about to save some textual data within a variable it requests the Cache Manager to provide a unique key for the textual data and saves the key instead. The textual data or string can be stored anywhere by the Cache Manager, it can be within a database, a file, some persistent storage mechanism or any other location but not the machine’s Random Access Memory. Syn Bot ( in Nuget ) comes with its own ICacheManager implementation class that prevents memory from being allocated to duplicate entries. 2 Important functions that play a major role in the ICacheManager interface are: GetKey GetValue GetKey function is called by the Bot whenever the Bot tries to save some textual data. GetValue function is called ( on a regular basis ) when the Bot tries to retrieve the actual textual data that was previously saved. It’s upto the developer as to how a Key is generated for a string and where the string is finally saved. It’s recommend that the GetValue function should always be an O(1) operation otherwise the performance of the Bot will be highly impacted. Timeouts When Syn Bot is integrated with an application its important that the developer takes care of how much time is given to each ChatRequest . This is important as extremely recursive requests MAY require both CPU Time Slice and Memory. By default a ”ChatRequest” is timedout if the Bot is not able to generate a response within 60 seconds. This time out value can be changed by setting up the Timeout variable for the Bot. This can be done internally using the Settings property of the Bot or by editing the element within in your SIML project. The value of the Value attribute above indicates a value in milliseconds before a ChatRequest is timed out. A value of 3000 means that the ChatRequest is supposed to be timed out after 3 Seconds . Certain situations where timeouts play an important role SIML Element stuck in an infinite loop ChatRequest exceeds its maximum request length rendering the Bot unstable."
  },
  "tutorial/bot-assistant/index.html": {
    "href": "tutorial/bot-assistant/index.html",
    "title": "Syn Bot Assistant - Syn Developer Network",
    "keywords": "Syn Bot Assistant The Syn.Bot.Assistant library has been designed for rapid bot deployment on ASP.NET websites and Telegram. The library provides tailored assistant classes that can be used deploy bot in minutes. At the moment the library relies on .NET Framework version 4.5 and supports Windows and Linux environments. NuGet Package PM>Install-Package Syn.Bot.Assistant <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-desktop.md\" --> Platforms Supported Requirements .NET Framework on Windows environment. Mono on Mac OS or Linux environment. <!--END INCLUDE -->"
  },
  "tutorial/bot-assistant/telegram-assistant.html": {
    "href": "tutorial/bot-assistant/telegram-assistant.html",
    "title": "Telegram Assistant - Syn Developer Network",
    "keywords": "Telegram Assistant Syn.Bot.Assistant library comes with a TelegramAssistant class that is tailored for rapid Telegram Bot deployment based on SIML and Syn.Bot framework. The class takes care of the following. Automated User name part extractions (Name, First Name, Last Name and Username) Handling of messages received by Telegram Bot by directly generating responses from the SIML knowledge-base. Service Timer - adds support for internal bot timer and Late adapter. Handling of callback queries. Auto construction of Telegram's Inline Keyboard when formatted Hint value is received. Adds custom implementation of ISuggestionFormatter for Example processing within Hint element. Support for Parse Mode and Keyboard Alignment selection. Overriden User Variables Variable Name Description Name or FirstName Returns the first name of Telegram user. LastName Gets the last name of the Telegram user. Username Gets the User ID of the Telegram user. Deploying a Telegram Bot Requirements .NET Framework 4.5 (on Windows 7 or 8) Visual Studio 2015 Community Edition or above Syn Bot Studio 1.54 or above Tip As an alternative you may also download the Sample Telegram Console application project from our GitHub repository. As the backend knowledge-base processing part of a Bot is usually held in a server environment, we will create a Console application to keep memory usage to its bare minimum. In this tutorial we'll use Visual Studio 2015 Community Edition to create a Console C# project that will allow us to create an SIML based server which would power a Telegram Bot. Start Visual Studio Click on File , select New and then choose Project Under Visual C# select Console Application . Name your project MyTelegramBot and choose OK Once the project has been successfully created. On the toolbar select Tools , point to NuGet Package Manager and select Package Manager Console . Type Install-Package Syn.Bot.Assistant and press Enter The Syn.Bot.Assistant library along with its dependencies will now be referenced in your project. SIML Knowledge-Base For the sake of this tutorial we'll use the pre-built knowledge-base of Maya Bot which is a telegram Inline Keyboard based SIML Knowledge-Base. Download the Maya Web Assistant Knowledge-Base from GitHub. After the repository has been downloaded, launch Syn Bot Studio . Click on File , select Project and then choose Open . Browse to the downloaded repository and select the SIML project file. After the project is loaded on the toolbar click on Project and select Export to Package . Name the file Bot , browse to the bin/debug directory of your Console application and select Save . The SIML knowledge-base package will now be saved as Bot.simlpk . <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/telegram-bot.md\" --> Creating a Telegram Bot To obtain a Telegram Bot Access Token Download Telegram to your Desktop or Mobile from Telegram Search for BotFather and then click on Start . Type /newbot Enter a display name for your bot. In our example we've used Maya After you've specified the bot name, enter a unique Bot name. You can use _ as separators. For this tutorial we've used the name My_VA_Bot as the Bot name. After that you'll be presented with the HTTP Access Token. Copy the HTTP API access token as shown below. You have now successfully created a Telegram Bot and acquired its Access Token . <!--END INCLUDE --> Code Now switch to the Visual Studio project and type the following within the Main static method. var telegramAssistant = new TelegramAssistant(\"TELEGRAM_BOT_ACCESS_TOKEN\"); telegramAssistant.Bot.PackageManager.LoadFromString(File.ReadAllText(\"Bot.simlpk\")); //Start receiving user messages. telegramAssistant.Client.StartReceiving(); Console.WriteLine($\"Your Telegram Bot is now Online: {DateTime.Now}\"); Console.ReadLine(); //Stop receiving user messages. telegramAssistant.Client.StopReceiving(); Replace TELEGRAM_BOT_ACCESS_TOKEN with the Telegram Bot Access Token . To start the Console application press F5 . Your SIML based Telegram Bot is now online. You may now chat with your bot on Telegram. Performance The TelegramAssistant is designed to be launched in a Server (either Windows or Linux) environment where the internet speed is in Mbps or Gbps . During local testing if your computer's internet speed is slow it would directly impact the response time of your Telegram Bot."
  },
  "tutorial/bot-assistant/web-assistant.html": {
    "href": "tutorial/bot-assistant/web-assistant.html",
    "title": "Web Assistant - Syn Developer Network",
    "keywords": "Web Assistant Using the WebAssistant class in Syn.Bot.Assistant library developers can easily add a Virtual Chat agent to their ASP.NET websites. This is achieved by using the class library Syn.Bot.Assistant in your project and requires that you are working on a ASP.NET website that targets .NET Framework 4.5 or above. The best part of using the library is that it automatically provides a service URL that can be used to fetch the CSS, JavaScript and HTML elements for displaying and interacting with your Virtual Chat Agent dynamically. How it works (Simple Hack) A web form is added to your ASP website project and all the HTML elements are removed from the .aspx page except for the first line that defines CodeFile to be used. The name of this aspx page is set to ChatService.aspx and will be used as a service URL to interact with the underlying Chatbot which is powered by SIML. The same page will also serve as the URL to fetch the CSS, JavaScript and HTML elements to be included in your web page once its loaded. Inside the CodeFile we define a static constructor that will initialize the default values for the Chat agent to use. Finally in the page load constructor we write 1 line of code that passes the Request and Response objects to the ChatAgent which in turn evaluates the URL variables and returns the appropriate response with the proper header. Requirements ASP.NET Website targeting .NET Framework 4.5 or above Your website should not be running on a shared-hosting basis. 32MB or more RAM available on server side Getting Started Before you begin download the Automated-Live-Chat-Demo project files from GitHub . Throughout this tutorial we will assume that you are working on an ASP.NET project using Visual Studio 2013 or above Importing the NuGet Package Click on Tools-> NuGet Package Manager -> Package Manager Console and type Install-Package Syn.Bot.Assistant Once done the required class library along with Syn.Bot portable class library will be added as a reference to your project. Creating the Service URL (ChatService.aspx) Now right click on your project Add->New Item… and select Web Form. Name your web form “ChatService.aspx“. This page will now serve as the service URL. Ofcourse you can create an asmx service as well but for demonstration we will stick with this simple hack. Double click on the ChatService.aspx item in the solution explorer and remove every line except the first line which should look something like the following <%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"ChatService.aspx.cs\" Inherits=\"Automated_Live_Chat_Demo.ChatService\" %> Now right click on ChatService.aspx and paste the following code: using System; using System.Web; using Syn.Bot.Assistant.Web; namespace YOUR_PROJECT_NAMESPACE { public partial class ChatService : System.Web.UI.Page { private static readonly WebAssistant WebAssistant; static ChatService() { var websiteUrl = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority); WebAssistant = new WebAssistant { ServiceUrl = websiteUrl + \"/ChatService.aspx\", ResourceUrl = websiteUrl + \"/Assistant\", Name = \"Maya\", Title = \"Syn Web Assistant\", Intro = \"Hi I am Maya, I am here to help you with your questions.\", InputText = \"What can I help you with?\", Footer = \"Syn\", FooterLink = \"http://www.syn.co.in\", RestartId = \"restart\", PackageFileName = \"Package.txt\" }; } protected void Page_Load(object sender, EventArgs e) { WebAssistant.Process(Request, Response); } } } In the above code replace YOUR_PROJECT_NAMESPACE and YOUR_WEBSITE_URL with their respective values. You can also change the properties like Name, Footer, Title etc to suit your needs as the aforementioned values are just for clarification. Placing the required files Now that you have created your service URL its time that you placed the required images and the package in the right directory. To do so right click on your project Add->New Folder and name the folder Assistant . Now that you have you created the Assistant folder add the image files found in the Demo Project by right clicking on the Assistant folder you created and selecting Add->Existing Item… Once added we will move to adding a knowledge base to our Chat Agent using Chatbot Studio. If you haven’t installed Syn Chatbot Studio you can download it from here. Moreover a quick start tutorial on writing an SIML knowledge base using Chatbot Studio can be found here (Assuming that you have written your first SIML Bot using Chatbot Studio) he next step is to export your SIML Project to an SIML Package. To do so click Project->Export to Package in Chatbot Studio and type the file name as Package.txt ( With the double quotes to ensure that the file extension will be .Txt and not .SimlPk ). The reason why the file should have the .txt extension and not the default .simlpk extension is because the ChatService.aspx page will load the file from URL and not the project directory. Finalizing Now that we have added the ChatService.aspx along with its code and have added all the files required in the right directory the last step is to add a simple JavaScript to the master page of your ASP Website Project so that the assistant is visible on every page of your website. To do so paste the following code just before the </form> tag in your master page. <script type=\"text/javascript\"> (function () { var scriptElement = document.createElement('script'); scriptElement.type = 'text/javascript'; scriptElement.async = true; scriptElement.src = 'http://YOUR_WEBSITE_URL/ChatService.aspx?Get=Script'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(scriptElement); })(); </script> In the above code replace YOUR_WEBSITE_URL with its respective value say www.example.com Tips and Tricks You can replace the Avatar with your own custom avatar but make sure that you use the .png file format if your wish to have a transparent background and also use the exact resolution as used by the avatar images in the demo project. You can map .simlpk extension in IIS to text/plain if you do not wish to rename the file extension to .txt every time you upload a new SIML Package to the Assistant folder. If you add an updated SIML Package to the Assistant folder, use the URL http://YOUR_WEBSITE_URL/ChatService.aspx?Get=restart to restart the Chat Agent with its new knowledge base."
  },
  "tutorial/bot-studio/analysis.html": {
    "href": "tutorial/bot-studio/analysis.html",
    "title": "Analysis - Syn Developer Network",
    "keywords": "Analysis SIML Bot has an internal Analyzer that analyses SIML code and checks for some common errors developers make while writing complex Chatbots. In our case if you go ahead and click on Project->Analyze Project you will see that no information is produced this means that your project is clean which is obvious as we haven’t started writing any SIML code yet. Analysis tab displays the severity, the target and source file and the lines. It’s upto the developer to pay heed to the severity of an analysis. This is because sometimes you may use custom Tags in your SIML code however the analyzer will not be able to recognize these tags and may warn you to check them."
  },
  "tutorial/bot-studio/creating-project.html": {
    "href": "tutorial/bot-studio/creating-project.html",
    "title": "Creating an SIML Project - Syn Developer Network",
    "keywords": "Creating an SIML Project Starting a new project is simple when it comes to Bot Studio. Just click on File-> New-> Project . You will have to fill in the details as shown in the image below. For this tutorial we recommend using Syn Web Assistant template as it will help you understand the key features of SIML without having to worry about the complex stuff. To start from scratch use any Minimum template. Template selection is an essential part of creating an SIML Project as it copies the required files to your project directory without you having to do it manually. Once you have filled the details required click on the Create Project button. Bot Studio will now allow you to select the location for storing all of your project files. Its important that you select a safe place like My Documents or a separate drive. Do make sure that the location has write-access to allow Bot Studio to save the content of your files to disk. Hello Assistant Once the project is created you will notice that on the right hand side there’s the Files Explorer. All files in your Project can be accessed by clicking on an item to the right. Click on the Hello Assistant file. The file contains some description as XML comments. Delete the comments once you have read them. The default Concept for the file is Hello Assistant, you are free to change the concept but for the moment click on the Console tab and type hello assistant . You will see that the Bot replies Hello User! . Yes you’ve now seen the output box. It’s a pretty simple box that just displays the message received from the Bot in its textual format. Below the output box is the Stack Grid which gives you and idea as to where the response came from. The Stack keeps track of all the Models that were processed before the final response was generated. You’ll probably use the Stack to retrieve information about the SIML Response element and the role the Goto statements play at run-time. This feature might come extremely handy especially when your bots get complicated overtime which is inevitable."
  },
  "tutorial/bot-studio/empty.html": {
    "href": "tutorial/bot-studio/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/bot-studio/file-explorer.html": {
    "href": "tutorial/bot-studio/file-explorer.html",
    "title": "File Explorer - Syn Developer Network",
    "keywords": "File Explorer A Project is a collection of important SIML files. Their order is important for SIML Bot as the SIML Bot requires that the Settings files are loaded before SIML files with Concepts in them. Settings Folder On the right hand-side under the File Explorer you will see the Settings Folder ( we call it Folder because of the project structure ). Click on the Settings folder to expand the list. Under it you will find the following files Bot-Settings EmotionML Filters Maps Repetition Pattern Reductions Random Responses Regular Expressions Scripts Sets Splitters User-Settings All of the above files play an important structural role for SIML Bot creation. If you do not need any of the settings file DO NOT DELETE THE FILE instead replace the entire content of the file with this will tell the SIML Interpretor to just ignore the file. Bot-Settings This file holds all static information that will be used to configure the Bot. For simplicity we have removed the XML Comments in the files but whenever you create a new project you will see detailed XML comments giving you information about the File and important XML elements used within the file. In this case the Bot-Settings file shows us some key variables and their values stored with BotSettings element. The variables declared in this file should NOT be changed during runtime as they are meant to be static in nature which means that their values are considered only once. To check how Bot variables are used click on ”’Hello Assistant”’ file and add in the following code. SIML <Model> <Pattern>WHAT IS YOUR NAME</Pattern> <Response>My name is <Bot Get=\"name\"/></Response> </Model> Now press Ctrl+R to refresh the project. Everytime you make changes to any SIML file you should Refresh the project for the changes to take effect. Now click on the Console tab and type what is your Name ? the bot will respond My name is Sarah . The name Sarah was retrieved using the Bot variable defined in the Bot-Settings file EmotionML One of the many important features of SIML Bot is the internal EmotionML parser which can parse EmotionML elements and set values for developers to use. Unlike many of the existing Chatbot architectures that think emotions can be defined as a single state of mind EmotionML brings in the true essence of details required to simulate emotions. The EmotionML file consists of some predefined emotions with their values and dimensions. To set emotion for the Bot or the user you can use the BotEmotion and UserEmotion tags. Filter This file consists of Filters that are used to filter out or replace parts or words from user inputs and bot outputs. You will see Filter elements consisting of Text, Word and Regex tags each of which have a different normalization behaviour. To add your own filter, say you wish to replace the word coz with because the code may look like the following. <Filter Value=\"because\"> <Word>coz</Word> <Word>bcoz</Word> </Filter> A typical Filter file may look like the following with lots of filters in it. Since filtration requires that individual words and characters are studied there can be a performance penalty if lots of filters are used. The best way to create a specific filter is by studying how your users actually interact with your Bot and then creating necessary filters. Splitters Splitting a user message into multiple inputs isn’t an easy task. The developer has to consider a lot of things before simply deciding to split the sentence using (Period) or (Comma) but whatever the idea of splitting be you should always keep them inside this file and, if possible, create an XML comment stating why you have decided to split the sentence using certain characters, words or regular expressions Maps The Maps file stores all sorts of mapping that will be required to transform a fragment of text from one set into an element of another. You will probably not need to change anything within file as Synthetic Intelligence Network will create them for you and upload them immediately as templates on our GitHub repository. Pattern Reductions Under this SIML file you can store recurring patterns and given them a special name using the hashtag convention. For example you can define multiple patterns for the sentence what is your name? and give it a unique name #BotName . This simplifies pattern usage and avoids redundancy to a great extent. Random Responses Sometimes the developer spends hours in total writing the same response for different patterns. The Random Responses file is meant to store repetitive random responses and giving them a special id so whenever you are to repeat yourself with a random response you could just use the one previously saved within this file. Regular Expressions You will definitely come across a situation where SETS will no longer be enough to capture a particular word or sentence. SIML handles regular expressions flawlessly and as Regular Expressions are available globally the file Regular Expressions is used to contain them under the same shelter. Scripts SIML Bot 1.0 supports JavaScript as its main scripting language ( discussions are already being made regarding more scripting engine integration ). The Scripts file contains Global scripts i.e. scripts that are available throughout the bot session. As more scripting engines are to be integrated its important that you define your scripts indicating what language the script is written in. Example <Script Type=\"javascript\"> function square(num){ return num*num; } </Script> Sets A Set is a powerful entity it consists of words and phrases that are addressed using a unique name much like a color can have values like Red, Green, Blue and so on. Sets in SIML are fast and greedy. By greedy what is meant is that Sets will try to match maximum number of words/tokens possible. Example: if your set has 2 values say United States and United States of America the set will match the latter. Take a look at the image below to get an idea as to how to declare Sets. User-Settings The User-Settings file stores values for variable names that will be used to initialize variables for every new user that interacts with the Bot. Once the default variables and their values are loaded for a user any changes made to the variable will affect that particular user as every user is given their own instance of variables."
  },
  "tutorial/bot-studio/graph-explorer.html": {
    "href": "tutorial/bot-studio/graph-explorer.html",
    "title": "Graph Explorer - Syn Developer Network",
    "keywords": "Graph Explorer If you wish to see the entire Graph System of your Bot you can do so by clicking on PROJECT – > Graph Explorer . When you generate the Graph the Studio may take a while to generate the first node. Once the pattern node is rendered click on the node to expand it. Once the pattern node has been expanded you can select any individual node and click on it to expand every descendent node. Which implies that you only need to expand a single node to see its entire tree structure. The above graph has all the first level nodes expanded. The children or descendants of these nodes (invisible) can be expanded by double clicking on any desired node."
  },
  "tutorial/bot-studio/index.html": {
    "href": "tutorial/bot-studio/index.html",
    "title": "Syn Bot Studio - Syn Developer Network",
    "keywords": "Syn Bot Studio Syn Bot Studio is an intelligent and beautiful IDE for SIML Bot development. Bot Studio offers all the essential features a developer would want while developing an intelligent Bot. With 100% compliance with SIML 1.0 Syn Bot Studio is truly a complete SIML development tool that takes off the burden of re-writing codes when SIML specifications are updated. With Code Analysis, Regular Expression Tester, Script Evaluator and AIML to SIML Converter Bot Studio is the only development tool you’ll need. Version Syn Bot Studio is currently in 1.54 Beta stage. Once we have thoroughly tested the Bot Studio and have corrected any and all known bugs reported by users Syn Bot Studio will be republished as a stable product. If you find any Bug please do help us improve by going to Syn Forum and under the section Syn Bot Studio post information regarding the bug you’ve found. System Requirements Windows 7 or Above .Net Framework 4.5 or Above 1 GB RAM 2 GHz Processor 250 MB of Disk-space 100 MB to 1 GB Free Disk-space for Corporate/Large Projects <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-windows.md\" --> Platforms Supported Windows 7, Windows 8, Windows 8.1 and Windows 10 <!--END INCLUDE -->"
  },
  "tutorial/bot-studio/log.html": {
    "href": "tutorial/bot-studio/log.html",
    "title": "Log - Syn Developer Network",
    "keywords": "Log The Logs Grid display internal information that stored by SIML Bot. Everytime a Chat Request is made some sort of logs will be generated and in our case if we say Hello Assistant you will see a log giving information about what was replied to the user. Besides the information regarding the interaction the Logs grid will also display errors, warnings and notifications. You will find the Log Grid very helpful when dealing with scripted-responses as it may help you in debugging the Script. Tip Always keep a check on the log when dealing with Scripts. A faulty script can slow down the performance of your bot by 100s of milliseconds."
  },
  "tutorial/bot-studio/scripting.html": {
    "href": "tutorial/bot-studio/scripting.html",
    "title": "Scripting - Syn Developer Network",
    "keywords": "Scripting JavaScript is the default scripting language in SIML and Syn Bot. Syn Bot Studio uses the same scripting engine present in the Interpreter to ensure that the results are the same during runtime. To test your JavaScripts before adding them in your project you can make use of the Script Evaluator. To do so click TOOLS -> Script Evaluator You should write the Script along with a call to your script to test the output. For example to test a JavaScript function that adds 2 numbers. You should declare the function and make a call to the function to test the output as shown below. Pressing the Execute Script button evaluates the scripts. At the bottom of your scripting window is the time in milliseconds it took for the Script Engine to evaluate your script. This should always be considered when working with large bots that make extensive use of scripts in their knowledge base. Scripts do have a performance penalty when used within Pattern elements as they affect the performance of the Graph processor."
  },
  "tutorial/bot-studio/search-tree.html": {
    "href": "tutorial/bot-studio/search-tree.html",
    "title": "Search Tree - Syn Developer Network",
    "keywords": "Search Tree Bot Studio allows developers to peek into the Graph system of their Bot in real-time. Whenever a response is generated you can actually see all the nodes the SIML Graph Processor traversed before generating the final response. This is a special feature of the SIML interpreter itself. To see the nodes just send a message to the Bot and then select (or be in) the Search Tree tab. As soon as a response is generated a Graph is rendered in real-time and is displayed on the screen."
  },
  "tutorial/bot-studio/shortcuts.html": {
    "href": "tutorial/bot-studio/shortcuts.html",
    "title": "Keyboard Shortcuts - Syn Developer Network",
    "keywords": "Keyboard Shortcuts Alt+M Inserts a new Model <Model> <Pattern></Pattern> <Response></Response> </Model> Alt+E Inserts a new Event template <Event> <Pattern></Pattern> <Response></Response> </Event> Alt+R Inserts a new Random template <Random> <Item></Item> <Item></Item> <Item></Item> <Item></Item> </Random> Alt+P Inserts a new Phrase template <Phrase> <Item></Item> <Item></Item> <Item></Item> <Item></Item> </Phrase> Alt+T Inserts a new Item template <Item></Item> Alt+L Inserts an Html link <a href=”#” ></a> Alt+S Inserts a Link with class Chat_Link <a href=”#” class=”Chat_Link”></a> Alt+C Inserts a XML Comment tag <!—-> Alt+B Inserts Html Bullet List <ul> <li></li> <li></li> </ul> Alt+I Indents the document F5 Refreshes the Project Ctrl+S Saves changes to current file Ctrl+Shift+S Saves changes made to all currently opened files Ctrl+O To open an SIML File Ctrl+Shift+O To open an SIML Project Ctrl+Shift+P To open an SIML Package Ctrl+N To create a new SIML File outside the Project Ctrl+Shift+N To create a new SIML Project Ctrl+F Opens the Find & Replace Panel"
  },
  "tutorial/bot-studio/stats.html": {
    "href": "tutorial/bot-studio/stats.html",
    "title": "Stats - Syn Developer Network",
    "keywords": "Stats The Stats tab under the Console tab gives you an idea of how long ( in milliseconds ) did the Bot take to generate a response. There is no need to worry about the response time at the moment since you will soon learn that SIML Bot uses internal caching mechanism to maintain the response speed. For Bot Studio 1.0 Beta version you can check the speed for: Processing – Time taken to study the user input and check for a response Filtration – Time taken to filter out words and characters from the user input Splitting – Time taken to split the user sentence into multiple inputs Mapping – Time taken for transforming a text fragment into an element of another set Average Filtration Time – Average of all the filtration time. Average Splitting Time – Average of all the splittings/tokenizations time. Average Mapping Time – Average of all the mapping time"
  },
  "tutorial/bot-studio/suggestion-dialog.html": {
    "href": "tutorial/bot-studio/suggestion-dialog.html",
    "title": "Suggestions Dialog - Syn Developer Network",
    "keywords": "Suggestions Dialog Bot Studio comes with an in-built Suggestions dialog to test what suggestions are returned for a particular user query. Click on Project , select Example Suggestions and type your query and press the Get Suggestions button. Syn Bot Studio uses the MainUser instance in SimlBot class to create a search query for getting search results. As Syn.Bot Framework offers 2 modes in its in-built SearchEngine you can use Soft or Hard search modes to retreive values. Note All suggestion values are computed values of Example tags stored in SIML Models. For more information on how the Syn.Bot Framework processes suggestions please refer Suggestion System in Syn.Bot tutorial section."
  },
  "tutorial/bot-studio/telegram-deployment.html": {
    "href": "tutorial/bot-studio/telegram-deployment.html",
    "title": "Hosting SIML Project on Telegram - Syn Developer Network",
    "keywords": "Hosting SIML Project on Telegram From version 1.54, Syn Bot Studio comes with support for hosting the current SIML Project on Telegram. This enables developers to test the response and hint mechanism before actually going ahead and deploying the project on a server platform. For deploying an SIML project on Telegram a developer needs to acquire the Telegram Bot Access Token of their Bot. <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/telegram-bot.md\" --> Creating a Telegram Bot To obtain a Telegram Bot Access Token Download Telegram to your Desktop or Mobile from Telegram Search for BotFather and then click on Start . Type /newbot Enter a display name for your bot. In our example we've used Maya After you've specified the bot name, enter a unique Bot name. You can use _ as separators. For this tutorial we've used the name My_VA_Bot as the Bot name. After that you'll be presented with the HTTP Access Token. Copy the HTTP API access token as shown below. You have now successfully created a Telegram Bot and acquired its Access Token . <!--END INCLUDE --> Once the Access Token is obtained: Select Project from in Menu, choose Host and select Telegram . Enter the Access Token and press Connect . Everytime the developer Build s the SIML Project the Bot's knowledge-base will be updated on Telegram as well. Note The SIML Project is hosted on Telegram using the TelegramAssistant class found in Syn.Bot.Assistant library. Hence, all interaction mechanism designed within the TelegramAssistant will reflect in your Telegram Bot. Performance It came to our notice that on low speed internet connections there was a delay in delivering the response to the Telegram Bot via Syn Bot Studio . Thus we conclude that the response time of your Bot in Telegram is directly proportional to your internet speed. We've however tested the same feature in our Servers and have found no issues in the response time of the Bot. The average response time in our servers was < 3 seconds. So developers can be certain that if their project is hosted on a better internet connection the responses would be delivered on time. External Hosting Developers who wish to host the finaly SIML Project on Telegram in an external application can use the Syn.Bot.Assistant library available in NuGet."
  },
  "tutorial/emotionml/emotion-elements.html": {
    "href": "tutorial/emotionml/emotion-elements.html",
    "title": "Working with Emotion Elements - Syn Developer Network",
    "keywords": "Working with Emotion Elements Getting the Category Example Code var firstEmotion = emotionDoc.Emotions[0]; var firstCategory = firstEmotion.Categories[0]; var categoryName = firstCategory.Name; Getting the Dimension Example Code var firstEmotion = emotionDoc.Emotions[0]; var firstDimension = firstEmotion.Dimensions[0]; var dimensioName = firstDimension.Name; Getting Emotion By ID <emotion id=\"extremely-happy\" category-set=\"http://www.w3.org/TR/emotion-voc/xml#fsre-categories\"> <info> <Siml:Emotion Name=\"extremely happy\" /> </info> <category name=\"happiness\" /> <dimension name=\"pleasure\" value=\"0.9\" /> <dimension name=\"arousal\" value=\"0.9\" /> <dimension name=\"dominance\" value=\"1.0\" /> </emotion> Emotions in EmotionML MAY contain an ID attribute which uniquely identifies the underlying emotion. Because an ID has to be unique the parser allows fetching of emotions by ID as shown below. var emotionDoc = EmotionMLDocument.Parse(XDocument.Load(\"emotionml.xml\")); var emotion = emotionDoc.GetEmotionById(\"extremely-happy\") Getting external Info The info element in EmotionML can be used to annotate arbitrary metadata because info is the only possible way to annotate arbitrary metadata Syn EmotionML parser provides the Info class with the Element property exposed. An Info element must make use of a different namespace in the example code above we have used xmlns:Siml=”http://syn.co.in/2014/siml” which creates a new namespace Siml in the EmotionML document which is later used within the element as shown below. <Siml:Emotion Name=\"very pleased\" /> To fetch the above created Emotion element within the Siml namespace var firstEmotion = emotionDoc.Emotions[0]; var info = firstEmotion.Info; XNamespace ns = \"http://syn.co.in/2014/siml\"; var elementName = ns + \"Emotion\"; var element = info.Element.Element(elementName);"
  },
  "tutorial/emotionml/empty.html": {
    "href": "tutorial/emotionml/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/emotionml/index.html": {
    "href": "tutorial/emotionml/index.html",
    "title": "Syn EmotionML - Syn Developer Network",
    "keywords": "Syn EmotionML Syn.EmotionML is a specification compliant EmotionML 1.0 Parser developed for Mono and .Net Platforms. The library allows developers to develop emotion-sensitive applications and websites. The library is completely free and can be used for both commercial and non-commercial applications. NuGet PM> Install-Package Syn.EmotionML <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-portable.md\" --> Platforms Supported <!--END INCLUDE -->"
  },
  "tutorial/siml/elements/case.html": {
    "href": "tutorial/siml/elements/case.html",
    "title": "Case - Syn Developer Network",
    "keywords": "Case Annotation <Case> Definition This element acts a switch section for a <Switch> element. Attributes Required: MUST contain one valid SIML Variable operator. Occurrence One or more <Case> elements MUST occur as children of <Switch> element. Each Switch element contains one or more Case elements. One of these Case elements gets activated if its condition operator returns True ."
  },
  "tutorial/siml/elements/concept.html": {
    "href": "tutorial/siml/elements/concept.html",
    "title": "Concept - Syn Developer Network",
    "keywords": "Concept Annotation <Concept> Definition Groups Models belonging to a particular subject Children The element MUST contain one or more <Model> elements. Attributes Required Name Name of the Concept Optional Type Type of Concept. If not present the Concept is assumed to be a public concept Optional Repeat Determines if a Concept allows repetitive activation of its Models. If not present the value is assumed to be True Occurrence As a child of <Siml> An SIML knowledge base starts with a Concept. A Concept is the topic under consideration and is used to differentiate between similar Models. A Model in SIML is a unit of knowledge that contains a response for any pattern that might match the user input. Say, that we would like to talk to the user about his likes and dislikes . For this it’s important that we catch most ( if not all ) of the inputs the user might submit if the current topic is about likes and dislikes. To declare a concept use the Concept element and declare the name of the Concept using the Name attribute. In the code below you can see how one can create a concept and provide a concept name. Besides the Name attribute there’s the Type and the Repeat attribute. The Type attribute is an important attribute that tells the interpreter ( SIML Bot ) how Models within this Concept will be activated if any of their pattern’s match. Whereas the Repeat attribute takes 2 values True or False and if set to True the Models within the Concept are allowed to be activated even if the user repeats his input. <Siml> <Concept Type=\"public\" Name=\"User likes and dislikes\"> <!--SIML Models go within a Concept--> </Concept> </Siml> There are 2 types of Concepts. Public – Models within public Concept will get activated if their patterns are matched. Private – Models within a private concept will only be evaluated if the current concept names matches the name of the private concept. Private concepts are kept hidden from the user and have to enabled by the developer using the Set attribute on the User element. All SIML responses are Conceptual in nature which makes a pattern in a Public Concept unique to the Concept in which the pattern has been declared. User Specific Concepts Concepts can directly be stored for a particular user using the User attribute and specifying the ID of the user as the attribute value. If a user with the specified ID is found then the Concept is loaded into the isolated Graph of the user. <Concept Name=\"Controlling Lights\" Type=\"Public\" User=\"ec82e3ee-5355-427b-be5c-658ed4933943\"> <Model> <Pattern>SWITCH ON THE LIGHTS</Pattern> <Response>Switching on lights in drawing room.</Response> </Model> </Concept> <Concept Name=\"Public controlling lights\" Type=\"Public\"> <Model> <Pattern>SWITCH ON THE LIGHTS</Pattern> <Response>I am sorry the request has been denied.</Response> </Model> </Concept> In the above SIML code the first Concept specifies a User ID. If a user with the specified ID is found then the Concept is loaded within the Isolated Graph of the User instead of the main Graph used by the Bot by default. This ensures that during a chat session if and only if the user with the specified ID requests the Bot to Switch on the lights the request will be granted. If the same request is made by another user then the response will be entirely different. Developers can use Main as a value for the User attribute to specify the Main user."
  },
  "tutorial/siml/elements/conceptmatch.html": {
    "href": "tutorial/siml/elements/conceptmatch.html",
    "title": "ConceptMatch - Syn Developer Network",
    "keywords": "ConceptMatch Annotation <ConceptMatch> Definition Returns the value captured by a wildcard that targets the Concept name. Attributes Optional: Index If specified returns the text fragment matching the nth pattern in a Concept name. Occurrence One or more of <ConceptMatch> elements MAY occur as children of <Response> element. This is also a type of Match element that will return a text fragment matching the nth pattern * contained in a in <Concept> tag. This element maybe the least used Match element in knowledge base development but may come in handy for many test purposes. Example SIML <Siml> <Concept Type=\"public\" Name=\"General\"> <Model> <Pattern>CHANGE CONCEPT</Pattern> <Response>This is a public concept. Concept changed to \"<User Set=\"Concept\">new concept about cars</User>\" </Response> </Model> </Concept> <Concept Type=\"private\" Name=\"new concept about *\"> <Model> <Pattern>CHANGE CONCEPT AGAIN</Pattern> <Response>This concept is about <ConceptMatch />.Concept changed to \"<User Set=\"Concept\">new concept about cars and bikes</User>\" </Response> </Model> </Concept> <Concept Type=\"private\" Name=\"new concept about * and *\"> <Model> <Pattern>WHAT CONCEPT ARE WE IN</Pattern> <Response> The concept is about <ConceptMatch /> and <ConceptMatch Index=\"2\" />. </Response> </Model> </Concept> </Siml> User Input Change Concept. Change concept again What concept are we in? Bot Output This is a public concept. Concept changed to \"new concepts about cars\" This concept is about cars. Concept changed to \"new concept about cars and bikes\" The concept is about cars and bikes Explanation The ConceptMatch element can help a bot developer reduce redundancy when dealing with concepts of similar essence. Like all Match elements you can use the Index=\"n\" attribute to get the text fragment matching the nth pattern."
  },
  "tutorial/siml/elements/date.html": {
    "href": "tutorial/siml/elements/date.html",
    "title": "Date - Syn Developer Network",
    "keywords": "Date Annotation <Date> Definition Used to get date related values Attributes Required: Either Get or Format attribute. Occurrence One or more <Date> elements MAY occur as children of <Response> element. This element enables the developer to get Date and Time related values. You may optionally specify the format. Example SIML <Model> <!--UNIT TEST--> <Pattern>WHAT DAY IS IT</Pattern> <Response>It's <Date Get=\"weekday\" /></Response> </Model> <Model> <Pattern>WHATS THE TIME</Pattern> <Response>It's <Date Get=\"time\" /></Response> </Model> User Input What day is it? Whats the time? Bot Output It’s Monday It’s 5:30 AM Explanation The Get attribute helps the Date element to decide what type of Date and Time request is being mentioned and based on the value of the Get attribute a value is generated by the Date element. The following are the values a Get attribute within a Date element can take: Weekday Month Year Hour Minute Second Meridiem TimeZone Time Since SIML’s Default interpreter has been written using the .Net Framework it’s perfectly valid to use the Format attribute to get Date and Time in a particular format. To use a format use the Format=\"format\" attribute. If you wish to know all the available formats please visit http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx Example <Model> <Pattern>WHAT DAY IS IT</Pattern> <Response>It's <Date Format=\"dddd\" /></Response> </Model> The above produces a response of It’s Monday (en-US)"
  },
  "tutorial/siml/elements/default.html": {
    "href": "tutorial/siml/elements/default.html",
    "title": "Default - Syn Developer Network",
    "keywords": "Default Annotation <Default> Definition If no Case element’s condition is satisfied this element is evaluated. Occurrence A single <Default> element MAY occur within a <Switch> element. In a Switch element if no Case element is activated, control is transferred to the Default element, if it exists."
  },
  "tutorial/siml/elements/echo.html": {
    "href": "tutorial/siml/elements/echo.html",
    "title": "Echo - Syn Developer Network",
    "keywords": "Echo Annotation <Echo> Definition Yields the Response generated by a Non-Repeatable Model. Attributes Optional: Index The Index=\"n\" is optional, and if left off, the Index value of 1 is assumed which yields the response generated by the first non-repeatable Model. Occurrence One or more instances of this element MAY occur within a <Response> element which MUST be a child of <Repeat> element. Response generated by non-repeatable Models are stored in an Echo-Stack . The elements of this Echo stack are acquired using the Echo element."
  },
  "tutorial/siml/elements/elseif-else.html": {
    "href": "tutorial/siml/elements/elseif-else.html",
    "title": "ElseIf - Syn Developer Network",
    "keywords": "ElseIf Annotation <ElseIf> Definition Conditional evaluation of children elements if the immediate ancestor <If> or <ElseIf> elements are not satisfied. Attributes Required Bot , User or Var attribute Optional Variable Operators: Symbols that specify which operations to perform. Occurrence One or more <ElseIf> elements MAY occur as descendants of <Response> element. An <ElseIf> MUST have <ElseIf> or <If> element as its immediate ancestor element. Else Annotation <Else> Definition Conditional evaluation of children elements all of the immediate ancestor <If> or <ElseIf> elements are not satisfied. Occurrence A single <Else> element MAY occur after an <Else> or <ElseIf> element. An element MUST have an <ElseIf> or an <If> element as its immediate ancestor element. ElseIf elements are evaluated if their ancestor If element’s condition is not satisfied and the Else element is evaluated if all of the above conditions are dismissed for ElseIf and If . Example SIML <Model> <Pattern>I AM * YEARS OLD</Pattern> <Response>Good to know. <User Think:Set=\"Age\"><Match /></User></Response> </Model> <Model> <Pattern>AM I OLD ENOUGH * DRIVING LICENSE</Pattern> <Response> <If User=\"Age\" Value=\"15\">Only if you live in South Dakota.</If> <ElseIf User=\"Age\" GreaterThanOr=\"17\">Yes, you are.</ElseIf> <Else>Nope, I don't think so.</Else> </Response> </Model> User Input I am 10 years old. Am I old enough for a driving license? Bot Output Good to know. Nope, I don’t think so. Explanation The Bot responds Nope, I don’t think so. if and only if the conditions specified by the ElseIf and If elements are not met."
  },
  "tutorial/siml/elements/empty.html": {
    "href": "tutorial/siml/elements/empty.html",
    "title": "Element - Syn Developer Network",
    "keywords": "Element Annotation content Definition content Children content Attributes Required: content Attributes Optional: content Occurrence content"
  },
  "tutorial/siml/elements/esc.html": {
    "href": "tutorial/siml/elements/esc.html",
    "title": "Esc - Syn Developer Network",
    "keywords": "Esc All SIML element can be escaped using the Esc element. The Esc element prevents the evaluation of any inner descendent element and returns a value that is equivalent to their XML escaped format. Annotation <Esc> Definition Returns the XML escaped value of the inner elements. Occurrence One or more <Esc> element MAY occur within a <Response> element. Example <Model> <Pattern>WHAT IS THE MATCH ELEMENT FOR</Pattern> <Response>A <Esc><Match /></Esc> element returns the value captured by a wildcard</Response> </Model> User Input What is the Match element? Bot Output A <Match/> element returns the value captured by a wildcard. Explanation The <Esc> element escapes the <Match /> element, prevents its evaluation and returns the XML escaped value."
  },
  "tutorial/siml/elements/example.html": {
    "href": "tutorial/siml/elements/example.html",
    "title": "Example - Syn Developer Network",
    "keywords": "Example Annotation <Example> Definition Sets a value that projects more information on the value of the ancestor Pattern element. Occurrence One <Example> element MAY occur within a <Model> element. Example element offers the Bot Developer to set Examples for non-atomic patterns which in turn might help any Graphical User Interface to offer the user with some possible values the bot can respond to. Example <Model> <Pattern>How is *</Pattern> <Example>How is Life?</Example> <Response>I need to learn more about <Match/></Response> </Model> You can also use the <Item> element to create multiple examples for the same Model. Example <Model> <Pattern>How is *</Pattern> <Example> <Item>How is Life?</Item> <Item>How is Sarah?</Item> </Example> <Response>I need to learn more about <Match/></Response> </Model>"
  },
  "tutorial/siml/elements/filter.html": {
    "href": "tutorial/siml/elements/filter.html",
    "title": "Filter - Syn Developer Network",
    "keywords": "Filter Annotation <Filter> Definition Filters out texts, words or fragments of text that match specified regular expressions and replaces them with the value specified. Children This element MUST contain one or more <Text> , <Word> or <Regex> elements. Attributes Required: Value Value used to replace the plain text in children elements. Attributes Optional: Target Specifies the target type for filtration. Occurrence One or more <Filter> elements MAY occur as children of <Siml> element. The Filter element has been introduced to help filter out words or fragments of text from user input and bot output. Filtration helps a lot in creation of Synonyms ( without having to create Sets), address internet/SMS slang and to fix some common typos. <Siml> <Filter Value=\"because\"> <Word>becaus</Word> <Word>becasue</Word> <Word>becuase</Word> <Word>becouse</Word> <Word>becoz</Word> <Word>bcoz</Word> <Word>coz</Word> </Filter> <Filter Value=\"i am\"> <Word>iam</Word> <Word>i'm</Word> <Word>i m</Word> </Filter> <Filter Text=\".edu\" Value=\"dot edu\" /> <Filter Text=\".uk\" Value=\"dot uk\" /> <Filter Text=\".jp\" Value=\"dot jp\" /> <Filter Text=\".au\" Value=\"dot au\" /> <Filter Text=\".co\" Value=\"dot co\" /> <Filter Text=\".ac\" Value=\"dot ac\" /> </Siml> The Filter element accepts 3 special children elements that have different meaning when nested inside the Filter tag. The Word tag/attribute , Text tag/attribute and finally the Regex tag/attribute . If a filtration requires just 1 word to be filtered out we encourage you to use the Word attribute but if it requires more than one word to be filtered out you can then use <Word> elements . In the example above you can see that the Value attribute tells the bot what value of the text or word will have to be replaced. A Filter has just 1 Single replacement value (ofcourse). So using the above filtration if the user types iam it will be filtered out as I am and if the user ends a website address with .edu it will be filtered out as dot edu There are 3 types of Filters in SIML: Input – Filters the user message Output – Filters the output message that the Bot generates Both – Filters both User Input and Bot Output This mechanism of filtration has been directly imported from Syn Engine . To target an input or output you should add the Target attribute to your Filter element. If no Target attribute is specified the SIML Bot will assume it as an Input Filter. <Siml> <Filter Value=\"okay\" Target=\"output\"> <Word>ok</Word> <Text>o.k.</Text> </Filter> <!--Not specifying the Target attribute will have the same effect--> <Filter Value=\"because\" Target=\"input\"> <Word>becaus</Word> <Word>becoz</Word> <Word>bcoz</Word> <Word>coz</Word> </Filter> <Filter Value=\"did not\" Target=\"both\"> <Word>didnt</Word> <Word>didn t</Word> <Word>did'nt</Word> <Word>didn't</Word> </Filter> </Siml> It’s important to note that the Input filters do play a role in Bot messages as well ( internally ). When a bot output is generated a filtered version of the output is stored as the value for the Previous elemen"
  },
  "tutorial/siml/elements/goto.html": {
    "href": "tutorial/siml/elements/goto.html",
    "title": "Goto - Syn Developer Network",
    "keywords": "Goto Annotation <Goto> Definition Redirects pattern-search to a new value Children This element MAY contain one or more <Match> elements ( Recommended ) or any other valid SIML element that returns a value. Occurrence One or more <Goto> elements MAY occur as children of <Response> element. Once you have caught a pattern at some point you may want to redirect the pattern-search to a different value. The value of the Goto element tells the Bot that it should recursively use the pattern defined within it and search for a response. Goto element plays a major role in breaking down complex sentences into simpler ones. Example SIML <Model> <Pattern>WHAT DO YOU THINK OF SIML</Pattern> <Response>I think it's awesome.</Response> </Model> <Model> <Pattern>_ TOTALLY *</Pattern> <Response> <Goto xml:space=\"preserve\"> <Match /> <Match Index=\"2\" /></Goto> </Response> </Model> <Model> <Pattern>I AGREE</Pattern> <Response>Fantastic!</Response> </Model> User Input What do you think of SIML? I Totally Agree Bot Output I think it’s awesome Fantastic! Explanation When the user says I totally agree . It matches the second Model’s pattern which in-turn tells the Bot that it should redirect the pattern search to I Agree ."
  },
  "tutorial/siml/elements/gotomatch.html": {
    "href": "tutorial/siml/elements/gotomatch.html",
    "title": "GotoMatch - Syn Developer Network",
    "keywords": "GotoMatch Annotation <GotoMatch> Definition Redirects pattern-search to the captured value of the first wildcard. Attributes Optional: Index The Index=\"N\" is optional, and if left off, the Index value of 1 is assumed which yields the first matching text fragment. Occurrence One or more <GotoMatch> elements MAY occur as children of <Response> elements. This GotoMatch tag is a short-hand notation for <Goto><Match /></Goto> and by using this tag you will be forwarding the pattern-search to the First wildcard match. Match index can be explicitly specified using the Index attribute. Example <Model> <Pattern>ALRIGHT *</Pattern> <Response> <GotoMatch /> </Response> </Model>"
  },
  "tutorial/siml/elements/hint.html": {
    "href": "tutorial/siml/elements/hint.html",
    "title": "Hint - Syn Developer Network",
    "keywords": "Hint Annotation <Hint> Definition Sets a value indicating what the Bot expects in its next chat request from the user in concern. Children MAY an arbitrary text or one XML element with one or more children. Occurrence One <Hint> element MAY occur within a <Response> element. The Hint element is an interface for bot developers to explicitly give an application/program the opportunity to display the next possible value that the bot may expect. This element produces no textual value but sets the value for the Hint part when the response class object is de-serialized. This element is to be used by Syn Virtual Assistant to display the next possible input it expects from the user. If XML content is being specified within the Hint element, it is important to note that only one child element with one or more children is valid within the Hint element. The Hint element returns an empty value and therefore DOES NOT require being enclosed within a <Think> element. Example SIML <Model> <Pattern>RESTART COMPUTER</Pattern> <Response>Are you sure? <Hint>Yes|No</Hint> </Response> </Model> User Input Restart Computer Bot Output Are you sure? Explanation User GUI may display Yes|No by getting the value of the Hint property on the ChatResult class."
  },
  "tutorial/siml/elements/if.html": {
    "href": "tutorial/siml/elements/if.html",
    "title": "If - Syn Developer Network",
    "keywords": "If Annotation <If> Definition Conditional evaluation of patterns or children elements. Children content Attributes Required Bot , User or Var attribute Optional Variable Operators Symbols that specify which operations to perform. Occurrence A single <If> element MAY appear within <Pattern> or <Previous> element. One or more <If> elements MAY occur as descendants of <Response> element. The If element controls the generation of responses if certain conditions are met. Usually the conditions are states of predicates/variables or comparison of their values. Example SIML <Model> <Pattern>AM I OLD ENOUGH</Pattern> <Response> <If User=\"age\" Value=\"18\">Yes you are.</If> <ElseIf User=\"Age\" Value=\"40\">you are 40 years old. So definitely yes.</ElseIf > </Response> </Model> User Input Am I old enough? Bot Output Yes you are. Explanation The Bot responds Yes you are if and only if the bot had stored the user’s age and it was set to 18. In this example we used User as the entity whose variables/predicates are to be evaluated. You can also use Bot element to compare bot variables. An If element may as well occur with a Pattern or a Previous element and, if the condition is satisfied, will have the same behavior as if all the words within these elements were evaluated successfully by the Bot. If elements must only be used when absolutely necessary. It is also recommended that If elements are used only within Private Concepts . <Model> <Pattern><If User=\"Is-Master\"/></Pattern> <Response>Hi Master!</Response> </Model>"
  },
  "tutorial/siml/elements/input.html": {
    "href": "tutorial/siml/elements/input.html",
    "title": "Input - Syn Developer Network",
    "keywords": "Input Annotation <Input> Definition Denotes 1 individual sentence in user chat request Attributes Optional Index The Index=”n” is optional, and if left off, the Index value of 1 is assumed which yields the last sentence of the last chat request. Occurrence One or more <Input> elements MAY occur as descendants of <Response> element. The Input tag is used to fetch the last sentence of the last chat request made by the user. Lets assume that the user said Hi, How are you today? . SIML handle this sentence by firstly splitting the sentence using the comma , thereby generating 2 Inputs for 1 Request. So the message that the Bot is going to receive is Hi and How are you today? There was just 1 Request which resulted in 2 Inputs. The Input tag is all about getting the previous query. Example SIML <Model> <Pattern>HI _</Pattern> <Response><Goto><Match /></Goto></Response> </Model> <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine</Response> </Model> <Model> <Pattern>WHAT DID I JUST SAY</Pattern> <Response>You said \"<Input/>\"</Response> </Model> User Input Hi, how are you? What did I just say? Bot Output I am fine You said “How are you?” Explanation The Input element gets the last sentence of the user message. By default the Index is set to 1 if no Index attribute is provided/used. The Index attribute allows deeper search through user message history. For example in the Code above if we wanted to get the word HI we would use <Input Index=”2″/> Index 0 returns the current input of the user."
  },
  "tutorial/siml/elements/regex.html": {
    "href": "tutorial/siml/elements/regex.html",
    "title": "Regex - Syn Developer Network",
    "keywords": "Regex Context 1: As children of <Splitter> or <Filter> elements. Annotation <Regex> Definition Declares a Regular Expression for usage normalization and splitting of user input. Attributes Required: A Pattern attribute MUST exist if no arbitrary text value is specified. Optional: Options This attribute MAY be included to add options to the specified regular expression. Values of this attribute MUST be a valid member of .Net RegexOptions enumeration. Multiple options MUST be separated using a SPACE character. Occurrence One or more of this element MAY occur as children of <Splitter> or <Filter> element. Context 2: As children of <Siml> element. Annotation <Regex> Definition Declares a Regular Expression for usage within SIML patterns. Children The element MUST contain either a single Pattern attribute or an arbitrary text that is a valid regular expression. Attributes Required: Name Name of the Regular Expression Required: A Pattern attribute MUST exist if the value of the element is empty. Optional: Options This attribute MAY be included to add options to the specified regular expression. Values of this attribute MUST be a valid member of .Net RegexOptions enumeration. Multiple options MUST be separated using a SPACE character. Occurrence One or more of this element MAY occur as children of <Siml> element. Example <Regex Name=\"Color\" Pattern=\"b(red|green|blue)b\" />"
  },
  "tutorial/siml/elements/remember.html": {
    "href": "tutorial/siml/elements/remember.html",
    "title": "Remember - Syn Developer Network",
    "keywords": "Remember Annotation <Remember> Definition Saves the specified Model into the current User’s main GraphNode ( GraphMaster ) Children This element MUST contain a <Model> element or a <Concept> element. Occurrence One or more <Remember> elements MAY occur within a <Response> element. Sometimes some user-specific information has to be stored and it has to be ensured that certain interactions are done only with a particular user and no-one else. For this one can use the Remember element which ensures that the information within it will be stored only for the current user. Example SIML <Model> <Pattern>Always remember I like *</Pattern> <Response> Alright I will keep that in mind. <Remember> <Model> <Pattern>What do I like</Pattern> <Response> You like <Process><Match /></Process> </Response> </Model> </Remember> </Response> </Model> User Input Always remember that I like bacon Bot Output Alright I will keep that in mind. Explanation The information within the Remember element tells the Bot that it should save the Model for the current user. This also means that if some other user asks the question what do I like? the answer will be different. A Concept element can also be specified for a Model. Example <Model> <Pattern>Always remember I like *</Pattern> <Response> Alright I will keep that in mind. <Remember> <Concept Name=\"Remember\" Type=\"Public\" Repeat=\"True\"> <Model> <Pattern>What do I like</Pattern> <Response> You like <Process><Match /></Process> </Response> </Model> </Concept> </Remember> </Response> </Model>"
  },
  "tutorial/siml/elements/repeat.html": {
    "href": "tutorial/siml/elements/repeat.html",
    "title": "Repeat - Syn Developer Network",
    "keywords": "Repeat Annotation <Repeat> Definition Manages repetitive user inputs Children MUST contain one <Response> element. Occurrence One instance of this element MAY occur within an <Siml> element. When a Concept has an attribute Repeat with the value being False all the Models within the Concept are treated as non-repeatable. Now if the user submits a chat request that activates a non-repeatable Model more than once the Response generated by the Model is then stored within an Echo stack . And it's upto the developer as to how the Echo stack is used. The <Repeat> sets 2 variables for the user whenever its activated. Repeat:Is-Partial- This User variable is set to True if some ( not all ) inputs by the user activated some non-repeatable Models. Repeat:Count- This user variable is the number of non-repeatable Models activated. Its up to the Bot developer as to how he/she wishes to manage the Echo Stack of Non-Repeatable Models. However all responses generated by repeatable Models will be handled by the SIML Bot and will be re-arranged and stored before other outputs. Example <Repeat> <Response> <If User=\"Repeat:Is-Partial\"> <Switch User=\"Repeat:Count\"> <Case Value=\"1\">And I have already mentioned <Echo /></Case> <Case Value=\"2\">And I think you already know <Echo Index=\"1\" /> and <Echo Index=\"2\" /></Case> <Case Value=\"3\">And If you recall our conversation you would know <Echo Index=\"1\" />, <Echo Index=\"2\" /> and <Echo Index=\"3\" /></Case> <Default>And I do not like to repeat myself.</Default> </Switch> </If> <Else> <Switch User=\"Repeat:Count\"> <Case Value=\"1\">I have already mentioned <Echo /></Case> <Case Value=\"2\">I think you already know <Echo Index=\"1\" /> and <Echo Index=\"2\" /></Case> <Case Value=\"3\">If you recall our conversation you would know <Echo Index=\"1\" />, <Echo Index=\"2\" /> and <Echo Index=\"3\" /></Case> <Default>I do not like to repeat myself.</Default> </Switch> </Else> </Response> </Repeat> In the above example we first check if its a Repeat:Is-Partial if so then we are sure that some of the outputs belong to repeatable Models and will be added before our response for the non-repeatable Models. This is the reason why the word And has been added in our response for partial repeats. Next we check how many of non-repeatable Models were activated by referring the variable Repeat:Count and based on their count we write individual responses."
  },
  "tutorial/siml/elements/request.html": {
    "href": "tutorial/siml/elements/request.html",
    "title": "Request - Syn Developer Network",
    "keywords": "Request Annotation <Request> Definition Gets the last chat request made by the user. Attributes Optional Index The Index=”n” is optional, and if left off, the Index value of 1 is assumed which yields the last chat request made by the user Optional At Is optional, and if left off, returns the entire user message otherwise if specified yields the sentence at the specified index value. At attribute MUST occur only if Index is specified otherwise the developer should use <Input> element instead of <Request> . Occurrence One or more <Raise> elements MAY occur as children of <Response> element. The Request element gets the previous input ( in its entirety i.e. the entire sentence) of the user. It’s important to note that a user input maybe made up of multiple sentences and therefore individual sentences are split into Inputs. So to avoid confusions while developing a Bot, a developer should always remember that a Request is the entire message that the User sends to a Bot and a Request may have more than one sentence in it. An Input however, is a single sentence which is obtained after splitting a chat Request. Example 1 SIML <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine</Response> </Model> <Model> <Pattern>WHAT DID I JUST SAY</Pattern> <Response>You said \"<Request/>\"</Response> </Model> User Input How are you? What did I just say ? Bot Output I am fine You said “How are you?” Explanation The Request tag gets the entire user message. The last message received from the user is kept at Index 1 to retrieve even older messages use Index=”2″ … Index=”3″ The last message received from the user is kept at Index 1, which is the default Index value if the attribute is not specified for a Request element, to retrieve even older messages use Index=”2″ or Index=”3″ and so on. Example 2 <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine</Response> </Model> <Model> <Pattern>GOOD TO HEAR THAT</Pattern> <Response>Thank you!</Response> </Model> <Model> <Pattern>WHAT WAS THE FIRST THING I SAID</Pattern> <Response>You said \"<Request Index=\"2\"/>\"</Response> </Model>"
  },
  "tutorial/siml/elements/response.html": {
    "href": "tutorial/siml/elements/response.html",
    "title": "Response - Syn Developer Network",
    "keywords": "Response A Response element is used to generate a data that is returned to the user upon activation of the underlying SIML pattern. This response contains the evaluated values of all the inner descendant elements. A Response may or may not contain a textual data. Annotation <Response> Definition Generates a data whenever the underlying SIML pattern is activated. Attributes Required Rank Sets the Rank a response should be treated with. By default all responses have a Normal rank. Occurrence MUST occur once within a <Model> element and MAY contain other SIML elements or any arbitrary text. Example <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine.</Response> </Model> Every SIML response has a rank associated with it. If a Rank attribute is not specified then a rank of “Normal” is assumed by the interpreter. There are 3 possible values for the Rank attribute Low Normal – The default rank of any SIML response. High Example <Model> <Pattern>START THE CAR</Pattern> <Response Rank=\"Low\">Car started. <Car Task=\"Start\" /></Response> </Model>"
  },
  "tutorial/siml/elements/result.html": {
    "href": "tutorial/siml/elements/result.html",
    "title": "Result - Syn Developer Network",
    "keywords": "Result Annotation <Result> Definition Gets the last message generated by the bot. Attributes Optional Index The Index=”n” is optional, and if left off, the Index value of 1 is assumed which yields the last bot result At Is optional, and if left off, returns the entire bot message otherwise if specified yields the entire bot message at the specified index index. At attribute MUST occur only if Index is specified otherwise use <Output> instead of <Result> . Occurrence One or more <Request> elements MAY occur as descendants of <Response> element. A Result is a response for a particular Request . A Result may contain multiple Outputs. Lets take a look at an example. Example SIML <Model> <Pattern>FLIP A COIN</Pattern> <Response> <Random>Coin flipped. It's (Heads|Tails)</Random> </Response> </Model> <Model> <Pattern>WHAT DID YOU SAY</Pattern> <Response>I said \"<Result />\"</Response> </Model> User Input Flip a coin What did you say? Bot Output Coin flipped. It’s Heads I said “Coin flipped. It’s Heads” Explanation The Result element gets the Last sentence ( Result ) that the bot uttered. Backward referencing of the previous utterance of the bot is achieved using the Index attribute. Example <Model> <Pattern>HI</Pattern> <Response>Hello there.</Response> </Model> <Model> <Pattern>HOW ARE YOU</Pattern> <Response>I am fine.</Response> </Model> <Model> <Pattern>REPEAT WHAT YOU JUST SAID</Pattern> <Response>I said \"<Result Index=\"2\"/>\"</Response> </Model>"
  },
  "tutorial/siml/elements/script.html": {
    "href": "tutorial/siml/elements/script.html",
    "title": "Script - Syn Developer Network",
    "keywords": "Script Annotation <Script> Definition Used to declare a Script that is initialized at Bot startup. Attributes Required: MUST contain a Type attribute that specifies the language of the script used within the element. Occurrence One or more <Script> elements MAY occur as children of an <Siml> element. Allows developers to declare global scripts ( scripts that are available throughout user session ) in their respective scripting language. Example <Siml> <Script Type=\"javascript\"> function square(num){ return num*num; } </Script> </Siml> Example Once declared the script and its functions can be used throughout your bot project. SIML <Model> <Pattern>WHAT IS THE SQUARE OF *</Pattern> <Response> <Js>square(<Match />);</Js> </Response> </Model> User Input What is the Square of 4? Bot Output 16 Explanation The Js element represents a JavaScript element. The inner content of the element is replaced with square(4) where the number 4 is the result from the Match element. Once the inner content have been processed the Script Engine executes the JavaScript and returns the value. To test your script before deployment you can always use the Script Evaluator available in Syn Bot Studio."
  },
  "tutorial/siml/elements/siml.html": {
    "href": "tutorial/siml/elements/siml.html",
    "title": "SIML - Syn Developer Network",
    "keywords": "SIML Annotation <Siml> Definition The root element of an SIML Document Children This element MAY contain or or more <Concept> , <BotSettings> , <UserSettings> , <emotionml> , <Splitter> , <Filter> , <Map> , <Random> , <Phrase> , <Regex> , <Repeat> , <Script> , <Set> Attributes Optional Version : Indicates the version of the specification to be used for the document Occurence This is the root element - it cannot occur as the child of any other SIML element. Document root : The <Siml> element is the root element in any SIML document. All SIML element’s tag names are case-sensitive. Case-sensitivity is to make interpretation faster and to prevent renaming overheads while parsing."
  },
  "tutorial/siml/elements/splitter.html": {
    "href": "tutorial/siml/elements/splitter.html",
    "title": "Splitter - Syn Developer Network",
    "keywords": "Splitter Annotation <Splitter> Definition Splits textual data using the textual values of the children elements. Children This element MUST contain one or more <Text> , <Word> or <Regex> elements. Occurrence One <Splitter> element MAY occur as a child of <Siml> element. The Splitter element allows custom sentence tokenization based on characters/text, words or even regular expressions. The resultant array of sentences are then treated as individual inputs and are processed individually. For greater productivity and control the order of the elements Text, Word and Regex is used while splitting the user message. The Splitter element MUST a direct child of an Siml element. <Siml> <Splitter> <Text>.</Text> <Text>?</Text> <Text>!</Text> <Text>;</Text> <Word>and</Word> <Regex>\\b(split)\\b</Regex> </Splitter> </Siml>"
  },
  "tutorial/siml/elements/switch.html": {
    "href": "tutorial/siml/elements/switch.html",
    "title": "Switch - Syn Developer Network",
    "keywords": "Switch Annotation <Switch> Definition The element is a control element that selects a switch case to execute from a list of candidates if the specified condition is satisfied Children This element MUST contain one or more <Case> elements and MAY contain only one <Default> element. Attributes Required Bot , User or Var attribute Occurrence One or more <Switch> elements MAY occur as children of <Response> element. ElseIf and Else sequence may not be handy if you are to make a lot of comparisons over a single variable. This is where the Switch element comes in. The Switch element takes 1 attribute ( User, Bot or Var ) and then compares the value of the predicate with the children Case elements. Example SIML <Model> <!--UNIT TEST--> <Pattern>AM I OLD ENOUGH</Pattern> <Response> <Switch User=\"age\"> <Case Value=\"18\">Yes 18 is good enough.</Case> <Case Value=\"25\">Ofcourse</Case> <Case Value=\"30\">You are 30 so that should do.</Case> <Case Value=\"40\">You are mature enough.</Case> <Default>I don't think so.</Default> </Switch> </Response> </Model> User Input Am I old enough? Bot Output You are mature enough. Explanation The Bot responds You are mature enough if and only if the the age of the user is 40. If not then the response would have been I don’t think so."
  },
  "tutorial/siml/elements/text.html": {
    "href": "tutorial/siml/elements/text.html",
    "title": "Text - Syn Developer Network",
    "keywords": "Text Context 1: As children of <Splitter> and <Filter> Annotation <Text> Definition Represents the internal arbitrary value as a sequence of string. Attributes Required: MUST contain an arbitrary text value Occurrence One or more <Text> elements MAY occur as children of <Splitter> or <Filter> elements. When the <Text> element is used within a Splitter or a Filter element the arbitrary text value of the element is treated as a sequence of characters. Context 2: As descendants of <Response> Annotation <Text> Definition Returns a textual value after performing the specified operation on it. Attributes Required: MUST contain either Get , WordAt or CharAt attribute. Occurrence One or more <Text> elements MAY occur within <Response> element. For textual manipulations you can use the Text element with its Get attribute to call a particular function. Lowercase – Converts the text to its lowercase form Uppercase – Converts the text to its uppercase form Wordcount – Gets the number of words Length – Gets the number of characters Explode – Explodes the text filling in a space character between each character Implode – Replaces all whitespace characters with an empty text Sentence – Capitalizes the first character of the first word of every sentence Titlecase- Capitalizes the first character of every word Reverse - Gets the text in its reverse order There are 2 more attributes for this element and they are WordAt and CharAt . Both of these attributes take an integer number as their values. WordAt – Returns the word at the specified index CharAt – Returns the character at the specified index."
  },
  "tutorial/siml/elements/think.html": {
    "href": "tutorial/siml/elements/think.html",
    "title": "Think - Syn Developer Network",
    "keywords": "Think Annotation <Think> Definition Evaluates the inner elements and returns an empty string Children This element MUST contain one or more SIML elements that return arbitrary text value Occurrence One or more <Think> elements MAY occur within a <Response> element. The Think tag evaluates its inner elements and returns an empty string. This tag MAY be used to nullify the text values generated by SIML elements present within the Response element. Example SIML <Model> <Pattern>MY NAME IS *</Pattern> <Response>I'll remember that. <Think> <User Set=\"name\"> <Match /> </User> </Think> </Response> </Model> User Input My name is Craig Bot Output I’ll remember that. Explanation The <User Set=\"Name\"> element is evaluated but the output is nullified as the User element enclosed within the Think element. Prefixing the Add , Set and Remove attributes of Bot and User element with a Think namespace has the same effect as enclosing them within a Think element. The above code can also be written as <Model> <Pattern>MY NAME IS *</Pattern> <Response>I'll remember that. <User Think:Set=\"name\"><Match /></User> </Response> </Model> The Think namespace xmlns:Think=\"http://syn.co.in/2014/siml#think\" must be added to the root SIML element before its usage."
  },
  "tutorial/siml/elements/user.html": {
    "href": "tutorial/siml/elements/user.html",
    "title": "User - Syn Developer Network",
    "keywords": "User Annotation <User> Definition Used to get or set User related variables Attributes MUST either contain a Get or a Set attribute Occurrence One or more <User> elements MAY either occur as descendants of <Pattern> element or any of its children i.e. <Item> <Response> element or any of its children elements. Just like the Bot tag the User tag is used to retrieve user related predicates/settings. The user related predicates are evaluated during run-time and if a value or the variable doesn’t exist then a default value specified by the bot developer is returned. <Model> <Pattern>MY NAME IS *</Pattern> <Response>Good to meet you <User Set=\"name\"><Match /></User></Response> </Model> <Model> <Pattern>WHAT IS MY NAME</Pattern> <Response>Your name is <User Get=\"name\"/></Response> </Model> In the above example we firstly extract the User name and later when the user asks what is my name we retrieve the user name specifying the variable name ‘name within the <User> Tag. Just like the Bot element User element can be evaluated within the Pattern element using the parameterized Set syntax. The value of the User set with the parameter name is the run-time value of the variable name that belongs to the user. Any change in the variable’s value automatically updates the pattern. Example <Model> <Pattern>IS MY [User:Name]</Pattern> <Response>Yes, Your name is <Match /></Response> </Model>"
  },
  "tutorial/siml/elements/useremotion.html": {
    "href": "tutorial/siml/elements/useremotion.html",
    "title": "UserEmotion - Syn Developer Network",
    "keywords": "UserEmotion Annotation <UserEmotion> Definition Gets or sets the emotion for the User Attributes Optional: Get This attribute MUST be used when trying to retrieve an already declared emotion. The values MUST be either \"name\" or \"id\". Optional: ID This attribute MUST be used when trying to set the User’s emotion to an already declared emotion. The value of this attribute MUST be a valid emotion ID. Occurrence One or more of this element MAY occur within a <Response> element. The <UserEmotion> element is used to Get or set an emotion for the User. This element has a Get attribute using which the developer can either retrieve the name of current emotion or the ID. To set the emotion to an already declared emotion use the ID attribute. The following example should give you an idea as to how you can Get or Set the emotion for the User. Get Example <Model> <Pattern>Get User Emotion</Pattern> <Response> <UserEmotion Get=\"id\" /> </Response> </Model> Set Example <Model> <Pattern>Set User Emotion</Pattern> <Response> <UserEmotion ID=\"pleased\"/> </Response> </Model> When the ID attribute is used the element will not return any value."
  },
  "tutorial/siml/elements/usersettings.html": {
    "href": "tutorial/siml/elements/usersettings.html",
    "title": "UserSettings - Syn Developer Network",
    "keywords": "UserSettings Annotation <UserSettings> Definition Groups predicates that belong to a User. Children MUST contain one or more <Variable> elements Occurrence One instance of this element MAY occur within an <Siml> element. Just like BotSettings the UserSettings element is used to define settings for the User. This element also takes one or more Variable elements as its children and the child element may store one or more values. <Siml version=\"1.0\"> <UserSettings> <Variable Name=\"Favorite-Sports\" Value=\"Nascar\" /> <Variable Name=\"Name\" Value=\"Leslie\" /> <Variable Name=\"Location\" Value=\"Bangalore\" /> <Variable Name=\"Favorite-Movies\"> <Value>Life Is Beautiful</Value> <Value>Green Miles</Value> </Variable> <Variable Name=\"Language\" Value=\"English\" /> </UserSettings> </Siml> Example SIML <Model> <Pattern>DO YOU KNOW MY NAME</Pattern> <Response> Your name is <User Get=\"name\" /> </Response> </Model> User Input Do you know my name? Bot Output Your name is Leslie Explanation The User element retrieves settings/predicates values stored for the User. The value of the Get attribute should be a valid Settings name. Most of the values of variables are stored/created during run-time ( while the bot interacts with the user ). If you explicitly write down predicate values under UserSettings then the variables will be used to initialize settings for new users. There are a few reserved variable under UserSettings . Some of the user variables mentioned below will not change their values even if the bot developer explicitly tried to change their values during a chat session. Reserved User Variables Variable Name Function Message The value of this variable represents the current user message Is-Main A variable that returns true if the current user is the main Bot user. ID Gets the unique GUID of the current user. Concept Used to get the name of the SIML Concept from which the last response was generated or to set the next private Concept. Repeat-IsPartial Determines if the current Result contains at-least a few unique responses. Repeat-Count Gets the number of responses that were generated by non-repeatable Models Request-Type Gets the type of the chat request Request-IsInternal Gets a value that indicates if the current chat request is internal or not. Request-IsTask Gets a value that indicates if the current chat request was triggered by a bot Task. Previous-Concept Gets the Concept name of the last response."
  },
  "tutorial/siml/elements/variable.html": {
    "href": "tutorial/siml/elements/variable.html",
    "title": "Variable - Syn Developer Network",
    "keywords": "Variable Annotation <Variable> Definition Used to define a variable for the Bot or the User. Children MAY contain one or more <Value> elements. Attributes Required: MUST contain a Name attribute that is used to identify the variable. MUST contain a Value attribute if the element has no children. Occurrence One or more <Variable> elements MAY occur as children of either <BotSettings> or the <UserSettings> element. The Name attribute for a Variable element should be a unique identifier as its used to retrieve the value of the Variable at run-time. The value ofcourse can be a textual value set by the developer. Variable names are case-insensitive and by convention if a variable name requires 2 or more words then each word in the variable name should be separated by a - ( hyphen ) character. <BotSettings> <Variable Name=\"FullName\" Value=\"Maya\" /> </BotSettings> A Variable may store multiple values using two or more <Value> elements within it. <BotSettings> <Variable Name=\"Favorite-Movies\"> <Value>Life is beautiful</Value> <Value>Contact</Value> </Variable> </BotSettings>"
  },
  "tutorial/va/empty.html": {
    "href": "tutorial/va/empty.html",
    "title": "- Syn Developer Network",
    "keywords": ""
  },
  "tutorial/va/guidelines.html": {
    "href": "tutorial/va/guidelines.html",
    "title": "Guidelines - Syn Developer Network",
    "keywords": "Guidelines Plugin Names The name of all plugins should start with Syn.VA.Plugins . The General plugin loads all dynamic link libraries in the Plugins folder that start with the name Syn.VA.Plugins . This is to prevent loading of dependency libraries. So if you have a Plugin is about a Robot then the proper plugin namespace and assembly name would be Syn.VA.Plugins.Robot .... Long Command Execution If some user function is going to make the VA UI unresponsive then it is recommended that the function is called asynchronously and while the ...."
  },
  "tutorial/va/help-file.html": {
    "href": "tutorial/va/help-file.html",
    "title": "Custom Help File - Syn Developer Network",
    "keywords": "Custom Help File Developers who create their own plugins that are distributed online may wish to create documentation on the commands and features of their plugins. All help files for Syn Virtual Assistant are written in Markdown format. The same format used by GitHub and even this Documentation site. In Syn Virtual Assistant, when the command What can I say? is used a Help Window opens which displays a table of content on the right had side using the files found in the Syn/Resources/Help directory. The index file is always the first file listed in the table of content section. The Help Window is actually triggered because of an SIML code which looks something like the following. <Model> <Pattern>WHAT CAN I SAY</Pattern> <Response> <x:HelpWindow /> </Response> </Model> Creating Markdown Files Firstly, we will need a Markdown file editor and for this I recommend using Haroopad which seems to be a good Markdown editor with a great editor and a viewer held side by side. If you are not familiar with Markdown formats, please visit MarkdownTutorial and go through some of the simple tutorials that will help you get quickly started with Markdown document creation. Saving Markdown help file After you have finished creating your Markdown based help file, save it in the Syn/Resources/Help directory with .md file extension The name of the file without the .md extension will be used in table of content panel of the Help Window Try opening the Help Window using the command What can I say? or just Help You should now see the name of your Markdown file in the Table of Content section of the Help Window . Clicking on it will display the content of your Markdown file."
  },
  "tutorial/va/index.html": {
    "href": "tutorial/va/index.html",
    "title": "Syn VA Framework - Syn Developer Network",
    "keywords": "Syn VA Framework VA Framework allows developers to interface with Syn Virtual Assistant using a plaform independent architecture. The framework glues together multiple features that are now considered standard features for any Virtual Assistant technology. Using the VA Framework developers can interact with the following components of Syn Virtual Assistant. 3D Avatar System Speech Recognition Plugin Mechanism Bot Architecture Response Generation Message Processing Event Handling GUI Settings System NuGet PM> Install-Package Syn.VA Design Goal Because the design goal for the VA Framework is to give developers familiar experience across multiple platforms, the library has been designed using practices that ensure that the same Framework can be used to interface with any other Virtual Assistant that may be released by Synthetic Intelligence Network on a different Operating System or platform (like Mobiles ). Therefore giving a unifying experience and reducing the learning curve by a great magnitude. <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-portable.md\" --> Platforms Supported <!--END INCLUDE -->"
  },
  "tutorial/va/language-support.html": {
    "href": "tutorial/va/language-support.html",
    "title": "Adding a new language support - Syn Developer Network",
    "keywords": "Adding a new language support Syn Virtual Assistant and majority of the official plugins rely on the Syn.VA.Libraries.Language class library for String Resources . For more information on Satellite Assemblies please visit https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx VA Language Library If you wish to add a new language to Syn Virtual Assistant's GUI it is important to work with the Syn.VA.Libraries.Language . For this you'll first need to download the Syn.VA.Libraries.Language project from our GitHub repository. Unlike other satellite assemblies Syn.VA.Libraries.Language embeds all it's satellite assemblies as embedded resources which are loaded during Virtual Assistant initialization. Visit http://GitHub.com/SynHub/Syn-VA-Components and click on the green Clone or download button. Choose Download ZIP . The project will now be downloaded to your local computer. Browse to the folder and under Libraries , double click on Libraries.sln The Libraries solution will now be opened in Visual Studio . In Solution Explorer double click on Syn.VA.Libraries.Language project. Double click on the Locale folder and you'll find the StringResource.resx file. This is default resource file from which all string values are taken. Adding support for additional cultures For this we'll assume that you are trying to add support for French (fr-FR) culture. Right click the Locale folder, choose Add and then choose New Item . Scroll down and select Resources File and name the file StringResource.fr-FR.resx . Once the StringResource.fr-FR.resx file has been created you can now add Names and converted Values by referring the default StringResource.resx file. After you've successfully converted all string values build the solution and place the Syn.VA.Libraries.Language.dll in the root directory of Syn Virtual Assistant installation. Changing the Culture and UI-Culture Syn Virtual Assistant uses the Culture and UI-Culture values found in the VA settings to determine the thread culture. To explicitly specify the cultures you'll have to change the setting values. To do this, Browse to Syn/Settings folder in the root directory of Syn Virtual Assistant installation and you'll find the VA.xml file. Open VA.xml file and change the values of Culture and UI-Culture to desired language culture. Conventions followed For single words the key and the Value part should be the same. For plugins the Name part must start with PluginName_ followed by the component property. For Example EmailPlugin_DisplayName is used for specifying a value for the Name property of EmailPlugin class. Adding a description is not mandatory."
  },
  "tutorial/va/launcher.html": {
    "href": "tutorial/va/launcher.html",
    "title": "Launcher Plugin - Syn Developer Network",
    "keywords": "Launcher Plugin Command Format: Open [Application] - Launches the specified application. Open [Folder] Folder - Opens the specified special folder. Open [Website] - Opens the specified website. Search [Search-Engine] for [Query] - Performas a query search on specified search engine. Options [Application] : Application name. [Folder] : Special folder name. [Website] : Website name. [Search-Engine] : Search engine name. [Query] : Search query Example Command: Open **Notepad ** Open Music folder Open Google Search Google for Syn Virtual Assistant"
  },
  "tutorial/va/Logging.html": {
    "href": "tutorial/va/Logging.html",
    "title": "Logging - Syn Developer Network",
    "keywords": "Logging The singleton VirtualAssistant class has a Logger property, which is a static instance of the Logger class from the Syn.Log class library. Every plugin despite their architecture should use the this Logger property to log information of their internal workings."
  },
  "tutorial/va/plugin-manager.html": {
    "href": "tutorial/va/plugin-manager.html",
    "title": "Plugin Manager - Syn Developer Network",
    "keywords": "Plugin Manager To assist in the installation, creation and removal of unofficial plugins Syn Virtual Assistant comes with a standalone Plugin Manager which can be found in the root directory of Syn Virtual Assistant . The application has the following functionalities. Install Create Remove Install-Plugin If you have downloaded a plugin in .zip or .spk file format then click the Install tab and select Install-Plugin and then select the file. The Plugin Manager will properly install the files in the right directories and will also create an uninstallation index. Remove-Plugin If any external or unofficial plugin is installed, the uninstallation details are placed within the Syn/Plugins/External folder. You can uninstall a plugin by selecting the plugin name under the Remove tab and then clicking on the Remove-Plugin button. Create-Plugin Creation of a Plugin requires that you replicate the root directory structure of the installation files. For example if you wish to place a class library in the Plugins folder of Syn Virtual Assistant's installation directory then you would create 2 folders as Syn/Plugins/YourFile.dll . Once the structure is confirmed and you have placed the files in the right directory, you can give a name to your plugin and then click on the Create-Plugin button under the Create tab. Then select the directory you have just created and within that directory you'll find your plugin in .zip format."
  },
  "tutorial/va/plugin.html": {
    "href": "tutorial/va/plugin.html",
    "title": "Plugin System - Syn Developer Network",
    "keywords": "Plugin System VA Framework provides an easy inter-component interaction mechanism via the Plugin interface. Developers can either implement the IPlugin interface or inherit Plugin class to create their own plugin. Only the plugins with the public modifier will be loaded automatically by the Virtual Assistant. To avoid automatic loading of plugins set the modifier to internal and manually load the plugins. Parts of a Plugin Name Member Type Description VA Property Gets VirtualAssistant.Instance Settings Property Gets the Settings instance that belongs to this plugin. Name Property Get or sets the name of the Plugin. SpecialName Property Gets or sets the name used for displaying the Plugin to users. GetPanel<T> Method Function called to retrieve a GUI settings panel. Loader Plugin By convention the first plugin that is to be loaded into the VA Framework is the Loader plugin. This plugin is supposed to give the VA a functional architecture. For example Syn Virtual Assistant loads the Syn.VA.Plugins.Loader.dll plugin from the root directory which ensures all SIML based plugins are loaded properly into the VA Framework GetPanel() A Plugin is itself responsible for providing a GUI that enables its user to change the internal values or settings of the plugin. For this, the method GetPanel<T> is called by the Virtual Assistant's Settings Window whenever the Settings Window is opened. The type T depends on the calling application. The SettingsWindow in Syn Virtual Assistant calls the GetPanel function with T of the type System.Windows.Controls.UserControl . Conventions The name of the plugin must always be suffixed with the word Plugin . For Example an Email plugin is called EmailPlugin . If a plugin stores its settings in an xml file like the official plugins then the settings file name must contain 2 parts, the name of the plugin and the word Settings . For Example the settings file name for EmailPlugin would be EmailPluginSettings.xml . VA Plugin assembly and default namespace should start with Syn.VA.Plugins ."
  },
  "tutorial/va/reserved-settings.html": {
    "href": "tutorial/va/reserved-settings.html",
    "title": "Reserved Settings - Syn Developer Network",
    "keywords": "Reserved Settings The following Setting names with special values are reserved by their respective components. Settings Variable Name Description VA Resources-Directory Returns the path to the Resources directory VA Plugins-Directory Returns the path to the Plugins directory VA Speech-Directory Returns the path to the Speech directory VA Bot-Directory Returns the path to the base Bot Directory VA Help-Directory Returns the path in which all the Help files are stored VA License-Directory Returns the path to the License directory VA Settings-Directory Returns the path to the Settings directory VA Service-Interval Gets or sets the service call time in Milliseconds. Default value is 1000 milliseconds. VA Time-Format Gets or sets the Time Format used by InfoPanel VA Strict-Close Determines if the VA can only be shutdown via Command VA Strict-Close-Override Overrides the strict close temporarily VA First-Load Determines if the FirstLoad event needs to be triggered VA Feed-Interval Time in seconds for fetching Feeds from Syn VA Load-Time Functional: Gets the VA load time in milliseconds VA Culture Default thread culture. VA UI-Culture Default thread UI culture. Plugin Display-Name The display name of a Plugin retrieved from its Settings."
  },
  "tutorial/va/syn-virtual-assistant.html": {
    "href": "tutorial/va/syn-virtual-assistant.html",
    "title": "Syn Virtual Assistant - Syn Developer Network",
    "keywords": "Syn Virtual Assistant Syn Virtual Assistant is a project that Leslie Timmy started back in 2011. Since then it has evolved into an Advanced Virtual Assistant development platform with tons of in-built features that enable developers to create customized versions of Virtual Assistants that perform special tasks. Currently over 200,000 copies of SVA has been installed world-wide and this number is increasing at an exponential rate. Syn Virtual Assistant's development has been shaped by 1000s of user and developer suggestions in our Forum VA Framework From Prototype 8.5 onwards Syn Virtual Assistant is based on the VA Framework. This enables multiple technologies to interface with each other. The library is platform independent and contains multiple classes to help developers start the Virtual Assistant development without any hassle. System Requirements Syn Virtual Assistant has the following system requirement which must be met in its entirety before installation. Windows 7 Ultimate .Net Framework 4.5 or above pre-installed 4GB or more RAM 2.90 GHz Processor 1 GB of free Hard Disk space Headset and Microphone with Noise-Cancellation <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/platform-windows.md\" --> Platforms Supported Windows 7, Windows 8, Windows 8.1 and Windows 10 <!--END INCLUDE -->"
  },
  "tutorial/va/telegram-integration.html": {
    "href": "tutorial/va/telegram-integration.html",
    "title": "Telegram Integration - Syn Developer Network",
    "keywords": "Telegram Integration Syn Virtual Assistant can be integrated to work with Telegram API. For this developers would need to create a new (personal) Bot in telegram and obtain its HTTP API Access Token. <!-- BEGIN INCLUDE: Include content from \"tutorial/templates/telegram-bot.md\" --> Creating a Telegram Bot To obtain a Telegram Bot Access Token Download Telegram to your Desktop or Mobile from Telegram Search for BotFather and then click on Start . Type /newbot Enter a display name for your bot. In our example we've used Maya After you've specified the bot name, enter a unique Bot name. You can use _ as separators. For this tutorial we've used the name My_VA_Bot as the Bot name. After that you'll be presented with the HTTP Access Token. Copy the HTTP API access token as shown below. You have now successfully created a Telegram Bot and acquired its Access Token . <!--END INCLUDE --> Open the Settings Panel in Syn Virtual Assistant , select Telegram Bot Paste the copied Token and press Save . Enabled Auto-Connect and restart Syn Virtual Assistant . Congratulations! You can now control your Virtual Assistant using Telegram ."
  },
  "tutorial/va/troubleshoot.html": {
    "href": "tutorial/va/troubleshoot.html",
    "title": "Troubleshooting (Known Issues) - Syn Developer Network",
    "keywords": "Troubleshooting (Known Issues) Though in future version we will make an attempt to automatically address the following issues there Graphic Device Unsupported System.NotSupportedException: Could not find a graphics device that supports the HiDef profile This is a known issue in Laptops and NoteBooks with switchable graphics. Solution 1 If you have switchable graphics options try the following for NVIDIA based graphic cards. Right click on your desktop and select NVIDIA Control Panel Under Program Settings , choose Add Browse to the installation directory of Syn Virtual Assistant , select Syn Virtual Assistant.exe and choose Open Select High-performance NVIDIA Processor and choose **Apply Restart Syn Virtual Assistant . Solution 2 If the system doesn't have a dedicated graphic card that supports the Graphic Engine for Syn Virtual Assistant then to run the application without any graphic exceptions being generated it is recommended that you swith to Dock Mode in Display Modes . To switch the Virtual Assistant to run in Dock Mode, Click on Settings Button In Settings Panel select Display Mode Under Display Modes , choose Right-Dock and select Save and Restart . Start Menu Path Access System.UnauthorizedAccessException: Access to the path 'C:\\Users\\USER-NAME\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs' is denied. This is a common error in Windows 7 and should be ignored in version 8.5.6. The reason behind this exception is because the Launcher plugin tries to search for all installed applications and their shortcuts in the Start Menu folder so that you can use commands to launch them via the Virtual Assistant. Speech Recognizer ID System.ArgumentException: No recognizer of the required ID found. Syn Virtual Assistant by default uses en-US speech recognizer. If a speech recognizer for US English is unavailable the above exception may be thrown. A possible solution is to download a language pack with support for en-US speech recognizer. To do this, You add a new language pack by going to Settings > Time & language > Region & language > Add a language and choosing English (United States) . After the language pack is installed click on Options on the language pack name and select Speech and choose Download to download the Speech Recognizer language pack. Once the download has finished, restart Syn Virtual Assistant . Slow Framerate During the initial unit-tests done when the Graphic Engine was incorportated into the Syn Virtual Assistant Main Window, we noticed that certain laptop brands would not run Syn Virtual Assistant with the best Graphic Card available in their machine. For instance, some Dell laptops have an integrated Intel Graphic chip and as well as an NVIDIA Graphic Card on board. When the Virtual Assistant runs, the Intel Graphic Card is selected by the Operating System as the Graphic Processor. This results in low frame rate and unresponsive user interface. Setting the Graphic Processor A reliable solution to ensure that the right Graphic Processor is set for the Virtual Assistant application is to explicitly set the default Graphic Processor . In laptops using the NVIDIA graphic card, just right click the Virtual Assistant icon on your desktop, select Run with graphic processor then click on Change default graphic processor and set NVIDIA as the default graphic processor."
  },
  "tutorial/va/plugins/browser.html": {
    "href": "tutorial/va/plugins/browser.html",
    "title": "Browser Plugin - Syn Developer Network",
    "keywords": "Browser Plugin Provides an adapter for launching urls in an embedded browser that can either be opened in a new window or displayed within the Virtual Assistant's Display Panel . SIML Adapters 1. Browser Annotation <o:Browser> Definition Opens the Link or the Html content within the In-Built Browser window. Children MUST contain an arbitrary text specifying the navigation url OR Target attribute that specifies if the arbitrary text is a Link or an Html content. Usage <o:Browser>http://syn.co.in</o:Browser> Opens the syn.co.in in Browser <o:Browser Target=\"Html\"> <Var Get=\"some-html\"/> </o:Browser> Loads the HTML content in the Browser and displays it. 2. WebPanel Annotation <o:WebPanel> Definition Opens the Link within a browser that stays within the Display Panel . Children MUST contain an arbitrary text specifying the navigation url OR Url attribute that specifies the website url Usage <o:WebPanel Url=\"http://syn.co.in\"> Or <o:WebPanel>http://syn.co.in</o:WebPanel> Requirements Requires an active Internet connection."
  },
  "tutorial/va/plugins/channel.html": {
    "href": "tutorial/va/plugins/channel.html",
    "title": "Channel Plugin - Syn Developer Network",
    "keywords": "Channel Plugin This plugin enables calling of commands using a local url via Web API interface. All messages received are processed under the Main Virtual Assistant user's context. Example Reply Once a message is processed the reply can be serialzed to xml format or json format. <Result> <Message>Thank you</Message> <Success>true</Success> </Result> Settings Name Description Port-Number The port number to listen to for API usage Enabled Determines if the server is enabled on Virtual Assistant startup Url Format http://localhost:{PortNumber}/VA/command/send?message={Message} Argument Description PortNumber Specified value of Port-Number Message The message to be processed by the Virtual Assistant Requirements Administraive rights to start the internal server."
  },
  "tutorial/va/plugins/contact.html": {
    "href": "tutorial/va/plugins/contact.html",
    "title": "Contact Plugin - Syn Developer Network",
    "keywords": "Contact Plugin Enables fetching of Windows Contact details like phone numbers and email addresses using contact names. SIML Adapters Contact Annotation <o:Contact> Definition Gets the contact number or the email address of the specified contact. Children MUST contain an arbitrary text specifying the contact name and MUST contain a Get attribute with value Number or Email Usage <o:Contact Get=\"Number\">Peter</o:Contact> Returns the phone number of Peter <o:Contact Get=\"Email\">Peter</o:Contact> Returns the address of Peter Sets Name Description Contact Names of all the Windows Contacts stored. Requirements Contact list in Windows Contact"
  },
  "tutorial/va/plugins/dictionary.html": {
    "href": "tutorial/va/plugins/dictionary.html",
    "title": "Dictionary Plugin - Syn Developer Network",
    "keywords": "Dictionary Plugin This plugin provides definitions, synonyms, spelling corrections and hyphenations of the specified word or phrase. SIML Adapters 1. Dictionary Annotation <o:Dictionary> Definition Gets the definition of the word specified Children MUST contain an arbitrary text specifying the word whose definition is to be searched. Supported Language English Usage <o:Dictionary>sprightly</o:Dictionary> Sets the Var variable definition with the value of the definition found. 2. Thesaurus Annotation <o:Thesaurus> Definition Gets the synonyms , spell corrections or hyphenations of the word specified Children MUST contain an arbitrary text specifying the target word Supported Language English Usage <o:Thesaurus Get=\"Synonym\">energetic</o:Thesaurus> Gets all synonyms of the word energetic . <o:Thesaurus Get=\"Spell\">encyclopedi</o:Thesaurus> Gets all possible spell corrections for the misspelled word encyclopedi . <o:Thesaurus Get=\"Hyphenate\">encyclopedia</o:Thesaurus> Gets hyphenations of the word encyclopedia Settings Name Description Use-Common Determines if common definitions should be used"
  },
  "tutorial/va/plugins/email.html": {
    "href": "tutorial/va/plugins/email.html",
    "title": "Email Plugin - Syn Developer Network",
    "keywords": "Email Plugin Allows reading and checking of new emails that are received in the Bot's personal email address. The email address must be a registered gmail adddress. Never use your personal email address for this feature. Developers are asked to create a new gmail id for the Bot. SIML Adapters Email Annotation <o:Email> Definition Checks or Reads an Unseen email Children MUST contain a Task attribute Events Email-New , Email-No-New , Email-Read-Text and Email-Read-Html Usage <o:Email Task=\"Check\"/> Raises the event New-Email if an unseen email is found otherwise No-New-Email . <o:Email Task=\"Read\"/> Reads the previously checked email's content. Raises Read-Email-Text or Read-Email-Html based on the content type of the email. Events Name Description Email-New Triggered when a unseen email is found. Email-No-New Triggered when a no unseen emails are found. Email-Read-Text Triggered when Read task attribute is specified and the content type of the email is Text . Email-Read-Html Triggered when Read task attribute is specified and the content type of the email is Html . Email-Connection-Failed Raised when email client fails to establish a connection. Email-Login-Failed Raised when the email client is unable to login using the credentials provided. Settings Name Description Bot-Email Email address of the Bot. Service-Provider Set to Gmail.com by default. Password Encrypted password for email address provided. Requirements Requires an active Internet connection. New Gmail address for the Bot."
  },
  "tutorial/va/plugins/horoscope.html": {
    "href": "tutorial/va/plugins/horoscope.html",
    "title": "Horoscope Plugin - Syn Developer Network",
    "keywords": "Horoscope Plugin Fetches the Horoscope of the specified Zodiac sign . SIML Adapters Horoscope Annotation <o:Horoscope> Definition Gets the user's Horoscope for the day Children MUST contain an arbitrary text specifying the Zodiac Sign OR a Sign attribute that specifies the Zodiac sign Usage <o:Horoscope>Gemini</o:Horoscope> Or <o:Horoscope Sign=\"Gemini\"/> Returns Gemini's Horoscope for the day. The value returned in is Text format. Settings Name Description Zodiac-Sign The zodiac sign of the main user. Zodiac-Sign-List List of all the Zodiac signs. Requirements An active internet connection."
  },
  "tutorial/va/plugins/htmlpanel.html": {
    "href": "tutorial/va/plugins/htmlpanel.html",
    "title": "HtmlPanel Plugin - Syn Developer Network",
    "keywords": "HtmlPanel Plugin Provides a control to render HTML contents within the Virtual Assistant Display Panel SIML Adapters HtmlPanel Annotation <o:HtmlPanel> Definition Renders Html content Children MUST contain HTML in arbitrary text format Usage <o:HtmlPanel><Var Get=\"Html-Content\"/></o:HtmlPanel> Renders the HTML content provided by the variable Html-Content The adapter returns an empty string."
  },
  "tutorial/va/plugins/interaction.html": {
    "href": "tutorial/va/plugins/interaction.html",
    "title": "Interaction Plugin - Syn Developer Network",
    "keywords": "Interaction Plugin The Interaction plugin raises events when known application processes are detected or are running for a longer period of time. This plugin functions by adding a new service with the ID Interaction-Monitoring-Service to the Virtual Assistant's service collection. Events Event Description Interaction-Detected ProcessName Triggered when the known Process is active. Busy-Interaction-Detected ProcessName Triggered when the known Process is active for a long period of time Settings Name Description Busy-Level-Start Determines the time in seconds that renders an interaction as Busy . Busy-Level-End Determines the time in seconds that ends an interaction as Busy . Known-Processes List of all known processes."
  },
  "tutorial/va/plugins/launcher.html": {
    "href": "tutorial/va/plugins/launcher.html",
    "title": "Launcher Plugin - Syn Developer Network",
    "keywords": "Launcher Plugin Helps launching of applications, known folders, websites and to perform searches on saved search engines. SIML Adapters 1. App Annotation <o:App> Definition Opens or closes the specified application Children Must contain an arbitrary text specifying the name of the application to be launched or closed and may contain a Task attribute the value of which specifies the task to perform. The value of the Task attribute can be Open , Close or Kill . Usage <o:App>Notepad</o:App> Opens the application named Notepad <o:App Task=\"Close\">Notepad</o:App> Closes the application named Notepad 2. Folder Annotation <o:Folder> Definition Opens the specified folder. Children Must contain an arbitrary text specifying the name of the folder to open. Usage <o:Folder>Documents</o:Folder> Opens the user's documents folder. 3. Website Annotation <o:Website> Definition Opens the specified website in the default browser. Children Must contain an arbitrary text specifying the name of the website to open. Usage <o:Website>Google</o:Website> Launches the url http://www.google.com 4. SearchSite Annotation <o:SearchSite> Definition Opens the specified search engne url in the default browser. Children Must contain an arbitrary text specifying the search query and must contain a Link attribute that specifies the name of the search engine to use. Usage <o:SearchSite Link=\"Google\">Syn Virtual Assistant</o:SearchSite> Launches the url https://www.google.com/search?q=Syn Virtual Assistant Maps This plugin creates multiple SIML Maps during initialization by using the values set in the plugin's settings. Map Name Description Map:ApplicationList Names of all known applications. Map:SearchEngineList Names of all known search engines. Map:WebsiteList Names of all the known websites. Map:DirectoryList Names of all the known directories."
  },
  "tutorial/va/plugins/loader.html": {
    "href": "tutorial/va/plugins/loader.html",
    "title": "Loader Plugin - Syn Developer Network",
    "keywords": "Loader Plugin The Loader plugin is the only plugin that is loaded by Syn Virtual Assistant. This plugin is responsible for loading all other plugins and to provide a Bot interface to the Virtual Assistant. The default Loader plugin provides an SIML Bot architecture to Syn Virtual Assistant. This plugin also provides a few adapters and a settings interface for the Main user. Knowledge-Base The following SIML Projects are loaded in their respective order by the Loader Plugin. These projects usually present in the Syn/Bot directory. Project File Description Commands.SimlProj Contains all commands for all official plugins. General.SimlProj A general purpose chat bot knowledge base. External After the above projects have been loaded the plugin will search for SIML Projects in the directory provided by the External-Bot-Directory variable in VA Settings. SIML Adapters 1. Agent Annotation <o:Agent> Definition Allows trivial interactions with the Virtual Assistant Children Must contain a Task , Get or Set attribute. Attributes |Name|Value|Description| |:---|:---| |Task|Exit|Shuts down the Virtual Assistant.| |Task|Restart|Restarts the Virtual Assistant application.| |Get| variable name |Gets the value of the specified variable. A colon can be used to specify the plugin name. Example Get=Weather:Location will return the value of the variable Location from Weather plugin settings.| |Set| variable name |Sets the value of the specified variable. A colon separator can be used to specify the plugin name.| Example <o:Agent Task=\"Restart\" /> Restarts the Virtual Assistant. <o:Agent Get=\"Weather:Location\" /> Gets the value of the Location variable from Weather plugin settings. 2. Credit Annotation <o:Credit> Definition Displays a credit link in the Virtual Assistant's Display Panel . Children Must contain a Title and Url attribute. Specifying the title and the url to open when the user clicks on the title . Example <o:Credit Title=\"Powered by Syn!\" Url=\"http://www.syn.co.in\" /> Displays Powered by Syn and when the user clicks on the link the url http://www.syn.co.in is opened. This adapter must always be used if an external API from a service provider requires you to display there credit link. 3. HelpWindow Annotation <o:HelpWindow> Definition Displays a Help Window to search for help files. Children May contain a Title attribute that specifies that Window Title . Example <o:HelpWindow /> Displays the Help Window. 4. TextWindow Annotation <o:TextWindow> Definition Opens the specified text file in a separate window. Children Must contain an arbitrary text specifying the file path and may contain a Title attribute that specifies that Window Title . Example <o:TextWindow Title=\"Log File\">Log.txt</o:TextWindow> Opens the file Log.txt in a separate window."
  },
  "tutorial/va/plugins/map.html": {
    "href": "tutorial/va/plugins/map.html",
    "title": "Map Plugin - Syn Developer Network",
    "keywords": "Map Plugin Renders map of the specified location directly within the Virtual Assistant's Display Panel . SIML Adapters Map Annotation <o:Map> Definition Gets map of the specified location. Children Must contain an arbitrary text specifying the location whose map is to be retrieved. Usage <o:Map>Bangalore India</o:Map> Returns the map of Bangalore, India This adapter returns an empty after inserting a Map control to the Virtual Assistant's Display Panel Settings Name Description Map-Provider The map service provider to use. Default-Zoom Default zoom value to use while rendering a map. Minimum-Zoom Minimum zoom value. Maximum-Zoom Maximum zoom allowed."
  },
  "tutorial/va/plugins/media.html": {
    "href": "tutorial/va/plugins/media.html",
    "title": "Media Plugin - Syn Developer Network",
    "keywords": "Media Plugin This plugin enables playback of audio and video files with added functionalities like resuming , pausing and changing tracks of current media files. Support media file types are .mp3 , .avi and mp4 . SIML Adapters 1. Music Annotation <o:Music> Definition Play music files from the set music directory. Children May contain Genre , Title , Artist , Album or Task attribute. Attributes Name Description Title Name of the song. Genre Genre of the music to be played. Artist Name of the song artist. Album Name of the song album. Task Task to perform on the current player. Values can be Resume , Pause , Next and Previous Usage <o:Music Genre=\"Rock\"/> Plays rock music. <o:Music Title=\"brand new day\"/> Plays the song brand new day . <o:Music Artist=\"Ronan Keating\"/> Plays the song by sir Ronan Keating . <o:Music Album=\"Destination\"/> Plays the album Destination . <o:Music Task=\"Pause\"/> Pauses the song playback. <o:Music Task=\"Resume\"/> Resumes the currently paused song. <o:Music Task=\"Stop\"/> Stops the song playback and closes the music player. <o:Music Task=\"Next\"/> Plays the next song in the playlist. <o:Music Task=\"Previous\"/> Plays the previous song from the playlist. 2. Video Annotation <o:Video> Definition Plays the specified video file. Children May contain Title or Task . Attributes Name Description Title Name of the video. Task Task to perform on the current player. Value can be Stop Events Name Description Music-Directory-Indexed Raised when the newly specified music directory has been indexed by the plugin. Music-Played Raised when a randomly generated song playlist is played after <o:Music /> is evaluated. Music-Genre-Played Raised when the songs of the specified genre are being played after <o:Music Genre=\"Some Genre\"/> is evaluated. Music-Title-Played Raised when the specified song is being played after <o:Music Title=\"Some song name\"/> is evaluated. Music-Album-Played Raised when the specified album is being played after <o:Music Album=\"Some Album\"/> is evaluated. Music-Artist-Played Raised when songs by the specified artist are being played after <o:Music Artist=\"Some song artist\"/> is evaluated. Music-Idle Raised when a Task command is evaluated while no songs are being played. Music-Resumed Raised when a previously paused music is resumed after <o:Music Task=\"Resume\"/> is evaluated. Music-Paused Raised when the current song is paused after <o:Music Task=\"Pause\"/> is evaluated. Music-Stopped Raised when the current song is stopped after <o:Music Task=\"Stop\"/> is evaluated. Music-Next-Track Raised when the next track is selected from the playlist after <o:Music Task=\"Next\"/> is evaluated. Music-Previous-Track Raised when the previous track is selected from the playlist after <o:Music Task=\"Previous\"/> is evaluated. Music-No-Media Raised when no media files are found in the music directory. Video-Directory-Indexed Raised when the newly specified video directory has been indexed by the plugin. Video-Title-Played Raised when the specified video is being played after <o:Video Title=\"Some video file name\"/> is evaluated. Video-Stopped Raised the current video playback is stopped afte <o:Video Task=\"Stop\"/> is evaluated. Video-Idle Raised when a Task command is evaluated while no video is being played Settings Name Description Music-Directory The directory where all music files are saved. Video-Directory The directory where all video files are saved."
  },
  "tutorial/va/plugins/messaging.html": {
    "href": "tutorial/va/plugins/messaging.html",
    "title": "Messaging Plugin - Syn Developer Network",
    "keywords": "Messaging Plugin The Messaging plugin enables direct chat interactions with the Virtual Assistant using Telegram Bot API. Settings Name Description Telegram-API-Key The generated Telegram Bot API Key. Auto-Connect Determines if the Telegram Bot client must be initialized after the Virtual Assistant has started."
  },
  "tutorial/va/plugins/movieinfo.html": {
    "href": "tutorial/va/plugins/movieinfo.html",
    "title": "MovieInfo Plugin - Syn Developer Network",
    "keywords": "MovieInfo Plugin This plugin allows the user to fetch details about a movie using Omdb API interface. SIML Adapters MovieInfo Annotation <o:MovieInfo> Definition Gets information regarding the movie name specified. Children Must contain an arbitrary text specifying the name of the movie and a Get attribute that specifies the type of information to fetched. Attribute Name Description Get The type of information to retrieve. Values can be Plot , Director , Rating , Language , Genre , Votes , Writer , Country , Year , Awards and Actors Usage <o:MovieInfo Get=\"Director\">Life is beautiful</o:MovieInfo> Returns the name of the director of the movie \" Life is beautiful \". <o:MovieInfo Get=\"Plot\">Contact</o:MovieInfo> Gets plot of the movie \" Contact \". This adapter returns a response in Text format."
  },
  "tutorial/va/plugins/news.html": {
    "href": "tutorial/va/plugins/news.html",
    "title": "News Plugin - Syn Developer Network",
    "keywords": "News Plugin The plugin provides an adapter that lets developers retrieve the latest news headlines from BBC's RSS News Feed. Adapters News Annotation <o:News> Definition Gets the news headlines from BBC RSS Feed in HTML format Usage <o:News/> Raises the event News-Headline-Query after an HTML value from BBC News RSS Feed is generated. Events Name Description News-Headline-query Raised when the latest news headline is successfully retrieved after <o:News/> is evaluated. The News-Headline-Value variable is set to contain the HTML content. An HtmlPanel must be used to render the HTML content returned by this Adapter."
  },
  "tutorial/va/plugins/performance.html": {
    "href": "tutorial/va/plugins/performance.html",
    "title": "Performance Plugin - Syn Developer Network",
    "keywords": "Performance Plugin This plugin is designed for low profile computers that run on very low Random Access Memory. If set, the plugin will flush the memory used by the Virtual Assistant at regular intervals. For computers meeting the minimum system requirements for Syn Virtual Assistant it is recommended that you keep this plugin turned off. Settings Name Description Memory-Flush Determines if memory flush is enabled. Flush-Interval The interval, in minutes, to flush the memory."
  },
  "tutorial/va/plugins/service.html": {
    "href": "tutorial/va/plugins/service.html",
    "title": "Service Plugin - Syn Developer Network",
    "keywords": "Service Plugin This service plugin manages all the add VA Services. It provides options to enable or disable an added service via the Settings Panel . Services Name Description System-Uptime-Service Service that reminds the system update every hour. The variable system-uptime returns the number of hours the system was running. Drive-Space-Reminder-Service Service that reports if a drive is running low on disk space. The variable Drive-Name returns the name of the drive running low on disk space. Time-Reminder-Service Reminds system time every new hour. Events Name Description Time-Reminder-Service-Event Raised by the Time-Reminder-Service service. System-Uptime-Service-Event Raised by the System-Uptime-Service service. Drive-Space-Reminder-Event Raised by Drive-Space-Reminder-Service when a drive is low on disk space Settings This settings file of this plugin may contain the name of any service whose Enabled property was changed via Settings Panel . For example if the Time-Reminder-Service is disabled the settings file will contain <Item Name=\"Time-Reminder-Service\" Value=\"false\" />"
  },
  "tutorial/va/plugins/skype.html": {
    "href": "tutorial/va/plugins/skype.html",
    "title": "Skype Plugin - Syn Developer Network",
    "keywords": "Skype Plugin This plugin lets users make a skype call using Virtual Assistant commands. If Skype is not initially launched by the Virtual Assistant then users must again login after using the command is activated. SIML Adapters Skype Annotation <o:Skype> Definition Makes a Skype call to the specified User Children MUST contain an arbitrary text specifying Skype User's ID Usage <o:Skype>echo123</o:Skype> Calls echo123 in Skype. Skype must be installed in user computer for this adapter to work. Settings Name Description Skype-Users List of all known Skype contact names."
  },
  "api/Syn.Bot.Siml.Extensions.TokenExtensions.html": {
    "href": "api/Syn.Bot.Siml.Extensions.TokenExtensions.html",
    "title": "Class TokenExtensions - Syn Developer Network",
    "keywords": "Class TokenExtensions Inheritance System.Object TokenExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Extensions Assembly :Syn.Bot.dll Syntax public static class TokenExtensions Methods IsPrecision(Token) Declaration public static bool IsPrecision(this Token token) Parameters Type Name Description Token token Returns Type Description System.Boolean"
  },
  "api/Syn.Bot.Siml.Extensions.WeightedItem-1.html": {
    "href": "api/Syn.Bot.Siml.Extensions.WeightedItem-1.html",
    "title": "Class WeightedItem<T> - Syn Developer Network",
    "keywords": "Class WeightedItem<T> Inheritance System.Object WeightedItem<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Extensions Assembly :Syn.Bot.dll Syntax public class WeightedItem<T> Type Parameters Name Description T Constructors WeightedItem(T, Double) Declaration public WeightedItem(T value, double weight) Parameters Type Name Description T value System.Double weight Properties Value Declaration public T Value { get; set; } Property Value Type Description T Weight Declaration public double Weight { get; set; } Property Value Type Description System.Double"
  },
  "api/Syn.Bot.Siml.Extensions.html": {
    "href": "api/Syn.Bot.Siml.Extensions.html",
    "title": "Namespace Syn.Bot.Siml.Extensions - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Extensions Classes MapExtensions RandomExtensions TokenExtensions WeightedItem<T>"
  },
  "api/Syn.Bot.Siml.FilterTarget.html": {
    "href": "api/Syn.Bot.Siml.FilterTarget.html",
    "title": "Enum FilterTarget - Syn Developer Network",
    "keywords": "Enum FilterTarget Provides enumerated values to determine the target of filtration. Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public enum FilterTarget Fields Name Description Both Targets both user input and bot output Input Targets user input Output Targets user and bot output"
  },
  "api/Syn.Bot.Siml.Functional.FunctionalMapItem.html": {
    "href": "api/Syn.Bot.Siml.Functional.FunctionalMapItem.html",
    "title": "Class FunctionalMapItem - Syn Developer Network",
    "keywords": "Class FunctionalMapItem Default implementation of Syn.Bot.Siml.Interfaces.IFunctionalMapItem interface. Inheritance System.Object FunctionalMapItem Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Functional Assembly :Syn.Bot.dll Syntax public class FunctionalMapItem : IFunctionalMapItem, IMapItem, IVolatile Constructors FunctionalMapItem(String, String) Initializes a new instance of the FunctionalMapItem class. Declaration public FunctionalMapItem(string content, string value) Parameters Type Name Description System.String content The content. System.String value The value. Properties Content Gets or sets the content. Declaration public string Content { get; set; } Property Value Type Description System.String The content. Implements IMapItem.Content Value Gets or sets the value. Declaration public string Value { get; set; } Property Value Type Description System.String The value. Implements IMapItem.Value"
  },
  "api/Syn.Bot.Siml.Helper.StringComparisonUtility.html": {
    "href": "api/Syn.Bot.Siml.Helper.StringComparisonUtility.html",
    "title": "Class StringComparisonUtility - Syn Developer Network",
    "keywords": "Class StringComparisonUtility Inheritance System.Object StringComparisonUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public class StringComparisonUtility Methods ComparisonAlgorithmFromName(String) Declaration public ComparisonAlgorithm ComparisonAlgorithmFromName(string algorithmName) Parameters Type Name Description System.String algorithmName Returns Type Description ComparisonAlgorithm HammingDistance(String, String) Declaration public int HammingDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Int32 JaccardDistance(String, String) Declaration public double JaccardDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double JaroDistance(String, String) Declaration public double JaroDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double JaroWinklerDistance(String, String) Declaration public double JaroWinklerDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double LevenshteinDistance(String, String) Declaration public int LevenshteinDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Int32 LongestCommonSubsequence(String, String) Declaration public string LongestCommonSubsequence(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.String LongestCommonSubstring(String, String) Declaration public string LongestCommonSubstring(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.String OverlapCoefficient(String, String) Declaration public double OverlapCoefficient(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double RatcliffObershelpSimilarity(String, String) Declaration public double RatcliffObershelpSimilarity(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double SentenceSimilarity(String, String) Default Similarity Algorithm based on advanced search techniques. Declaration public double SentenceSimilarity(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double SorensenDiceDistance(String, String) Declaration public double SorensenDiceDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double TanimotoCoefficient(String, String) Declaration public double TanimotoCoefficient(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Double"
  },
  "api/Syn.Bot.Siml.Helper.StringUtility.html": {
    "href": "api/Syn.Bot.Siml.Helper.StringUtility.html",
    "title": "Class StringUtility - Syn Developer Network",
    "keywords": "Class StringUtility Inheritance System.Object StringUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public static class StringUtility Properties Comparison Declaration public static StringComparisonUtility Comparison { get; } Property Value Type Description StringComparisonUtility Methods GetBestWordDistance(String, IEnumerable<String>) Declaration public static string GetBestWordDistance(string source, IEnumerable<string> targetList) Parameters Type Name Description System.String source System.Collections.Generic.IEnumerable < System.String > targetList Returns Type Description System.String GetCommaSeparatedValues(String) Declaration public static List<string> GetCommaSeparatedValues(string text) Parameters Type Name Description System.String text Returns Type Description System.Collections.Generic.List < System.String > GetSafeAlphaNumeric(String, Char[]) Declaration public static string GetSafeAlphaNumeric(string token, char[] allowedCharacters) Parameters Type Name Description System.String token System.Char [] allowedCharacters Returns Type Description System.String GetSimilarityScore(String, String, ComparisonAlgorithm) Declaration public static double GetSimilarityScore(string source, string target, ComparisonAlgorithm comparisonAlgorithm) Parameters Type Name Description System.String source System.String target ComparisonAlgorithm comparisonAlgorithm Returns Type Description System.Double GetWordDistance(String, String) Declaration public static int GetWordDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Int32 GetWords(String) Declaration public static string[] GetWords(string sentence) Parameters Type Name Description System.String sentence Returns Type Description System.String [] Reverse(String) Declaration public static string Reverse(string text) Parameters Type Name Description System.String text Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Helper.Tag.html": {
    "href": "api/Syn.Bot.Siml.Helper.Tag.html",
    "title": "Class Tag - Syn Developer Network",
    "keywords": "Class Tag Inheritance System.Object Tag Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public static class Tag Fields AddAttribute Declaration public const string AddAttribute = \"Add\" Field Value Type Description System.String AltAttribute Declaration public const string AltAttribute = \"Alt\" Field Value Type Description System.String AtAttribute Declaration public const string AtAttribute = \"At\" Field Value Type Description System.String Bind Declaration public const string Bind = \"Bind\" Field Value Type Description System.String Bot Declaration public const string Bot = \"Bot\" Field Value Type Description System.String BotAttribute Declaration public const string BotAttribute = \"Bot\" Field Value Type Description System.String BotEmotion Declaration public const string BotEmotion = \"BotEmotion\" Field Value Type Description System.String BotSettings Declaration public const string BotSettings = \"BotSettings\" Field Value Type Description System.String Case Declaration public const string Case = \"Case\" Field Value Type Description System.String CharAtAttribute Declaration public const string CharAtAttribute = \"CharAt\" Field Value Type Description System.String ChunkSymbol Declaration public const string ChunkSymbol = \"-\" Field Value Type Description System.String CloseRoundBracketSymbol Declaration public const string CloseRoundBracketSymbol = \")\" Field Value Type Description System.String CloseSquareBracketSymbol Declaration public const string CloseSquareBracketSymbol = \"]\" Field Value Type Description System.String Concept Declaration public const string Concept = \"Concept\" Field Value Type Description System.String ConceptAttribute Declaration public const string ConceptAttribute = \"Concept\" Field Value Type Description System.String ConceptMatch Declaration public const string ConceptMatch = \"ConceptMatch\" Field Value Type Description System.String ConceptTagged Declaration public const string ConceptTagged = \"<Concept>\" Field Value Type Description System.String ContainsAttribute Declaration public const string ContainsAttribute = \"Contains\" Field Value Type Description System.String ContentAttribute Declaration public const string ContentAttribute = \"Content\" Field Value Type Description System.String Date Declaration public const string Date = \"Date\" Field Value Type Description System.String Default Declaration public const string Default = \"Default\" Field Value Type Description System.String DefinedAttribute Declaration public const string DefinedAttribute = \"Defined\" Field Value Type Description System.String DelayAttribute Declaration public const string DelayAttribute = \"Delay\" Field Value Type Description System.String DescriptionAttribute Declaration public const string DescriptionAttribute = \"Description\" Field Value Type Description System.String DollarSymbol Declaration public const string DollarSymbol = \"$\" Field Value Type Description System.String Echo Declaration public const string Echo = \"Echo\" Field Value Type Description System.String Else Declaration public const string Else = \"Else\" Field Value Type Description System.String ElseIf Declaration public const string ElseIf = \"ElseIf\" Field Value Type Description System.String Emotion Declaration public const string Emotion = \"emotion\" Field Value Type Description System.String EmotionML Declaration public const string EmotionML = \"emotionml\" Field Value Type Description System.String EnabledAttribute Declaration public const string EnabledAttribute = \"Enabled\" Field Value Type Description System.String EndTagged Declaration public const string EndTagged = \"<End>\" Field Value Type Description System.String Esc Declaration public const string Esc = \"Esc\" Field Value Type Description System.String Event Declaration public const string Event = \"Event\" Field Value Type Description System.String EventTagged Declaration public const string EventTagged = \"<Event>\" Field Value Type Description System.String Example Declaration public const string Example = \"Example\" Field Value Type Description System.String ExistsAttribute Declaration public const string ExistsAttribute = \"Exists\" Field Value Type Description System.String Expression Declaration public const string Expression = \"Expression\" Field Value Type Description System.String FileIdAttribute Declaration public const string FileIdAttribute = \"FileID\" Field Value Type Description System.String Filter Declaration public const string Filter = \"Filter\" Field Value Type Description System.String Format Declaration public const string Format = \"Format\" Field Value Type Description System.String FormatAttribute Declaration public const string FormatAttribute = \"Format\" Field Value Type Description System.String GetAttribute Declaration public const string GetAttribute = \"Get\" Field Value Type Description System.String GlobalAttribute Declaration public const string GlobalAttribute = \"Global\" Field Value Type Description System.String Goto Declaration public const string Goto = \"Goto\" Field Value Type Description System.String GotoMatch Declaration public const string GotoMatch = \"GotoMatch\" Field Value Type Description System.String GotoParent Declaration public const string GotoParent = \"GotoParent\" Field Value Type Description System.String GreaterThanAttribute Declaration public const string GreaterThanAttribute = \"GreaterThan\" Field Value Type Description System.String GreaterThanOrAttribute Declaration public const string GreaterThanOrAttribute = \"GreaterThanOr\" Field Value Type Description System.String HashSymbol Declaration public const string HashSymbol = \"#\" Field Value Type Description System.String Hint Declaration public const string Hint = \"Hint\" Field Value Type Description System.String HintAttribute Declaration public const string HintAttribute = \"Hint\" Field Value Type Description System.String HourAttribute Declaration public const string HourAttribute = \"Hour\" Field Value Type Description System.String IdAttribute Declaration public const string IdAttribute = \"ID\" Field Value Type Description System.String If Declaration public const string If = \"If\" Field Value Type Description System.String IndexAttribute Declaration public const string IndexAttribute = \"Index\" Field Value Type Description System.String Input Declaration public const string Input = \"Input\" Field Value Type Description System.String IsEmptyAttribute Declaration public const string IsEmptyAttribute = \"IsEmpty\" Field Value Type Description System.String Item Declaration public const string Item = \"Item\" Field Value Type Description System.String JavaScript Declaration public const string JavaScript = \"Js\" Field Value Type Description System.String JavaScriptAttribute Declaration public const string JavaScriptAttribute = \"Js\" Field Value Type Description System.String KeyAttribute Declaration public const string KeyAttribute = \"Key\" Field Value Type Description System.String Label Declaration public const string Label = \"Label\" Field Value Type Description System.String LabelAttribute Declaration public const string LabelAttribute = \"Label\" Field Value Type Description System.String LabelTagged Declaration public const string LabelTagged = \"<Label>\" Field Value Type Description System.String Late Declaration public const string Late = \"Late\" Field Value Type Description System.String Learn Declaration public const string Learn = \"Learn\" Field Value Type Description System.String LessThanAttribute Declaration public const string LessThanAttribute = \"LessThan\" Field Value Type Description System.String LessThanOrAttribute Declaration public const string LessThanOrAttribute = \"LessThanOr\" Field Value Type Description System.String ListAttribute Declaration public const string ListAttribute = \"List\" Field Value Type Description System.String LowPrioritySymbol Declaration public const string LowPrioritySymbol = \"&\" Field Value Type Description System.String Lua Declaration public const string Lua = \"Lua\" Field Value Type Description System.String Map Declaration public const string Map = \"Map\" Field Value Type Description System.String MapItem Declaration public const string MapItem = \"MapItem\" Field Value Type Description System.String Match Declaration public const string Match = \"Match\" Field Value Type Description System.String Math Declaration public const string Math = \"Math\" Field Value Type Description System.String MaxAttribute Declaration public const string MaxAttribute = \"Max\" Field Value Type Description System.String MinAttribute Declaration public const string MinAttribute = \"Min\" Field Value Type Description System.String MinuteAttribute Declaration public const string MinuteAttribute = \"Minute\" Field Value Type Description System.String Model Declaration public const string Model = \"Model\" Field Value Type Description System.String NameAttribute Declaration public const string NameAttribute = \"Name\" Field Value Type Description System.String NotAttribute Declaration public const string NotAttribute = \"Not\" Field Value Type Description System.String NullValueSymbol Declaration public const string NullValueSymbol = \"*\" Field Value Type Description System.String OpenRoundBracketSymbol Declaration public const string OpenRoundBracketSymbol = \"(\" Field Value Type Description System.String OpenSquareBracketSymbol Declaration public const string OpenSquareBracketSymbol = \"[\" Field Value Type Description System.String OptionsAttribute Declaration public const string OptionsAttribute = \"Options\" Field Value Type Description System.String Output Declaration public const string Output = \"Output\" Field Value Type Description System.String OwnerAttribute Declaration public const string OwnerAttribute = \"Owner\" Field Value Type Description System.String Pattern Declaration public const string Pattern = \"Pattern\" Field Value Type Description System.String PatternAttribute Declaration public const string PatternAttribute = \"Pattern\" Field Value Type Description System.String PatternTagged Declaration public const string PatternTagged = \"<Pattern>\" Field Value Type Description System.String PercentSymbol Declaration public const string PercentSymbol = \"%\" Field Value Type Description System.String Phrase Declaration public const string Phrase = \"Phrase\" Field Value Type Description System.String Previous Declaration public const string Previous = \"Previous\" Field Value Type Description System.String PreviousMatch Declaration public const string PreviousMatch = \"PreviousMatch\" Field Value Type Description System.String PreviousTagged Declaration public const string PreviousTagged = \"<Previous>\" Field Value Type Description System.String PriorityWordSymbol Declaration public const string PriorityWordSymbol = \"^\" Field Value Type Description System.String PrivateValue Declaration public const string PrivateValue = \"Private\" Field Value Type Description System.String Process Declaration public const string Process = \"Process\" Field Value Type Description System.String PublicValue Declaration public const string PublicValue = \"Public\" Field Value Type Description System.String Raise Declaration public const string Raise = \"Raise\" Field Value Type Description System.String Random Declaration public const string Random = \"Random\" Field Value Type Description System.String RankAttribute Declaration public const string RankAttribute = \"Rank\" Field Value Type Description System.String Regex Declaration public const string Regex = \"Regex\" Field Value Type Description System.String RegexAttribute Declaration public const string RegexAttribute = \"Regex\" Field Value Type Description System.String RegexSymbol Declaration public const string RegexSymbol = \"@\" Field Value Type Description System.String Remember Declaration public const string Remember = \"Remember\" Field Value Type Description System.String RemoveAttribute Declaration public const string RemoveAttribute = \"Remove\" Field Value Type Description System.String Repeat Declaration public const string Repeat = \"Repeat\" Field Value Type Description System.String RepeatAttribute Declaration public const string RepeatAttribute = \"Repeat\" Field Value Type Description System.String Request Declaration public const string Request = \"Request\" Field Value Type Description System.String Response Declaration public const string Response = \"Response\" Field Value Type Description System.String ResponseTagged Declaration public const string ResponseTagged = \"<Response>\" Field Value Type Description System.String Result Declaration public const string Result = \"Result\" Field Value Type Description System.String ReverseAttribute Declaration public const string ReverseAttribute = \"Reverse\" Field Value Type Description System.String RoundAttribute Declaration public const string RoundAttribute = \"Round\" Field Value Type Description System.String Script Declaration public const string Script = \"Script\" Field Value Type Description System.String SecondAttribute Declaration public const string SecondAttribute = \"Second\" Field Value Type Description System.String Sense Declaration public const string Sense = \"Sense\" Field Value Type Description System.String Service Declaration public const string Service = \"Service\" Field Value Type Description System.String Set Declaration public const string Set = \"Set\" Field Value Type Description System.String SetAttribute Declaration public const string SetAttribute = \"Set\" Field Value Type Description System.String Siml Declaration public const string Siml = \"Siml\" Field Value Type Description System.String SimlPackage Declaration public const string SimlPackage = \"SimlPackage\" Field Value Type Description System.String Splitter Declaration public const string Splitter = \"Splitter\" Field Value Type Description System.String StarSymbol Declaration public const string StarSymbol = \"*\" Field Value Type Description System.String StrictAttribute Declaration public const string StrictAttribute = \"Strict\" Field Value Type Description System.String Suggestion Declaration public const string Suggestion = \"Suggestion\" Field Value Type Description System.String Switch Declaration public const string Switch = \"Switch\" Field Value Type Description System.String TagItem Declaration public const string TagItem = \"Tag\" Field Value Type Description System.String TaskAttribute Declaration public const string TaskAttribute = \"Task\" Field Value Type Description System.String Text Declaration public const string Text = \"Text\" Field Value Type Description System.String TextAttribute Declaration public const string TextAttribute = \"Text\" Field Value Type Description System.String Think Declaration public const string Think = \"Think\" Field Value Type Description System.String Trigger Declaration public const string Trigger = \"Trigger\" Field Value Type Description System.String TypeAttribute Declaration public const string TypeAttribute = \"Type\" Field Value Type Description System.String UnderscoreSymbol Declaration public const string UnderscoreSymbol = \"_\" Field Value Type Description System.String UnitAttribute Declaration public const string UnitAttribute = \"Delay\" Field Value Type Description System.String User Declaration public const string User = \"User\" Field Value Type Description System.String UserAttribute Declaration public const string UserAttribute = \"User\" Field Value Type Description System.String UserMotion Declaration public const string UserMotion = \"UserEmotion\" Field Value Type Description System.String UserSettings Declaration public const string UserSettings = \"UserSettings\" Field Value Type Description System.String Value Declaration public const string Value = \"Value\" Field Value Type Description System.String ValueAttribute Declaration public const string ValueAttribute = \"Value\" Field Value Type Description System.String Var Declaration public const string Var = \"Var\" Field Value Type Description System.String VarAttribute Declaration public const string VarAttribute = \"Var\" Field Value Type Description System.String Variable Declaration public const string Variable = \"Variable\" Field Value Type Description System.String VarSettings Declaration public const string VarSettings = \"VarSettings\" Field Value Type Description System.String WeightAttribute Declaration public const string WeightAttribute = \"Weight\" Field Value Type Description System.String While Declaration public const string While = \"While\" Field Value Type Description System.String Word Declaration public const string Word = \"Word\" Field Value Type Description System.String WordAtAttribute Declaration public const string WordAtAttribute = \"WordAt\" Field Value Type Description System.String WordAttribute Declaration public const string WordAttribute = \"Word\" Field Value Type Description System.String Properties KnownDeprecatedHtmlTags Gets the known deprecated HTML tags. Declaration public static Dictionary<string, string> KnownDeprecatedHtmlTags { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > The known deprecated HTML tags. KnownHtmlTags Gets a list of all the known HTML tags. Declaration public static HashSet<string> KnownHtmlTags { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > The known HTML tags. KnownSimlAttributes Gets a list of all known attributes. Declaration public static HashSet<string> KnownSimlAttributes { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > KnownSimlTags Gets a list of all known tags. Declaration public static HashSet<string> KnownSimlTags { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > KnownSymbols Gets a lsit of all the known symbols valid within the Pattern element. Declaration public static HashSet<string> KnownSymbols { get; } Property Value Type Description System.Collections.Generic.HashSet < System.String > The known symbols. TargetAttribute Declaration public static string TargetAttribute { get; } Property Value Type Description System.String Methods Exists(XElement, String, Boolean) Declaration public static bool Exists(XElement element, string tagName, bool findAll = false) Parameters Type Name Description System.Xml.Linq.XElement element System.String tagName System.Boolean findAll Returns Type Description System.Boolean ReplaceWithValue(XElement, XElement) Declaration public static XElement ReplaceWithValue(XElement mainElement, XElement replacement) Parameters Type Name Description System.Xml.Linq.XElement mainElement System.Xml.Linq.XElement replacement Returns Type Description System.Xml.Linq.XElement"
  },
  "api/Syn.Bot.Siml.Helper.Utility.html": {
    "href": "api/Syn.Bot.Siml.Helper.Utility.html",
    "title": "Class Utility - Syn Developer Network",
    "keywords": "Class Utility A collection of helper methods. Inheritance System.Object Utility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public class Utility Methods CompressString(String) Compresses the string. Declaration public static string CompressString(string text) Parameters Type Name Description System.String text The text to compress. Returns Type Description System.String CreateElement(String) Declaration public static XElement CreateElement(string input) Parameters Type Name Description System.String input Returns Type Description System.Xml.Linq.XElement DataContractToString<T>(T) Declaration public static string DataContractToString<T>(T objectToSerialize) Parameters Type Name Description T objectToSerialize Returns Type Description System.String Type Parameters Name Description T DataContractToXElement<T>(T) Declaration public static XElement DataContractToXElement<T>(T objectToSerialize) Parameters Type Name Description T objectToSerialize Returns Type Description System.Xml.Linq.XElement Type Parameters Name Description T DecompressString(String) Decompresses the string. Declaration public static string DecompressString(string compressedText) Parameters Type Name Description System.String compressedText The compressed text. Returns Type Description System.String GetBestRegexMatch(MatchCollection, String) Declaration public static Match GetBestRegexMatch(MatchCollection collection, string sentence) Parameters Type Name Description System.Text.RegularExpressions.MatchCollection collection System.String sentence Returns Type Description System.Text.RegularExpressions.Match GetBinaryString(String) Declaration public static string GetBinaryString(string text) Parameters Type Name Description System.String text Returns Type Description System.String GetDateFromUtcOffset(String) Declaration public static DateTime GetDateFromUtcOffset(string value) Parameters Type Name Description System.String value Returns Type Description System.DateTime GetDateFromUtcOffset(TimeSpan) Declaration public static DateTime GetDateFromUtcOffset(TimeSpan offSet) Parameters Type Name Description System.TimeSpan offSet Returns Type Description System.DateTime GetInnerXml(XElement) Declaration public static string GetInnerXml(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description System.String GetLineNumber(XElement) Declaration public static int GetLineNumber(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description System.Int32 GetMarker() Declaration public static string GetMarker() Returns Type Description System.String GetRootOrChild(XDocument, String) Declaration public static XElement GetRootOrChild(XDocument document, string elementName) Parameters Type Name Description System.Xml.Linq.XDocument document System.String elementName Returns Type Description System.Xml.Linq.XElement GetSequencedDocument(IEnumerable<XDocument>) Declaration public static XDocument GetSequencedDocument(IEnumerable<XDocument> simlDocuments) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Xml.Linq.XDocument > simlDocuments Returns Type Description System.Xml.Linq.XDocument GetSequencedElement(IEnumerable<XElement>) Declaration public static XElement GetSequencedElement(IEnumerable<XElement> simlElements) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Xml.Linq.XElement > simlElements Returns Type Description System.Xml.Linq.XElement RandomElement(XElement, String) Declaration public static XElement RandomElement(XElement mainElement, string tagName) Parameters Type Name Description System.Xml.Linq.XElement mainElement System.String tagName Returns Type Description System.Xml.Linq.XElement ReplaceElementWithText(XElement, String) Declaration public static void ReplaceElementWithText(XElement mainElement, string inputValue) Parameters Type Name Description System.Xml.Linq.XElement mainElement System.String inputValue ReplaceFirst(String, String, String) Declaration public static string ReplaceFirst(string text, string search, string replace) Parameters Type Name Description System.String text System.String search System.String replace Returns Type Description System.String UppercaseFirstCharacter(String) Declaration public static string UppercaseFirstCharacter(string value) Parameters Type Name Description System.String value Returns Type Description System.String XmlEscape(String) Declaration public static string XmlEscape(string xmlString) Parameters Type Name Description System.String xmlString Returns Type Description System.String XmlUnescape(String) Declaration public static string XmlUnescape(string xmlString) Parameters Type Name Description System.String xmlString Returns Type Description System.String"
  },
  "api/Syn.Bot.Siml.Helper.html": {
    "href": "api/Syn.Bot.Siml.Helper.html",
    "title": "Namespace Syn.Bot.Siml.Helper - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Helper Classes CacheManager Default cache management class for SynBot. StringComparisonUtility StringUtility Tag Utility A collection of helper methods. Enums ComparisonAlgorithm"
  },
  "api/Syn.Bot.Siml.Information.ConceptInfo.html": {
    "href": "api/Syn.Bot.Siml.Information.ConceptInfo.html",
    "title": "Class ConceptInfo - Syn Developer Network",
    "keywords": "Class ConceptInfo Inheritance System.Object InfoBase ConceptInfo Inherited Members InfoBase.Element InfoBase.ID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class ConceptInfo : InfoBase Constructors ConceptInfo(SimlInfo, XElement) Declaration public ConceptInfo(SimlInfo parent, XElement element) Parameters Type Name Description SimlInfo parent System.Xml.Linq.XElement element Properties Models Declaration public List<ModelInfo> Models { get; } Property Value Type Description System.Collections.Generic.List < ModelInfo > Parent Declaration public SimlInfo Parent { get; } Property Value Type Description SimlInfo"
  },
  "api/Syn.Bot.Siml.Information.InfoBase.html": {
    "href": "api/Syn.Bot.Siml.Information.InfoBase.html",
    "title": "Class InfoBase - Syn Developer Network",
    "keywords": "Class InfoBase Inheritance System.Object InfoBase ConceptInfo ModelInfo PatternInfo ResponseInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class InfoBase Constructors InfoBase(XElement) Declaration public InfoBase(XElement xmlElement) Parameters Type Name Description System.Xml.Linq.XElement xmlElement Properties Element Declaration public XElement Element { get; } Property Value Type Description System.Xml.Linq.XElement ID Declaration public string ID { get; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Information.ModelInfo.html": {
    "href": "api/Syn.Bot.Siml.Information.ModelInfo.html",
    "title": "Class ModelInfo - Syn Developer Network",
    "keywords": "Class ModelInfo Inheritance System.Object InfoBase ModelInfo Inherited Members InfoBase.Element InfoBase.ID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Information Assembly :Syn.Bot.dll Syntax public class ModelInfo : InfoBase Constructors ModelInfo(ConceptInfo, XElement) Declaration public ModelInfo(ConceptInfo parent, XElement element) Parameters Type Name Description ConceptInfo parent System.Xml.Linq.XElement element Properties ParentConcept Declaration public ConceptInfo ParentConcept { get; } Property Value Type Description ConceptInfo Pattern Declaration public PatternInfo Pattern { get; } Property Value Type Description PatternInfo Response Declaration public ResponseInfo Response { get; } Property Value Type Description ResponseInfo"
  },
  "api/Syn.Bot.Siml.Interfaces.IVolatile.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.IVolatile.html",
    "title": "Interface IVolatile - Syn Developer Network",
    "keywords": "Interface IVolatile Interface to be implemented by volatile classes. Namespace :Syn.Bot.Siml.Interfaces Assembly :Syn.Bot.dll Syntax public interface IVolatile"
  },
  "api/Syn.Bot.Siml.Interfaces.html": {
    "href": "api/Syn.Bot.Siml.Interfaces.html",
    "title": "Namespace Syn.Bot.Siml.Interfaces - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Interfaces Interfaces IAdapter The default interaface for all Tag Handlers. ICacheManager IContextProcessor An interface to be implemented by all compatible adapter processors. IMap An interface that represents an SIML Map IMapItem An interface representation of an SIML MapItem element. IParser IProcessingInstruction IRegexItem ISet A interface for SIML sets. ISuggestionFormatter ITokenizer IVariableFormatter IVolatile Interface to be implemented by volatile classes."
  },
  "api/Syn.Bot.Siml.Namespace.html": {
    "href": "api/Syn.Bot.Siml.Namespace.html",
    "title": "Class Namespace - Syn Developer Network",
    "keywords": "Class Namespace Inheritance System.Object Namespace Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml Assembly :Syn.Bot.dll Syntax public sealed class Namespace Properties O Declaration public XNamespace O { get; } Property Value Type Description System.Xml.Linq.XNamespace Siml Declaration public XNamespace Siml { get; } Property Value Type Description System.Xml.Linq.XNamespace Think Declaration public XNamespace Think { get; } Property Value Type Description System.Xml.Linq.XNamespace X Declaration public XNamespace X { get; } Property Value Type Description System.Xml.Linq.XNamespace"
  },
  "api/Syn.Bot.Utility.Contracts.StatsContract.html": {
    "href": "api/Syn.Bot.Utility.Contracts.StatsContract.html",
    "title": "Class StatsContract - Syn Developer Network",
    "keywords": "Class StatsContract Inheritance System.Object StatsContract Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract(Name = \"Stats\", Namespace = \"\")] public class StatsContract Constructors StatsContract() Declaration public StatsContract() Properties BindingTime Declaration [DataMember] public double BindingTime { get; set; } Property Value Type Description System.Double Caches Declaration [DataMember] public int Caches { get; set; } Property Value Type Description System.Int32 Concepts Declaration [DataMember] public int Concepts { get; set; } Property Value Type Description System.Int32 CurrentUsers Declaration [DataMember] public int CurrentUsers { get; set; } Property Value Type Description System.Int32 Examples Declaration [DataMember] public int Examples { get; set; } Property Value Type Description System.Int32 FilterationTime Declaration [DataMember] public double FilterationTime { get; set; } Property Value Type Description System.Double Filters Declaration [DataMember] public int Filters { get; set; } Property Value Type Description System.Int32 IdleTime Declaration [DataMember] public double IdleTime { get; set; } Property Value Type Description System.Double InteractionLimit Declaration [DataMember] public int InteractionLimit { get; set; } Property Value Type Description System.Int32 Interactions Declaration [DataMember] public int Interactions { get; set; } Property Value Type Description System.Int32 IsIdle Declaration [DataMember] public bool IsIdle { get; set; } Property Value Type Description System.Boolean LastInteraction Declaration [DataMember] public DateTime LastInteraction { get; set; } Property Value Type Description System.DateTime LoadTime Declaration [DataMember] public double LoadTime { get; set; } Property Value Type Description System.Double MappingTime Declaration [DataMember] public double MappingTime { get; set; } Property Value Type Description System.Double Maps Declaration [DataMember] public int Maps { get; set; } Property Value Type Description System.Int32 ModelLimit Declaration [DataMember] public int ModelLimit { get; set; } Property Value Type Description System.Int32 Models Declaration [DataMember] public int Models { get; set; } Property Value Type Description System.Int32 PrivateConcepts Declaration [DataMember] public int PrivateConcepts { get; set; } Property Value Type Description System.Int32 PublicConcepts Declaration [DataMember] public int PublicConcepts { get; set; } Property Value Type Description System.Int32 Recent Declaration [DataMember] public List<InteractionItem> Recent { get; set; } Property Value Type Description System.Collections.Generic.List < InteractionItem > Sets Declaration [DataMember] public int Sets { get; set; } Property Value Type Description System.Int32 SplittingTime Declaration [DataMember] public double SplittingTime { get; set; } Property Value Type Description System.Double Tokenizers Declaration [DataMember] public int Tokenizers { get; set; } Property Value Type Description System.Int32 Traffic Declaration [DataMember] public Dictionary<string, int> Traffic { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > Users Declaration [DataMember] public int Users { get; set; } Property Value Type Description System.Int32 Views Declaration [DataMember] public int Views { get; set; } Property Value Type Description System.Int32 Vocabulary Declaration [DataMember] public int Vocabulary { get; set; } Property Value Type Description System.Int32 Methods FromFile(String) Declaration public static StatsContract FromFile(string filePath) Parameters Type Name Description System.String filePath Returns Type Description StatsContract SaveToFile(String) Declaration public void SaveToFile(string filePath) Parameters Type Name Description System.String filePath"
  },
  "api/Syn.Bot.Utility.Contracts.TemplateType.html": {
    "href": "api/Syn.Bot.Utility.Contracts.TemplateType.html",
    "title": "Enum TemplateType - Syn Developer Network",
    "keywords": "Enum TemplateType Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax public enum TemplateType Fields Name Description English Default English Template None Denotes that the Bot has no Template"
  },
  "api/Syn.Bot.Utility.Contracts.TextContract.html": {
    "href": "api/Syn.Bot.Utility.Contracts.TextContract.html",
    "title": "Class TextContract - Syn Developer Network",
    "keywords": "Class TextContract Inheritance System.Object TextContract Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax [DataContract] public class TextContract Properties Text Declaration [DataMember] public string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Contracts.ThemeType.html": {
    "href": "api/Syn.Bot.Utility.Contracts.ThemeType.html",
    "title": "Enum ThemeType - Syn Developer Network",
    "keywords": "Enum ThemeType Namespace :Syn.Bot.Utility.Contracts Assembly :Syn.Bot.Utility.dll Syntax public enum ThemeType Fields Name Description IceBlack IceBlue IceOrange IceRed"
  },
  "api/Syn.Bot.Utility.Contracts.html": {
    "href": "api/Syn.Bot.Utility.Contracts.html",
    "title": "Namespace Syn.Bot.Utility.Contracts - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Utility.Contracts Classes BotInfo ChatItem ResultContract ServerDetail ServiceRequest ServiceResult StatsContract TextContract Enums BotType TemplateType ThemeType"
  },
  "api/Syn.EmotionML.Reference.html": {
    "href": "api/Syn.EmotionML.Reference.html",
    "title": "Class Reference - Syn Developer Network",
    "keywords": "Class Reference Reference used to relate the emotion annotation to the \"rest of the world\", more specifically to the emotional expression, the experiencing subject, the trigger, and the target of the emotion. Inheritance System.Object Reference Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Reference Constructors Reference(Uri) Initializes a new instance of the Reference class. Declaration public Reference(Uri uri) Parameters Type Name Description System.Uri uri The URI identifying the actual reference target. Properties ExperiencedBy Gets a value that indicates that the reference points to the subject experiencing the emotion. Declaration public static string ExperiencedBy { get; } Property Value Type Description System.String ExpressedBy Gets a value that indicates that the reference points to observable behavior expressing the emotion. Declaration public static string ExpressedBy { get; } Property Value Type Description System.String MediaType Gets or sets a value of type xsd:string holding the MIME type of the data that the Uri attribute points to. Declaration public string MediaType { get; set; } Property Value Type Description System.String Role Gets or sets the type of relation between the emotion and the external item referred to. The value must be one of ExpressedBy (default), ExperiencedBy , TriggeredBy , TargetedAt . Declaration public string Role { get; set; } Property Value Type Description System.String TargetedAt Gets a value that indicates that the reference points to an object towards which an emotion-related action, or action tendency, is directed. Declaration public static string TargetedAt { get; } Property Value Type Description System.String The targeted by. TriggeredBy Gets a value that indicates that the reference points to an emotion-eliciting event that caused an emotion and/or related appraisals. Declaration public static string TriggeredBy { get; } Property Value Type Description System.String Uri Gets or sets the URI identifying the actual reference target. Declaration public Uri Uri { get; set; } Property Value Type Description System.Uri Methods GetElement() Gets an System.Xml.Linq.XElement that represent this Reference . Declaration public XElement GetElement() Returns Type Description System.Xml.Linq.XElement Parse(XElement) Loads a Reference from the specified System.Xml.Linq.XElement . Declaration public static Reference Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element Returns Type Description Reference"
  },
  "api/Syn.EmotionML.Set.html": {
    "href": "api/Syn.EmotionML.Set.html",
    "title": "Class Set - Syn Developer Network",
    "keywords": "Class Set Inheritance System.Object System.Collections.Generic.List < EmotionRelatedState > Set Inherited Members System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Add(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.AddRange(System.Collections.Generic.IEnumerable<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.BinarySearch(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.BinarySearch(Syn.EmotionML.EmotionRelatedState, System.Collections.Generic.IComparer<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.BinarySearch(System.Int32, System.Int32, Syn.EmotionML.EmotionRelatedState, System.Collections.Generic.IComparer<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Clear() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Contains(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.CopyTo(Syn.EmotionML.EmotionRelatedState[]) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.CopyTo(Syn.EmotionML.EmotionRelatedState[], System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.CopyTo(System.Int32, Syn.EmotionML.EmotionRelatedState[], System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.GetEnumerator() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.IndexOf(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.IndexOf(Syn.EmotionML.EmotionRelatedState, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.IndexOf(Syn.EmotionML.EmotionRelatedState, System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Insert(System.Int32, Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.LastIndexOf(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.LastIndexOf(Syn.EmotionML.EmotionRelatedState, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.LastIndexOf(Syn.EmotionML.EmotionRelatedState, System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Remove(Syn.EmotionML.EmotionRelatedState) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.RemoveAll(System.Predicate<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.RemoveAt(System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Reverse() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Sort() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Sort(System.Collections.Generic.IComparer<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Sort(System.Comparison<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Syn.EmotionML.EmotionRelatedState>) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.Generic.IEnumerable<Syn.EmotionML.EmotionRelatedState>.GetEnumerator() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.ToArray() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.TrimExcess() System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Capacity System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Count System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.Item[System.Int32] System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.Generic.ICollection<Syn.EmotionML.EmotionRelatedState>.IsReadOnly System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Syn.EmotionML.EmotionRelatedState>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Set : List<EmotionRelatedState>, IList<EmotionRelatedState>, ICollection<EmotionRelatedState>, IEnumerable<EmotionRelatedState>, IList, ICollection, IEnumerable Constructors Set() Declaration public Set() Set(Uri) Declaration public Set(Uri uri) Parameters Type Name Description System.Uri uri Properties Uri Declaration public Uri Uri { get; } Property Value Type Description System.Uri Vocabulary Declaration public Vocabulary Vocabulary { get; } Property Value Type Description Vocabulary"
  },
  "api/Syn.EmotionML.Trace.html": {
    "href": "api/Syn.EmotionML.Trace.html",
    "title": "Class Trace - Syn Developer Network",
    "keywords": "Class Trace Represents the time evolution of a dynamic scale value. Inheritance System.Object Trace Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Trace Constructors Trace(Double, String) Initializes a new instance of the Trace class. Declaration public Trace(double frequency, string samples) Parameters Type Name Description System.Double frequency The frequency. System.String samples The samples. Trace(String, String) Initializes a new instance of the Trace class. Declaration public Trace(string frequencyString, string samples) Parameters Type Name Description System.String frequencyString The frequency as string. System.String samples The samples. Properties Frequency Gets or sets the frequency. Declaration public double Frequency { get; set; } Property Value Type Description System.Double Samples Gets or sets the samples. Declaration public string Samples { get; set; } Property Value Type Description System.String Methods FrequencyText() Gets the frequency as string with Hz Declaration public string FrequencyText() Returns Type Description System.String Frequency string (with Hz) GetElement() Gets an System.Xml.Linq.XElement that represents this Trace object. Declaration public XElement GetElement() Returns Type Description System.Xml.Linq.XElement Parse(XElement) Loads a Trace object from the specified System.Xml.Linq.XElement . Declaration public static Trace Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element The trace element. Returns Type Description Trace SetFrequency(String) Set frequency by frequency-string (within Hz) Declaration public void SetFrequency(string frequencyValue) Parameters Type Name Description System.String frequencyValue frequency string"
  },
  "api/Syn.EmotionML.Vocabulary.html": {
    "href": "api/Syn.EmotionML.Vocabulary.html",
    "title": "Class Vocabulary - Syn Developer Network",
    "keywords": "Class Vocabulary Encapsulates the definition of an Emotion vocabulary. Inheritance System.Object Vocabulary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Vocabulary Constructors Vocabulary(String, String, Item) Initializes a new instance of the Vocabulary class. Declaration public Vocabulary(string type, string id, Item item) Parameters Type Name Description System.String type The type. System.String id The identifier. Item item The item. Properties ID Gets or sets a unique vocabulary identifier of type xsd:ID. Declaration public string ID { get; set; } Property Value Type Description System.String Info Gets or sets the Info element that provides an arbitrary metadata about this Vocabulary . Declaration public Info Info { get; set; } Property Value Type Description Info Items Gets the list of Item elements that represent the definition of this Vocabulary item, associated with a value which can be used in the \"name\" attribute of Category , Dimension , Appraisal or ActionTendency . Declaration public List<Item> Items { get; protected set; } Property Value Type Description System.Collections.Generic.List < Item > Type Gets or sets a value that explicitly indicates whether the vocabulary represents category names, dimension elements, appraisal elements or action tendency elements. Declaration public string Type { get; set; } Property Value Type Description System.String Methods AddItem(Item) Adds an item to this vocabulary. Declaration public void AddItem(Item newItem) Parameters Type Name Description Item newItem GetElement() Gets an System.Xml.Linq.XElement that represents this Vocabulary object. Declaration public XElement GetElement() Returns Type Description System.Xml.Linq.XElement Parse(XElement) Loads a Vocabulary object from the specified System.Xml.Linq.XElement . Declaration public static Vocabulary Parse(XElement element) Parameters Type Name Description System.Xml.Linq.XElement element The element. Returns Type Description Vocabulary RemoveItem(Item) Removes item from this vocabulary. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item"
  },
  "api/Syn.EmotionML.html": {
    "href": "api/Syn.EmotionML.html",
    "title": "Namespace Syn.EmotionML - Syn Developer Network",
    "keywords": "Namespace Syn.EmotionML Classes ActionTendency A class that describes an emotion or a related state according to an emotion action tendency vocabulary. Appraisal A class that describes an emotion or a related state according to an emotion appraisal vocabulary. Category A class that describes an emotion or a related state using a category. Dimension A class that describes an emotion or a related state according to an emotion dimension vocabulary. Emotion A class that represents a single emotion annotation. EmotionMLDocument A class that represents the root element of an EmotionML document. EmotionMLException Represents errors that occur when an EmotionML element is parsed. EmotionMLSpecification A class that holds static EmotionML constants. EmotionRelatedState An abstract class for the broad range of phenomena intended to be covered by EmotionML specification. Info A class used to annotate arbitrary metadata. Item Represents the definition of one vocabulary item, associated with a value which can be used in the \"name\" attribute of Category , Dimension , Appraisal or ActionTendency . Reference Reference used to relate the emotion annotation to the \"rest of the world\", more specifically to the emotional expression, the experiencing subject, the trigger, and the target of the emotion. Set Trace Represents the time evolution of a dynamic scale value. Vocabulary Encapsulates the definition of an Emotion vocabulary."
  },
  "api/Syn.License.LicenseActivationException.html": {
    "href": "api/Syn.License.LicenseActivationException.html",
    "title": "Class LicenseActivationException - Syn Developer Network",
    "keywords": "Class LicenseActivationException The exception that is thrown when license activation fails. Inheritance System.Object System.Exception LicenseActivationException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.License Assembly :Syn.Bot.dll Syntax public class LicenseActivationException : Exception Constructors LicenseActivationException() Initializes a new instance of the LicenseActivationException class. Declaration public LicenseActivationException()"
  },
  "api/Syn.License.LicenseDiscrepancyException.html": {
    "href": "api/Syn.License.LicenseDiscrepancyException.html",
    "title": "Class LicenseDiscrepancyException - Syn Developer Network",
    "keywords": "Class LicenseDiscrepancyException Inheritance System.Object System.Exception LicenseDiscrepancyException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.License Assembly :Syn.Bot.dll Syntax public class LicenseDiscrepancyException : Exception Constructors LicenseDiscrepancyException() Declaration public LicenseDiscrepancyException()"
  },
  "api/Syn.License.LicenseTypeException.html": {
    "href": "api/Syn.License.LicenseTypeException.html",
    "title": "Class LicenseTypeException - Syn Developer Network",
    "keywords": "Class LicenseTypeException The exception that is thrown when requested feature in unavailable in the current license type. Inheritance System.Object System.Exception LicenseTypeException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.License Assembly :Syn.Bot.dll Syntax public class LicenseTypeException : Exception Constructors LicenseTypeException() Initializes a new instance of the LicenseTypeException class. Declaration public LicenseTypeException()"
  },
  "api/Syn.Utility.Utilities.AspUtility.LabelColor.html": {
    "href": "api/Syn.Utility.Utilities.AspUtility.LabelColor.html",
    "title": "Enum AspUtility.LabelColor - Syn Developer Network",
    "keywords": "Enum AspUtility.LabelColor Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum LabelColor Fields Name Description Green Red"
  },
  "api/Syn.Utility.Utilities.AspUtility.html": {
    "href": "api/Syn.Utility.Utilities.AspUtility.html",
    "title": "Class AspUtility - Syn Developer Network",
    "keywords": "Class AspUtility Inheritance System.Object AspUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class AspUtility Fields HelperId Declaration public static readonly Guid HelperId Field Value Type Description System.Guid JqueryCssUrl Declaration public const string JqueryCssUrl = \"https://code.jquery.com/ui/1.11.0/themes/ui-lightness/jquery-ui.css\" Field Value Type Description System.String JqueryUiUrl Declaration public const string JqueryUiUrl = \"https://code.jquery.com/ui/1.11.0/jquery-ui.min.js\" Field Value Type Description System.String JqueryUrl Declaration public const string JqueryUrl = \"https://code.jquery.com/jquery-2.1.1.min.js\" Field Value Type Description System.String MaxRequestLimit Declaration public const int MaxRequestLimit = 5000 Field Value Type Description System.Int32 MinimumPasswordLength Declaration public const int MinimumPasswordLength = 6 Field Value Type Description System.Int32 Properties CountryList Declaration public List<string> CountryList { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods AddHeader(WebOperationContext, AspUtility.Headers) Declaration public void AddHeader(WebOperationContext webOperationContext, AspUtility.Headers header) Parameters Type Name Description System.ServiceModel.Web.WebOperationContext webOperationContext AspUtility.Headers header AddOrginHeaders() Declaration public void AddOrginHeaders() CssResponse(String) Declaration public Stream CssResponse(string cssString) Parameters Type Name Description System.String cssString Returns Type Description System.IO.Stream Decrypt(String) Declaration public string Decrypt(string text) Parameters Type Name Description System.String text Returns Type Description System.String Encrypt(String) Declaration public string Encrypt(string text) Parameters Type Name Description System.String text Returns Type Description System.String FileResponse(String, String) Declaration public Stream FileResponse(string fileName, string content) Parameters Type Name Description System.String fileName System.String content Returns Type Description System.IO.Stream FindControlRecursive(Control, String) Declaration public Control FindControlRecursive(Control mainPage, string controlId) Parameters Type Name Description System.Web.UI.Control mainPage System.String controlId Returns Type Description System.Web.UI.Control GenerateStreamFromString(String) Declaration public Stream GenerateStreamFromString(string value) Parameters Type Name Description System.String value Returns Type Description System.IO.Stream GetClientMessageProperty() Declaration public RemoteEndpointMessageProperty GetClientMessageProperty() Returns Type Description System.ServiceModel.Channels.RemoteEndpointMessageProperty GetIpAddress() Declaration public string GetIpAddress() Returns Type Description System.String GetIpAddress(HttpContext) Declaration public string GetIpAddress(HttpContext context) Parameters Type Name Description System.Web.HttpContext context Returns Type Description System.String HtmlResponse(String) Declaration public Stream HtmlResponse(string htmlString) Parameters Type Name Description System.String htmlString Returns Type Description System.IO.Stream ImageResponse(Stream) Declaration public Stream ImageResponse(Stream fileStream) Parameters Type Name Description System.IO.Stream fileStream Returns Type Description System.IO.Stream IsValidEmaild(String) Declaration public bool IsValidEmaild(string emailAddress) Parameters Type Name Description System.String emailAddress Returns Type Description System.Boolean IsValidPassword(String, out String) Declaration public bool IsValidPassword(string password, out string message) Parameters Type Name Description System.String password System.String message Returns Type Description System.Boolean IsValidUrl(String) Declaration public bool IsValidUrl(string url) Parameters Type Name Description System.String url Returns Type Description System.Boolean IsValidUsername(String) Declaration public bool IsValidUsername(string userName) Parameters Type Name Description System.String userName Returns Type Description System.Boolean JavaScriptResponse(String) Declaration public Stream JavaScriptResponse(string javaScript) Parameters Type Name Description System.String javaScript Returns Type Description System.IO.Stream JsonResponse(String) Declaration public Stream JsonResponse(string jsonString) Parameters Type Name Description System.String jsonString Returns Type Description System.IO.Stream RequestAllowed() Declaration public bool RequestAllowed() Returns Type Description System.Boolean RequestAllowed(HttpContext) Declaration public bool RequestAllowed(HttpContext context) Parameters Type Name Description System.Web.HttpContext context Returns Type Description System.Boolean ShowMessage(HttpResponse, String, String) Declaration public void ShowMessage(HttpResponse response, string title, string message) Parameters Type Name Description System.Web.HttpResponse response System.String title System.String message ShowMessage(Label, AspUtility.LabelColor, String) Declaration public void ShowMessage(Label labelControl, AspUtility.LabelColor colorName, string message) Parameters Type Name Description System.Web.UI.WebControls.Label labelControl AspUtility.LabelColor colorName System.String message StringToLiteral(String) Declaration public string StringToLiteral(string input) Parameters Type Name Description System.String input Returns Type Description System.String StripNewLine(String) Declaration public string StripNewLine(string text) Parameters Type Name Description System.String text Returns Type Description System.String StripWhiteSpace(String) Declaration public string StripWhiteSpace(string text) Parameters Type Name Description System.String text Returns Type Description System.String ToQueryString(NameValueCollection) Declaration public string ToQueryString(NameValueCollection nvc) Parameters Type Name Description System.Collections.Specialized.NameValueCollection nvc Returns Type Description System.String WriteCssResponse(HttpContext, String) Declaration public void WriteCssResponse(HttpContext context, string cssString) Parameters Type Name Description System.Web.HttpContext context System.String cssString WriteHtmlResponse(HttpContext, String) Declaration public void WriteHtmlResponse(HttpContext context, string htmlString) Parameters Type Name Description System.Web.HttpContext context System.String htmlString WriteJavaScriptResponse(HttpContext, String) Declaration public void WriteJavaScriptResponse(HttpContext context, string javaScript) Parameters Type Name Description System.Web.HttpContext context System.String javaScript"
  },
  "api/Syn.Utility.Utilities.ComputerUtility.html": {
    "href": "api/Syn.Utility.Utilities.ComputerUtility.html",
    "title": "Class ComputerUtility - Syn Developer Network",
    "keywords": "Class ComputerUtility Inheritance System.Object ComputerUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ComputerUtility Methods ExitWindowsEx(UInt32, UInt32) Declaration public static bool ExitWindowsEx(uint uFlags, uint dwReason) Parameters Type Name Description System.UInt32 uFlags System.UInt32 dwReason Returns Type Description System.Boolean GetUserTileImagePath(String) Declaration public string GetUserTileImagePath(string username) Parameters Type Name Description System.String username Returns Type Description System.String GetUserTilePath(String, UInt32, StringBuilder, Int32) Declaration public static void GetUserTilePath(string username, uint whatever, StringBuilder picpath, int maxLength) Parameters Type Name Description System.String username System.UInt32 whatever System.Text.StringBuilder picpath System.Int32 maxLength Lock() Declaration public void Lock() LockWorkStation() Declaration public static void LockWorkStation() LogOff() Declaration public void LogOff() Restart() Declaration public void Restart() Shutdown() Declaration public void Shutdown() UpTime() Declaration public TimeSpan UpTime() Returns Type Description System.TimeSpan"
  },
  "api/Syn.Bot.Siml.Collections.Suggestion.html": {
    "href": "api/Syn.Bot.Siml.Collections.Suggestion.html",
    "title": "Class Suggestion - Syn Developer Network",
    "keywords": "Class Suggestion Inheritance System.Object System.Collections.Generic.List < ExampleResult > Suggestion Inherited Members System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Add(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.AddRange(System.Collections.Generic.IEnumerable<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.BinarySearch(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.BinarySearch(Syn.Bot.Siml.ExampleResult, System.Collections.Generic.IComparer<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.BinarySearch(System.Int32, System.Int32, Syn.Bot.Siml.ExampleResult, System.Collections.Generic.IComparer<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Clear() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Contains(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.CopyTo(Syn.Bot.Siml.ExampleResult[]) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.CopyTo(Syn.Bot.Siml.ExampleResult[], System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.CopyTo(System.Int32, Syn.Bot.Siml.ExampleResult[], System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Exists(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Find(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindAll(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindIndex(System.Int32, System.Int32, System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindIndex(System.Int32, System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindIndex(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindLast(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindLastIndex(System.Int32, System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.FindLastIndex(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.IndexOf(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.IndexOf(Syn.Bot.Siml.ExampleResult, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.IndexOf(Syn.Bot.Siml.ExampleResult, System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Insert(System.Int32, Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.LastIndexOf(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.LastIndexOf(Syn.Bot.Siml.ExampleResult, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.LastIndexOf(Syn.Bot.Siml.ExampleResult, System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Remove(Syn.Bot.Siml.ExampleResult) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.RemoveAll(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.RemoveAt(System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Reverse() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Sort() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Sort(System.Collections.Generic.IComparer<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Sort(System.Comparison<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.Generic.IEnumerable<Syn.Bot.Siml.ExampleResult>.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.ToArray() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.TrimExcess() System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.TrueForAll(System.Predicate<Syn.Bot.Siml.ExampleResult>) System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Capacity System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Count System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.Item[System.Int32] System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.Generic.ICollection<Syn.Bot.Siml.ExampleResult>.IsReadOnly System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Syn.Bot.Siml.ExampleResult>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Collections Assembly :Syn.Bot.dll Syntax public class Suggestion : List<ExampleResult>, IList<ExampleResult>, ICollection<ExampleResult>, IReadOnlyList<ExampleResult>, IReadOnlyCollection<ExampleResult>, IEnumerable<ExampleResult>, IList, ICollection, IEnumerable"
  },
  "api/Syn.Bot.Siml.Events.MapChangedAction.html": {
    "href": "api/Syn.Bot.Siml.Events.MapChangedAction.html",
    "title": "Enum MapChangedAction - Syn Developer Network",
    "keywords": "Enum MapChangedAction Describes the action that caused a CollectionChanged event. Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public enum MapChangedAction Fields Name Description Add One or more items were added to the Map. Remove One or more items were removed from the Map. Replace One or more items were replaced in the Map. Reset The content of the Map changed dramatically."
  },
  "api/Syn.Bot.Siml.Events.MapChangedEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.MapChangedEventArgs.html",
    "title": "Class MapChangedEventArgs - Syn Developer Network",
    "keywords": "Class MapChangedEventArgs Provides data for the CollectionChanged event. Inheritance System.Object System.EventArgs MapChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class MapChangedEventArgs : EventArgs Properties Action Gets the action that caused the event. Declaration public MapChangedAction Action { get; set; } Property Value Type Description MapChangedAction MapItem Gets the IMapItem affected by an Add, Remove, Replace action. Declaration public IMapItem MapItem { get; set; } Property Value Type Description IMapItem"
  },
  "api/Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.html",
    "title": "Class MapCollectionChangedEventArgs - Syn Developer Network",
    "keywords": "Class MapCollectionChangedEventArgs Inheritance System.Object System.EventArgs MapCollectionChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class MapCollectionChangedEventArgs : EventArgs Properties EffectOnCollection The effect on MapCollection . Declaration public MapCollectionEffect EffectOnCollection { get; set; } Property Value Type Description MapCollectionEffect Map Gets the Map associated with this event argument. Declaration public IMap Map { get; set; } Property Value Type Description IMap"
  },
  "api/Syn.Bot.Siml.Events.MapCollectionEffect.html": {
    "href": "api/Syn.Bot.Siml.Events.MapCollectionEffect.html",
    "title": "Enum MapCollectionEffect - Syn Developer Network",
    "keywords": "Enum MapCollectionEffect Type of effect on a MapCollection Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public enum MapCollectionEffect Fields Name Description CollectionCleared The collection cleared MapAdded A new Map is added. MapRemoved An existing Map is removed. MapUpdated Value of an existing Map is updated."
  },
  "api/Syn.Bot.Siml.Events.MemorizingEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.MemorizingEventArgs.html",
    "title": "Class MemorizingEventArgs - Syn Developer Network",
    "keywords": "Class MemorizingEventArgs Inheritance System.Object System.EventArgs MemorizingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class MemorizingEventArgs : EventArgs Constructors MemorizingEventArgs(BotUser, XDocument) Declaration public MemorizingEventArgs(BotUser user, XDocument document) Parameters Type Name Description BotUser user System.Xml.Linq.XDocument document Properties Document Declaration public XDocument Document { get; } Property Value Type Description System.Xml.Linq.XDocument User Declaration public BotUser User { get; } Property Value Type Description BotUser"
  },
  "api/Syn.Bot.Siml.Events.ResponseReceivedEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.ResponseReceivedEventArgs.html",
    "title": "Class ResponseReceivedEventArgs - Syn Developer Network",
    "keywords": "Class ResponseReceivedEventArgs Inheritance System.Object System.EventArgs ResponseReceivedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class ResponseReceivedEventArgs : EventArgs Constructors ResponseReceivedEventArgs(ChatResult) Declaration public ResponseReceivedEventArgs(ChatResult result) Parameters Type Name Description ChatResult result Properties Result Declaration public ChatResult Result { get; } Property Value Type Description ChatResult"
  },
  "api/Syn.Bot.Siml.Events.SuggestingEventArgs.html": {
    "href": "api/Syn.Bot.Siml.Events.SuggestingEventArgs.html",
    "title": "Class SuggestingEventArgs - Syn Developer Network",
    "keywords": "Class SuggestingEventArgs Inheritance System.Object System.EventArgs SuggestingEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Events Assembly :Syn.Bot.dll Syntax public class SuggestingEventArgs : EventArgs Properties Handled Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean SearchQuery Declaration public SearchQuery SearchQuery { get; } Property Value Type Description SearchQuery Suggestion Declaration public Suggestion Suggestion { get; } Property Value Type Description Suggestion"
  },
  "api/Syn.Bot.Siml.Events.html": {
    "href": "api/Syn.Bot.Siml.Events.html",
    "title": "Namespace Syn.Bot.Siml.Events - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Events Classes EmotionChangedEventArgs LearningEventArgs MapChangedEventArgs Provides data for the CollectionChanged event. MapCollectionChangedEventArgs MemorizingEventArgs ResponseReceivedEventArgs SuggestingEventArgs Enums MapChangedAction Describes the action that caused a CollectionChanged event. MapCollectionEffect Type of effect on a MapCollection"
  },
  "api/Syn.Bot.Siml.Graph.TraversedNode.html": {
    "href": "api/Syn.Bot.Siml.Graph.TraversedNode.html",
    "title": "Class TraversedNode - Syn Developer Network",
    "keywords": "Class TraversedNode A class that contains all the SIML nodes traversed by the GraphNode when searching for a response when a ChatRequest is received. Inheritance System.Object TraversedNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class TraversedNode Properties VisitedNodes Gets all the GraphNode s visited by the GraphMaster. Declaration public IEnumerable<GraphNode> VisitedNodes { get; } Property Value Type Description System.Collections.Generic.IEnumerable < GraphNode > The visited nodes. Methods ContainsNode(GraphNode) Determines whether the specified node was searched by the Graph Master in the previous session. Declaration public bool ContainsNode(GraphNode node) Parameters Type Name Description GraphNode node The GraphNode. Returns Type Description System.Boolean GenerateNodes() Generates the nodes whose existence can be checked using the ContainsNode method. Declaration public void GenerateNodes()"
  },
  "api/Syn.Bot.Siml.Graph.Tree.html": {
    "href": "api/Syn.Bot.Siml.Graph.Tree.html",
    "title": "Class Tree - Syn Developer Network",
    "keywords": "Class Tree Inheritance System.Object System.Collections.Generic.Queue < Token > Tree QueryTree Inherited Members System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Clear() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Contains(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.CopyTo(Syn.Bot.Siml.Graph.Token[], System.Int32) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Dequeue() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Enqueue(Syn.Bot.Siml.Graph.Token) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Peek() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.Generic.IEnumerable<Syn.Bot.Siml.Graph.Token>.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.ToArray() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.TrimExcess() System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.Count System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Queue<Syn.Bot.Siml.Graph.Token>.System.Collections.ICollection.SyncRoot System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class Tree : Queue<Token>, IEnumerable<Token>, ICollection, IEnumerable Properties IsParsed Gets a value indicating whether this Tree is parsed and contains 0 token. Declaration public bool IsParsed { get; } Property Value Type Description System.Boolean true if this Tree is parsed; otherwise, false . State Gets the current query state. Declaration public MatchState State { get; } Property Value Type Description MatchState Token Declaration public Token Token { get; } Property Value Type Description Token Methods Add(Token) Declaration public void Add(Token token) Parameters Type Name Description Token token AddRange(IEnumerable<Token>) Declaration public void AddRange(IEnumerable<Token> tokenList) Parameters Type Name Description System.Collections.Generic.IEnumerable < Token > tokenList"
  },
  "api/Syn.Bot.Siml.Graph.Vertex.html": {
    "href": "api/Syn.Bot.Siml.Graph.Vertex.html",
    "title": "Class Vertex - Syn Developer Network",
    "keywords": "Class Vertex Inheritance System.Object Vertex Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class Vertex Properties Children Declaration public List<Vertex> Children { get; set; } Property Value Type Description System.Collections.Generic.List < Vertex > Keyword Declaration public string Keyword { get; set; } Property Value Type Description System.String"
  },
  "api/Syn.Bot.Siml.Graph.Wildcard.html": {
    "href": "api/Syn.Bot.Siml.Graph.Wildcard.html",
    "title": "Class Wildcard - Syn Developer Network",
    "keywords": "Class Wildcard Represents an SIML wildcard symbol. Inheritance System.Object Wildcard Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public class Wildcard Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Length Declaration public int Length { get; } Property Value Type Description System.Int32 Limit Declaration public int Limit { get; set; } Property Value Type Description System.Int32 Type Declaration public WildcardType Type { get; set; } Property Value Type Description WildcardType Methods Add(String) Declaration public void Add(string value) Parameters Type Name Description System.String value Append(String) Declaration public void Append(string value) Parameters Type Name Description System.String value ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Syn.Bot.Siml.Graph.WildcardType.html": {
    "href": "api/Syn.Bot.Siml.Graph.WildcardType.html",
    "title": "Enum WildcardType - Syn Developer Network",
    "keywords": "Enum WildcardType Namespace :Syn.Bot.Siml.Graph Assembly :Syn.Bot.dll Syntax public enum WildcardType Fields Name Description None Ranged Strict"
  },
  "api/Syn.Bot.Siml.Graph.html": {
    "href": "api/Syn.Bot.Siml.Graph.html",
    "title": "Namespace Syn.Bot.Siml.Graph - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Siml.Graph Classes GraphNode Represents an SIML Hybrid-Graph System. QueryTree ResponseTree SearchSequence TraversedNode A class that contains all the SIML nodes traversed by the GraphNode when searching for a response when a ChatRequest is received. Tree Vertex Wildcard Represents an SIML wildcard symbol. Structs Token Enums MatchState TokenType WildcardType"
  },
  "api/Syn.Bot.Siml.Helper.CacheManager.html": {
    "href": "api/Syn.Bot.Siml.Helper.CacheManager.html",
    "title": "Class CacheManager - Syn Developer Network",
    "keywords": "Class CacheManager Default cache management class for SynBot. Inheritance System.Object CacheManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Helper Assembly :Syn.Bot.dll Syntax public class CacheManager : ICacheManager Constructors CacheManager() Declaration public CacheManager() Properties IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean Implements ICacheManager.IsEmpty Size Declaration public int Size { get; } Property Value Type Description System.Int32 Implements ICacheManager.Size Methods Add(Object) Declaration public int Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Implements ICacheManager.Add(Object) Clear() Declaration public void Clear() Implements ICacheManager.Clear() GetValue<T>(Int32) Declaration public T GetValue<T>(int key) Parameters Type Name Description System.Int32 key Returns Type Description T Type Parameters Name Description T Implements ICacheManager.GetValue<T>(Int32) Remove(Int32) Declaration public bool Remove(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Boolean Implements ICacheManager.Remove(Int32)"
  },
  "api/Syn.Bot.Siml.Search.SearchEngine.html": {
    "href": "api/Syn.Bot.Siml.Search.SearchEngine.html",
    "title": "Class SearchEngine - Syn Developer Network",
    "keywords": "Class SearchEngine Default implementation of ISearchEngine interface. Inheritance System.Object SearchEngine Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.Bot.Siml.Search Assembly :Syn.Bot.dll Syntax public sealed class SearchEngine : ISearchEngine Methods GetSearchResult(SearchQuery, SearchItem) Gets the search result. Declaration public SearchResult GetSearchResult(SearchQuery searchQuery, SearchItem searchItem) Parameters Type Name Description SearchQuery searchQuery The search query. SearchItem searchItem The search item. Returns Type Description SearchResult Implements ISearchEngine.GetSearchResult(SearchQuery, SearchItem) See Also ISearchEngine"
  },
  "api/Syn.Bot.Utility.Cache.html": {
    "href": "api/Syn.Bot.Utility.Cache.html",
    "title": "Namespace Syn.Bot.Utility.Cache - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Utility.Cache Classes SqlCacheManager Caches all JSON serializable objects to an SQL Database. Duplicate entries are negligible because Database size is not a consideration. Only read-only entries that do not get modified are run-time must be cached. Variables MUST NOT be cached."
  },
  "api/Syn.Bot.Utility.Classes.LogItem.html": {
    "href": "api/Syn.Bot.Utility.Classes.LogItem.html",
    "title": "Class LogItem - Syn Developer Network",
    "keywords": "Class LogItem Inheritance System.Object LogItem Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class LogItem Constructors LogItem() Declaration public LogItem() Properties Message Declaration public string Message { get; set; } Property Value Type Description System.String Source Declaration public string Source { get; set; } Property Value Type Description System.String Time Declaration public DateTime Time { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Syn.Bot.Utility.Classes.MultipartParser.html": {
    "href": "api/Syn.Bot.Utility.Classes.MultipartParser.html",
    "title": "Class MultipartParser - Syn Developer Network",
    "keywords": "Class MultipartParser Inheritance System.Object MultipartParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class MultipartParser Constructors MultipartParser(Stream) Declaration public MultipartParser(Stream stream) Parameters Type Name Description System.IO.Stream stream MultipartParser(Stream, Encoding) Declaration public MultipartParser(Stream stream, Encoding encoding) Parameters Type Name Description System.IO.Stream stream System.Text.Encoding encoding Properties ContentType Declaration public string ContentType { get; } Property Value Type Description System.String FileContents Declaration public byte[] FileContents { get; } Property Value Type Description System.Byte [] Filename Declaration public string Filename { get; } Property Value Type Description System.String Success Declaration public bool Success { get; } Property Value Type Description System.Boolean"
  },
  "api/Syn.Bot.Utility.Classes.SynInvoice.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynInvoice.html",
    "title": "Class SynInvoice - Syn Developer Network",
    "keywords": "Class SynInvoice Summary description for SynInvoice Inheritance System.Object SynInvoice Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class SynInvoice Constructors SynInvoice(SynUser) Declaration public SynInvoice(SynUser user) Parameters Type Name Description SynUser user Properties LicenseName Declaration public string LicenseName { get; set; } Property Value Type Description System.String ProductName Declaration public string ProductName { get; set; } Property Value Type Description System.String Url Declaration public string Url { get; set; } Property Value Type Description System.String User Declaration public SynUser User { get; } Property Value Type Description SynUser Methods Info(Boolean) Declaration public string Info(bool isHtml = true) Parameters Type Name Description System.Boolean isHtml Returns Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynLicenseType.SynChatbot.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynLicenseType.SynChatbot.html",
    "title": "Class SynLicenseType.SynChatbot - Syn Developer Network",
    "keywords": "Class SynLicenseType.SynChatbot Inheritance System.Object SynLicenseType.SynChatbot Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public static class SynChatbot Fields OneMonthRenewal Declaration public const string OneMonthRenewal = \"1 Month Renewal\" Field Value Type Description System.String StartSubscription Declaration public const string StartSubscription = \"Start Subscription\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynLicenseType.SynEngine.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynLicenseType.SynEngine.html",
    "title": "Class SynLicenseType.SynEngine - Syn Developer Network",
    "keywords": "Class SynLicenseType.SynEngine Inheritance System.Object SynLicenseType.SynEngine Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public static class SynEngine Fields CommercialBusinessLicense Declaration public const string CommercialBusinessLicense = \"Commercial Business License $89\" Field Value Type Description System.String SingleDeveloperLicense Declaration public const string SingleDeveloperLicense = \"Single Developer License $55\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynLicenseType.SynVirtualAssistant.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynLicenseType.SynVirtualAssistant.html",
    "title": "Class SynLicenseType.SynVirtualAssistant - Syn Developer Network",
    "keywords": "Class SynLicenseType.SynVirtualAssistant Inheritance System.Object SynLicenseType.SynVirtualAssistant Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public static class SynVirtualAssistant Fields OneYearExtendedLicense Declaration public const string OneYearExtendedLicense = \"1 Year Extended License $8.99 \" Field Value Type Description System.String OneYearMultiplePcLicense Declaration public const string OneYearMultiplePcLicense = \"1 Year Multiple PCs Business License $89\" Field Value Type Description System.String OneYearSinglePcLicense Declaration public const string OneYearSinglePcLicense = \"1 Year Single PC Business License $55\" Field Value Type Description System.String"
  },
  "api/Syn.Bot.Utility.Classes.SynLicenseType.html": {
    "href": "api/Syn.Bot.Utility.Classes.SynLicenseType.html",
    "title": "Class SynLicenseType - Syn Developer Network",
    "keywords": "Class SynLicenseType Summary description for SynLicenseType Inheritance System.Object SynLicenseType Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Classes Assembly :Syn.Bot.Utility.dll Syntax public class SynLicenseType"
  },
  "api/Syn.Bot.Utility.Format.WebSuggestionFormatter.html": {
    "href": "api/Syn.Bot.Utility.Format.WebSuggestionFormatter.html",
    "title": "Class WebSuggestionFormatter - Syn Developer Network",
    "keywords": "Class WebSuggestionFormatter Inheritance System.Object WebSuggestionFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility.Format Assembly :Syn.Bot.Utility.dll Syntax public class WebSuggestionFormatter : ISuggestionFormatter Methods Format(Suggestion) Declaration public string Format(Suggestion suggestion) Parameters Type Name Description Suggestion suggestion Returns Type Description System.String Implements ISuggestionFormatter.Format(Suggestion)"
  },
  "api/Syn.Bot.Utility.Format.html": {
    "href": "api/Syn.Bot.Utility.Format.html",
    "title": "Namespace Syn.Bot.Utility.Format - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Utility.Format Classes WebSuggestionFormatter"
  },
  "api/Syn.Bot.Utility.ProjectManager.html": {
    "href": "api/Syn.Bot.Utility.ProjectManager.html",
    "title": "Class ProjectManager - Syn Developer Network",
    "keywords": "Class ProjectManager Inheritance System.Object ViewModelBase ProjectManager Inherited Members ViewModelBase.OnPropertyChanged(String) ViewModelBase.PropertyChanged System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility Assembly :Syn.Bot.Utility.dll Syntax public class ProjectManager : ViewModelBase, INotifyPropertyChanged Constructors ProjectManager() Declaration public ProjectManager() Properties Author Declaration public string Author { get; set; } Property Value Type Description System.String BotName Declaration public string BotName { get; set; } Property Value Type Description System.String Description Declaration public string Description { get; set; } Property Value Type Description System.String DirectoryName Declaration public string DirectoryName { get; set; } Property Value Type Description System.String DisplayName Declaration public string DisplayName { get; set; } Property Value Type Description System.String FilePath Declaration public string FilePath { get; } Property Value Type Description System.String Name Name of the Project. Can be the Name of the Bot as well. Declaration public string Name { get; set; } Property Value Type Description System.String Notes Declaration public string Notes { get; set; } Property Value Type Description System.String Personality Type of Personality given to the Bot. Example ( Girl Friend, Virtual Agent, Customer Support ) Declaration public string Personality { get; set; } Property Value Type Description System.String ProjectDirectory Declaration public string ProjectDirectory { get; } Property Value Type Description System.String ProjectElement Declaration public XElement ProjectElement { get; } Property Value Type Description System.Xml.Linq.XElement SimlFiles Declaration public List<string> SimlFiles { get; } Property Value Type Description System.Collections.Generic.List < System.String > StartDate Declaration public string StartDate { get; set; } Property Value Type Description System.String Status Declaration public string Status { get; set; } Property Value Type Description System.String TemplateDirectoryPath Declaration public string TemplateDirectoryPath { get; } Property Value Type Description System.String Templates Declaration public List<ProjectManager> Templates { get; } Property Value Type Description System.Collections.Generic.List < ProjectManager > Methods LoadFromDirectory(String) Declaration public void LoadFromDirectory(string directoryPath) Parameters Type Name Description System.String directoryPath LoadFromFile(String) Declaration public void LoadFromFile(string filePath) Parameters Type Name Description System.String filePath LoadIntoBot(SimlBot) Declaration public void LoadIntoBot(SimlBot bot) Parameters Type Name Description SimlBot bot Reset() Declaration public void Reset() Save() Declaration public void Save()"
  },
  "api/Syn.Bot.Utility.SimlFileManager.html": {
    "href": "api/Syn.Bot.Utility.SimlFileManager.html",
    "title": "Class SimlFileManager - Syn Developer Network",
    "keywords": "Class SimlFileManager Inheritance System.Object SimlFileManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Bot.Utility Assembly :Syn.Bot.Utility.dll Syntax public class SimlFileManager Constructors SimlFileManager(String) Declaration public SimlFileManager(string settingsDirectory) Parameters Type Name Description System.String settingsDirectory Methods SaveDocument(String, XDocument) Declaration public void SaveDocument(string fileId, XDocument document) Parameters Type Name Description System.String fileId System.Xml.Linq.XDocument document"
  },
  "api/Syn.Bot.Utility.html": {
    "href": "api/Syn.Bot.Utility.html",
    "title": "Namespace Syn.Bot.Utility - Syn Developer Network",
    "keywords": "Namespace Syn.Bot.Utility Classes ProjectManager SimlFileManager"
  },
  "api/Syn.EmotionML.ActionTendency.html": {
    "href": "api/Syn.EmotionML.ActionTendency.html",
    "title": "Class ActionTendency - Syn Developer Network",
    "keywords": "Class ActionTendency A class that describes an emotion or a related state according to an emotion action tendency vocabulary. Inheritance System.Object EmotionRelatedState ActionTendency Inherited Members EmotionRelatedState.Name EmotionRelatedState.Value EmotionRelatedState.Confidence EmotionRelatedState.Trace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class ActionTendency : EmotionRelatedState Constructors ActionTendency(String) Initializes a new instance of ActionTendency Declaration public ActionTendency(string name) Parameters Type Name Description System.String name The name of the action tendency. ActionTendency(String, Nullable<Double>) Initializes a new instance of the ActionTendency class. Declaration public ActionTendency(string name, double ? value) Parameters Type Name Description System.String name The name of the action tendency. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. ActionTendency(String, Nullable<Double>, Nullable<Double>) Initializes a new instance of the ActionTendency class. Declaration public ActionTendency(string name, double ? value, double ? confidence) Parameters Type Name Description System.String name The name of the action tendency. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. System.Nullable < System.Double > confidence The annotator's confidence that the annotation given for this action tendency is correct. Properties ActionTendencyFrijda Gets Frijda's action tendencies vocabulary URI Declaration public static string ActionTendencyFrijda { get; } Property Value Type Description System.String"
  },
  "api/Syn.EmotionML.Appraisal.html": {
    "href": "api/Syn.EmotionML.Appraisal.html",
    "title": "Class Appraisal - Syn Developer Network",
    "keywords": "Class Appraisal A class that describes an emotion or a related state according to an emotion appraisal vocabulary. Inheritance System.Object EmotionRelatedState Appraisal Inherited Members EmotionRelatedState.Name EmotionRelatedState.Value EmotionRelatedState.Confidence EmotionRelatedState.Trace System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.EmotionML Assembly :Syn.EmotionML.dll Syntax public class Appraisal : EmotionRelatedState Constructors Appraisal(String) Initializes a new instance of the Appraisal class. Declaration public Appraisal(string name) Parameters Type Name Description System.String name The name of the appraisal, which must be contained in the declared appraisal vocabulary. Appraisal(String, Nullable<Double>) Initializes a new instance of the Appraisal class. Declaration public Appraisal(string name, double ? value) Parameters Type Name Description System.String name The name of the appraisal, which must be contained in the declared appraisal vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. Appraisal(String, Nullable<Double>, Nullable<Double>) Initializes a new instance of the Appraisal class. Declaration public Appraisal(string name, double ? value, double ? confidence) Parameters Type Name Description System.String name The name of the appraisal, which must be contained in the declared appraisal vocabulary. System.Nullable < System.Double > value The static scale value which must be a floating point value from the closed interval [0, 1]. System.Nullable < System.Double > confidence The degree of confidence or probability that the emotion representation carrying this attribute is correct. Properties AppraisalEma Gets the EMA appraisals vocabulary URI Declaration public static string AppraisalEma { get; } Property Value Type Description System.String AppraisalOcc Gets the OCC appraisals vocabulary URI Declaration public static string AppraisalOcc { get; } Property Value Type Description System.String AppraisalScherer Gets the Scherer's appraisals vocabulary URI Declaration public static string AppraisalScherer { get; } Property Value Type Description System.String"
  },
  "api/Syn.Utility.Utilities.PerformanceUtility.html": {
    "href": "api/Syn.Utility.Utilities.PerformanceUtility.html",
    "title": "Class PerformanceUtility - Syn Developer Network",
    "keywords": "Class PerformanceUtility Inheritance System.Object PerformanceUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class PerformanceUtility Methods Test(Action) Declaration public TimeSpan Test(Action action) Parameters Type Name Description System.Action action Returns Type Description System.TimeSpan"
  },
  "api/Syn.Utility.Utilities.ProcessUtility.html": {
    "href": "api/Syn.Utility.Utilities.ProcessUtility.html",
    "title": "Class ProcessUtility - Syn Developer Network",
    "keywords": "Class ProcessUtility Inheritance System.Object ProcessUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ProcessUtility Methods Close(String) Closes the mainwindow of the process specified. Declaration public void Close(string processName) Parameters Type Name Description System.String processName Name of the process. HasMultipleInstances() Determines whether the current application has another instance running. Declaration public bool HasMultipleInstances() Returns Type Description System.Boolean true if another instance of this application is runnig; otherwise, false . Kill(String) Kills the process with the name specified. Declaration public void Kill(string processName) Parameters Type Name Description System.String processName Friendly name of the process without any extensions. Start(String) Declaration public void Start(string processName) Parameters Type Name Description System.String processName Start(String, String) Declaration public void Start(string processName, string arguments) Parameters Type Name Description System.String processName System.String arguments"
  },
  "api/Syn.Utility.Utilities.RegexPatternUtility.html": {
    "href": "api/Syn.Utility.Utilities.RegexPatternUtility.html",
    "title": "Class RegexPatternUtility - Syn Developer Network",
    "keywords": "Class RegexPatternUtility Inheritance System.Object RegexPatternUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class RegexPatternUtility Properties Alphanumeric Starts and ends with Alphanumeric characters. Declaration public string Alphanumeric { get; } Property Value Type Description System.String CloseTag XML Close Tag. Declaration public string CloseTag { get; } Property Value Type Description System.String OpenTag XML Open Tag. Declaration public string OpenTag { get; } Property Value Type Description System.String SelfClosingTag XML Self closing Tag. Declaration public string SelfClosingTag { get; } Property Value Type Description System.String"
  },
  "api/Syn.Utility.Utilities.RegexUtility.html": {
    "href": "api/Syn.Utility.Utilities.RegexUtility.html",
    "title": "Class RegexUtility - Syn Developer Network",
    "keywords": "Class RegexUtility Inheritance System.Object RegexUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class RegexUtility Properties Patterns Declaration public RegexPatternUtility Patterns { get; } Property Value Type Description RegexPatternUtility Methods EndsWith(String, String) Determines if the input string ends with the specified pattern. Declaration public bool EndsWith(string input, string pattern) Parameters Type Name Description System.String input System.String pattern Returns Type Description System.Boolean StartWith(String, String) Determines if the input string begins with the specified pattern. Declaration public bool StartWith(string input, string pattern) Parameters Type Name Description System.String input System.String pattern Returns Type Description System.Boolean"
  },
  "api/Syn.Utility.Utilities.ScreenUtility.html": {
    "href": "api/Syn.Utility.Utilities.ScreenUtility.html",
    "title": "Class ScreenUtility - Syn Developer Network",
    "keywords": "Class ScreenUtility Inheritance System.Object ScreenUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class ScreenUtility Methods GetScreenshot() Declaration public Image GetScreenshot() Returns Type Description System.Drawing.Image GetWindowSize(WindowSizeType) Declaration public Size GetWindowSize(WindowSizeType windowSizeType) Parameters Type Name Description WindowSizeType windowSizeType Returns Type Description System.Drawing.Size"
  },
  "api/Syn.Utility.Utilities.SecurityUtility.html": {
    "href": "api/Syn.Utility.Utilities.SecurityUtility.html",
    "title": "Class SecurityUtility - Syn Developer Network",
    "keywords": "Class SecurityUtility Helper class to deal with string encryption and decryption. Inheritance System.Object SecurityUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class SecurityUtility Methods Decrypt(String, String) Decrypts the specified value using the provided encryption key. Declaration public string Decrypt(string value, string encryptionKey = null) Parameters Type Name Description System.String value The value. System.String encryptionKey The encryption key. Returns Type Description System.String Decrypted string value. Encrypt(String, String) Encrypts the specified value. Declaration public string Encrypt(string value, string encryptionKey = null) Parameters Type Name Description System.String value The value. System.String encryptionKey The encryption key. Returns Type Description System.String Encrypted string value. SimpleDecrypt(String) Declaration public string SimpleDecrypt(string text) Parameters Type Name Description System.String text Returns Type Description System.String SimpleEncrypt(String) Declaration public string SimpleEncrypt(string text) Parameters Type Name Description System.String text Returns Type Description System.String"
  },
  "api/Syn.Utility.Utilities.SizeMeasure.html": {
    "href": "api/Syn.Utility.Utilities.SizeMeasure.html",
    "title": "Enum SizeMeasure - Syn Developer Network",
    "keywords": "Enum SizeMeasure Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum SizeMeasure Fields Name Description Byte Gigabyte Kilobyte Megabyte"
  },
  "api/Syn.Utility.Utilities.TextUtility.html": {
    "href": "api/Syn.Utility.Utilities.TextUtility.html",
    "title": "Class TextUtility - Syn Developer Network",
    "keywords": "Class TextUtility Inheritance System.Object TextUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class TextUtility Properties Patterns Declaration public PatternsUtility Patterns { get; } Property Value Type Description PatternsUtility Methods ConvertToDayOfWeek(String) Converts a given string value to Day of Week. Declaration public DayOfWeek ConvertToDayOfWeek(string value) Parameters Type Name Description System.String value Day of week in string format Returns Type Description System.DayOfWeek DateOfDay(DayOfWeek) Returns the Date of the given Day in the following week. Declaration public DateTime DateOfDay(DayOfWeek day) Parameters Type Name Description System.DayOfWeek day Day Returns Type Description System.DateTime EscapeInvalid(String) Removes invalid characters Declaration public string EscapeInvalid(string text) Parameters Type Name Description System.String text string to evaluate. Returns Type Description System.String FileTimeFormat(String) Removes symbols and other characters from the given string to make it suitable for a file name. Declaration public string FileTimeFormat(string value) Parameters Type Name Description System.String value String to format. Returns Type Description System.String GetAllUnderDistance(String, IEnumerable<String>, Double) Declaration public IEnumerable<string> GetAllUnderDistance(string source, IEnumerable<string> matches, double percent) Parameters Type Name Description System.String source System.Collections.Generic.IEnumerable < System.String > matches System.Double percent Returns Type Description System.Collections.Generic.IEnumerable < System.String > GetFormattedSentence(List<String>) Joins a list of sentences into a single sentence Declaration public string GetFormattedSentence(List<string> value) Parameters Type Name Description System.Collections.Generic.List < System.String > value Value. Returns Type Description System.String The formatted sentence. GetNumbers(String) Extracts numbers from a given string Declaration public List<double> GetNumbers(string textString) Parameters Type Name Description System.String textString String to parse Returns Type Description System.Collections.Generic.List < System.Double > GetRandom(List<String>) Returns a random item from the given list. Declaration public string GetRandom(List<string> stringList) Parameters Type Name Description System.Collections.Generic.List < System.String > stringList List to use for randomization. Returns Type Description System.String GetTimeAfterTimeSpan(TimeSpan) Returns the time after the specified time-span Declaration public DateTime GetTimeAfterTimeSpan(TimeSpan timeSpan) Parameters Type Name Description System.TimeSpan timeSpan Time-Span Returns Type Description System.DateTime GetWords(String, String) Gets the list of Words Declaration public List<string> GetWords(string textString, string seperator = \" \") Parameters Type Name Description System.String textString Text string. System.String seperator Seperator. Returns Type Description System.Collections.Generic.List < System.String > The words. GetWordsPattern(List<String>, Boolean) Creates a pattern for every word found in the given string. Declaration public string GetWordsPattern(List<string> words, bool wordBoundry = true) Parameters Type Name Description System.Collections.Generic.List < System.String > words List of words. System.Boolean wordBoundry Determines if the Word boundary anchors are added to generated pattern Returns Type Description System.String LevenshteinDistance(String, String) Gets the Levenshtein Distance Declaration public int LevenshteinDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Int32 NewLine() Returns a universal new line character. Declaration public string NewLine() Returns Type Description System.String NewLine(Int32) Returns a universal new line character. Declaration public string NewLine(int repeat) Parameters Type Name Description System.Int32 repeat Number of new lines. Returns Type Description System.String Numbered(List<String>) Adds numbering to every string in the list Declaration public string Numbered(List<string> stringList) Parameters Type Name Description System.Collections.Generic.List < System.String > stringList List on which numbering has to be done. Returns Type Description System.String NumberSize(Double) Returns the number of digits in the specified number Declaration public int NumberSize(double number) Parameters Type Name Description System.Double number Number to check Returns Type Description System.Int32 Quoted(String) Quotes the given string. Declaration public string Quoted(string value) Parameters Type Name Description System.String value String to quote. Returns Type Description System.String ReplaceLastOccurrence(String, String, String) Declaration public string ReplaceLastOccurrence(string source, string toSearch, string replace) Parameters Type Name Description System.String source System.String toSearch System.String replace Returns Type Description System.String TextAfter(String, String) Returns the string found after the given string Declaration public string TextAfter(string mainString, string afterString) Parameters Type Name Description System.String mainString Main string. System.String afterString Search string. Returns Type Description System.String TextAfterPattern(String, String) Returns a string found after the given pattern Declaration public string TextAfterPattern(string mainText, string pattern) Parameters Type Name Description System.String mainText Main text. System.String pattern Pattern. Returns Type Description System.String The pattern. TextBefore(String, String) Returns the string found before the given string Declaration public string TextBefore(string mainString, string beforeString) Parameters Type Name Description System.String mainString Main string. System.String beforeString Search string. Returns Type Description System.String TextBeforePattern(String, String) Returns a string found before the given pattern Declaration public string TextBeforePattern(string mainText, string pattern) Parameters Type Name Description System.String mainText Main text. System.String pattern Pattern. Returns Type Description System.String The pattern. TextBetween(String, String, String) Returns a string found between two given strings Declaration public string TextBetween(string mainString, string firstString, string secondString) Parameters Type Name Description System.String mainString Main string System.String firstString Start string System.String secondString End string Returns Type Description System.String TextBetweenPatterns(String, String, String) Returns a string found between the given patterns Declaration public string TextBetweenPatterns(string mainText, string firstPattern, string secondPattern) Parameters Type Name Description System.String mainText Main text. System.String firstPattern First pattern. System.String secondPattern Second pattern. Returns Type Description System.String The patterns. TextBetweenWith(String, String, String) Returns a string found with the two given strings. Declaration public string TextBetweenWith(string mainString, string firstString, string secondString) Parameters Type Name Description System.String mainString Main string System.String firstString Start string System.String secondString End string Returns Type Description System.String TimeSpanSentence(Int32) Returns a sentence in string format that represents the given time span in Day-Hour-Minutes-Seconds format. Declaration public string TimeSpanSentence(int secondSpan) Parameters Type Name Description System.Int32 secondSpan Time span to evaluate Returns Type Description System.String Tomorrow() Returns the Next Day in DateTime format. Declaration public DateTime Tomorrow() Returns Type Description System.DateTime UppercaseFirstLetter(String) Returns a string with the first character in capital Declaration public string UppercaseFirstLetter(string value) Parameters Type Name Description System.String value String to format. Returns Type Description System.String WordCount(String) Returns the number of words in a string. Declaration public int WordCount(string value) Parameters Type Name Description System.String value string as value. Returns Type Description System.Int32"
  },
  "api/Syn.Utility.Utilities.TimingUtility.html": {
    "href": "api/Syn.Utility.Utilities.TimingUtility.html",
    "title": "Class TimingUtility - Syn Developer Network",
    "keywords": "Class TimingUtility Inheritance System.Object TimingUtility Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public class TimingUtility Methods After(Guid, Int32) Returns true for an ID after the given time interval is reached. Declaration public bool After(Guid id, int waitTime) Parameters Type Name Description System.Guid id GUID. System.Int32 waitTime Time in seconds. Returns Type Description System.Boolean Decrypt(String, String) Decrypt the specified value using the encryption Key. Declaration public string Decrypt(string value, string encryptionKey) Parameters Type Name Description System.String value Value to decrypt. System.String encryptionKey Encryption key. Returns Type Description System.String Delay(Guid, Int32) Returns false until the given time span has elapsed Declaration public bool Delay(Guid id, int waitTime) Parameters Type Name Description System.Guid id ID for this Delay. System.Int32 waitTime Wait time in seconds. Returns Type Description System.Boolean Delay(Guid, Int32, Int32) Returns false until the given time span has elapsed Declaration public bool Delay(Guid id, int minimumDelay, int maximumDelay) Parameters Type Name Description System.Guid id I. System.Int32 minimumDelay Minimum delay. System.Int32 maximumDelay Maximum delay. Returns Type Description System.Boolean Encrypt(String, String) Encrypt the specified value using the encryption key. Declaration public string Encrypt(string value, string encryptionKey) Parameters Type Name Description System.String value Value to encrypt. System.String encryptionKey Encryption key. Returns Type Description System.String GetEnum<T>(String, Boolean) Returns the Enumerated constant represented by the given string. Declaration public T GetEnum<T>(string name, bool ignoreCase = true) Parameters Type Name Description System.String name Enumerated constant in string. System.Boolean ignoreCase Determines if the operation is case-sensitive. Returns Type Description T Type Parameters Name Description T Enumerated constant type. IsMatch(String, String) Checks if the pattern is found within the given string. Declaration public bool IsMatch(string input, string pattern) Parameters Type Name Description System.String input Input to check. System.String pattern Pattern to use. Returns Type Description System.Boolean Late(Guid, Boolean, Int32) Returns true for an ID if the condition provided is true and the minimum time interval is met. Declaration public bool Late(Guid id, bool condition, int minimumTime) Parameters Type Name Description System.Guid id GUID. System.Boolean condition Condition to check. System.Int32 minimumTime Minimum time in seconds. Returns Type Description System.Boolean LateMilliseconds(Guid, Boolean, Int32) Returns true for an ID if the condition provided is true and the minimum time interval is met. Declaration public bool LateMilliseconds(Guid id, bool condition, int minimumTime) Parameters Type Name Description System.Guid id GUID. System.Boolean condition Condition to check. System.Int32 minimumTime Minimum time in milliseconds. Returns Type Description System.Boolean Probability(Double) Returns true if the value is above a threshold. Declaration public bool Probability(double value) Parameters Type Name Description System.Double value Value between 0 and 1 Returns Type Description System.Boolean Randomise(Int32, Int32) Returns a random number between the given values Declaration public int Randomise(int startPoint, int endPoint) Parameters Type Name Description System.Int32 startPoint Start point. System.Int32 endPoint End point. Returns Type Description System.Int32 RandomItem<T>(List<T>) Returns a random item from a list Declaration public T RandomItem<T>(List<T> itemList) Parameters Type Name Description System.Collections.Generic.List <T> itemList List of items. Returns Type Description T Type Parameters Name Description T Type of items in list. Switcher(Guid, Boolean) Returns true or false by switching between the given value Declaration public bool Switcher(Guid id, bool checkCondition) Parameters Type Name Description System.Guid id ID to check. System.Boolean checkCondition Condition to match. Returns Type Description System.Boolean ThreadSleep(Int32) Suspends the current thread for the given number of milli-seconds Declaration public void ThreadSleep(int milliSeconds) Parameters Type Name Description System.Int32 milliSeconds Milliseconds in integer"
  },
  "api/Syn.Utility.Utilities.Win32Utility.BeepType.html": {
    "href": "api/Syn.Utility.Utilities.Win32Utility.BeepType.html",
    "title": "Enum Win32Utility.BeepType - Syn Developer Network",
    "keywords": "Enum Win32Utility.BeepType Namespace :Syn.Utility.Utilities Assembly :Syn.Utility.dll Syntax public enum BeepType Fields Name Description AnsiBeep AutoBeep DeclareBeep DllImportBeep UnicodeBeep"
  },
  "api/Syn.VA.Events.SettingsChangedEventArgs.html": {
    "href": "api/Syn.VA.Events.SettingsChangedEventArgs.html",
    "title": "Class SettingsChangedEventArgs - Syn Developer Network",
    "keywords": "Class SettingsChangedEventArgs Provides data for the SettingsChanged event. Inheritance System.Object System.EventArgs SettingsChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class SettingsChangedEventArgs : EventArgs Properties Action Gets the action that caused the event. Declaration public SettingsChangedAction Action { get; } Property Value Type Description SettingsChangedAction Variable Gets the IVariable involved in the change. Declaration public IVariable Variable { get; } Property Value Type Description IVariable"
  },
  "api/Syn.VA.Events.SettingsSavedEventArgs.html": {
    "href": "api/Syn.VA.Events.SettingsSavedEventArgs.html",
    "title": "Class SettingsSavedEventArgs - Syn Developer Network",
    "keywords": "Class SettingsSavedEventArgs Inheritance System.Object SettingsSavedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class SettingsSavedEventArgs Constructors SettingsSavedEventArgs(Settings) Declaration public SettingsSavedEventArgs(Settings settings) Parameters Type Name Description Settings settings Properties Settings Declaration public Settings Settings { get; } Property Value Type Description Settings"
  },
  "api/Syn.VA.Events.SynthesizerChangedEventArgs.html": {
    "href": "api/Syn.VA.Events.SynthesizerChangedEventArgs.html",
    "title": "Class SynthesizerChangedEventArgs - Syn Developer Network",
    "keywords": "Class SynthesizerChangedEventArgs Inheritance System.Object System.EventArgs SynthesizerChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class SynthesizerChangedEventArgs : EventArgs Properties Synthesizer Declaration public ISpeechSynthesizer Synthesizer { get; set; } Property Value Type Description ISpeechSynthesizer"
  },
  "api/Syn.VA.Events.UserIdChangedEventArgs.html": {
    "href": "api/Syn.VA.Events.UserIdChangedEventArgs.html",
    "title": "Class UserIdChangedEventArgs - Syn Developer Network",
    "keywords": "Class UserIdChangedEventArgs Inheritance System.Object UserIdChangedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class UserIdChangedEventArgs Properties CurrentId Declaration public string CurrentId { get; } Property Value Type Description System.String PreviousId Declaration public string PreviousId { get; } Property Value Type Description System.String"
  },
  "api/Syn.VA.Events.VariableChangedAction.html": {
    "href": "api/Syn.VA.Events.VariableChangedAction.html",
    "title": "Enum VariableChangedAction - Syn Developer Network",
    "keywords": "Enum VariableChangedAction Describes the action that caused a Changed event. Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public enum VariableChangedAction Fields Name Description Add Remove Set"
  },
  "api/Syn.VA.Events.VariableChangedEventArgs.html": {
    "href": "api/Syn.VA.Events.VariableChangedEventArgs.html",
    "title": "Class VariableChangedEventArgs - Syn Developer Network",
    "keywords": "Class VariableChangedEventArgs Provides data for the Changed event. Inheritance System.Object System.EventArgs VariableChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace :Syn.VA.Events Assembly :Syn.VA.dll Syntax public class VariableChangedEventArgs : EventArgs Constructors VariableChangedEventArgs(VariableChangedAction, String) Initializes a new instance of the VariableChangedEventArgs class. Declaration public VariableChangedEventArgs(VariableChangedAction action, string value) Parameters Type Name Description VariableChangedAction action The action. System.String value The value. Properties Action Gets the action that caused the event. Declaration public VariableChangedAction Action { get; } Property Value Type Description VariableChangedAction Value Gets the string value involved in the change. Declaration public string Value { get; } Property Value Type Description System.String The value."
  }
}